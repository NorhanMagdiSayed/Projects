
UART_UC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000049f0  00004a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000ca  008000ca  00004aee  2**0
                  ALLOC
  3 .stab         000033c0  00000000  00000000  00004af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f9f  00000000  00000000  00007eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000913e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b183  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d208  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ded8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 10 	call	0x200e	; 0x200e <main>
      8a:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 24 	jmp	0x497e	; 0x497e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 eb       	ldi	r26, 0xB9	; 185
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 24 	jmp	0x4996	; 0x4996 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 24 	jmp	0x49ce	; 0x49ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 24 	jmp	0x4996	; 0x4996 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 24 	jmp	0x49ce	; 0x49ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 24 	jmp	0x497e	; 0x497e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 eb       	ldi	r24, 0xB9	; 185
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 24 	jmp	0x498e	; 0x498e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 eb       	ldi	r22, 0xB9	; 185
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e3 24 	jmp	0x49c6	; 0x49c6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cb 24 	jmp	0x4996	; 0x4996 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e7 24 	jmp	0x49ce	; 0x49ce <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cb 24 	jmp	0x4996	; 0x4996 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e7 24 	jmp	0x49ce	; 0x49ce <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cb 24 	jmp	0x4996	; 0x4996 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e7 24 	jmp	0x49ce	; 0x49ce <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cf 24 	jmp	0x499e	; 0x499e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 eb 24 	jmp	0x49d6	; 0x49d6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_u8GETPIN>:

u8 var=0;


u8  DIO_u8GETPIN(u8 Copy_PortX , u8 Copy_PinX)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_u8GETPIN+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_u8GETPIN+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
if(((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD)) && ((Copy_PinX >= DIO_u8PIN_0) && (Copy_PinX <= DIO_u8PIN_7)))
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	88 23       	and	r24, r24
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <DIO_u8GETPIN+0x18>
     cb4:	73 c0       	rjmp	.+230    	; 0xd9c <DIO_u8GETPIN+0xfe>
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	85 30       	cpi	r24, 0x05	; 5
     cba:	08 f0       	brcs	.+2      	; 0xcbe <DIO_u8GETPIN+0x20>
     cbc:	6f c0       	rjmp	.+222    	; 0xd9c <DIO_u8GETPIN+0xfe>
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	88 30       	cpi	r24, 0x08	; 8
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <DIO_u8GETPIN+0x28>
     cc4:	6b c0       	rjmp	.+214    	; 0xd9c <DIO_u8GETPIN+0xfe>
{
	switch(Copy_PortX)
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	3c 83       	std	Y+4, r19	; 0x04
     cce:	2b 83       	std	Y+3, r18	; 0x03
     cd0:	4b 81       	ldd	r20, Y+3	; 0x03
     cd2:	5c 81       	ldd	r21, Y+4	; 0x04
     cd4:	42 30       	cpi	r20, 0x02	; 2
     cd6:	51 05       	cpc	r21, r1
     cd8:	49 f1       	breq	.+82     	; 0xd2c <DIO_u8GETPIN+0x8e>
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	91 05       	cpc	r25, r1
     ce2:	34 f4       	brge	.+12     	; 0xcf0 <DIO_u8GETPIN+0x52>
     ce4:	2b 81       	ldd	r18, Y+3	; 0x03
     ce6:	3c 81       	ldd	r19, Y+4	; 0x04
     ce8:	21 30       	cpi	r18, 0x01	; 1
     cea:	31 05       	cpc	r19, r1
     cec:	61 f0       	breq	.+24     	; 0xd06 <DIO_u8GETPIN+0x68>
     cee:	56 c0       	rjmp	.+172    	; 0xd9c <DIO_u8GETPIN+0xfe>
     cf0:	4b 81       	ldd	r20, Y+3	; 0x03
     cf2:	5c 81       	ldd	r21, Y+4	; 0x04
     cf4:	43 30       	cpi	r20, 0x03	; 3
     cf6:	51 05       	cpc	r21, r1
     cf8:	61 f1       	breq	.+88     	; 0xd52 <DIO_u8GETPIN+0xb4>
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	91 05       	cpc	r25, r1
     d02:	d1 f1       	breq	.+116    	; 0xd78 <DIO_u8GETPIN+0xda>
     d04:	4b c0       	rjmp	.+150    	; 0xd9c <DIO_u8GETPIN+0xfe>
	{
	case u8PORTA:
		var=GET_BIT(PINA_REG ,Copy_PinX);
     d06:	e9 e3       	ldi	r30, 0x39	; 57
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a9 01       	movw	r20, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_u8GETPIN+0x80>
     d1a:	55 95       	asr	r21
     d1c:	47 95       	ror	r20
     d1e:	8a 95       	dec	r24
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_u8GETPIN+0x7c>
     d22:	ca 01       	movw	r24, r20
     d24:	81 70       	andi	r24, 0x01	; 1
     d26:	80 93 ca 00 	sts	0x00CA, r24
     d2a:	38 c0       	rjmp	.+112    	; 0xd9c <DIO_u8GETPIN+0xfe>
		break;
	case u8PORTB:
		var=GET_BIT(PINB_REG ,Copy_PinX);
     d2c:	e6 e3       	ldi	r30, 0x36	; 54
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a9 01       	movw	r20, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_u8GETPIN+0xa6>
     d40:	55 95       	asr	r21
     d42:	47 95       	ror	r20
     d44:	8a 95       	dec	r24
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_u8GETPIN+0xa2>
     d48:	ca 01       	movw	r24, r20
     d4a:	81 70       	andi	r24, 0x01	; 1
     d4c:	80 93 ca 00 	sts	0x00CA, r24
     d50:	25 c0       	rjmp	.+74     	; 0xd9c <DIO_u8GETPIN+0xfe>
		break;
	case u8PORTC:
		var=GET_BIT(PINC_REG ,Copy_PinX);
     d52:	e3 e3       	ldi	r30, 0x33	; 51
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	a9 01       	movw	r20, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_u8GETPIN+0xcc>
     d66:	55 95       	asr	r21
     d68:	47 95       	ror	r20
     d6a:	8a 95       	dec	r24
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_u8GETPIN+0xc8>
     d6e:	ca 01       	movw	r24, r20
     d70:	81 70       	andi	r24, 0x01	; 1
     d72:	80 93 ca 00 	sts	0x00CA, r24
     d76:	12 c0       	rjmp	.+36     	; 0xd9c <DIO_u8GETPIN+0xfe>
		break;
	case u8PORTD:
		var=GET_BIT(PIND_REG ,Copy_PinX);
     d78:	e0 e3       	ldi	r30, 0x30	; 48
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a9 01       	movw	r20, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_u8GETPIN+0xf2>
     d8c:	55 95       	asr	r21
     d8e:	47 95       	ror	r20
     d90:	8a 95       	dec	r24
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_u8GETPIN+0xee>
     d94:	ca 01       	movw	r24, r20
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	80 93 ca 00 	sts	0x00CA, r24
		break;
	}
}

return var;
     d9c:	80 91 ca 00 	lds	r24, 0x00CA
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <DIO_vidSETPINval>:

void DIO_vidSETPINval(u8 Copy_PortX , u8 Copy_PinX , u8 copy_value)

{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	27 97       	sbiw	r28, 0x07	; 7
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	89 83       	std	Y+1, r24	; 0x01
     dc4:	6a 83       	std	Y+2, r22	; 0x02
     dc6:	4b 83       	std	Y+3, r20	; 0x03


	if(((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD)) && ((Copy_PinX >= DIO_u8PIN_0) && (Copy_PinX <= DIO_u8PIN_7)) \
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	88 23       	and	r24, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <DIO_vidSETPINval+0x22>
     dce:	fb c0       	rjmp	.+502    	; 0xfc6 <DIO_vidSETPINval+0x218>
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	85 30       	cpi	r24, 0x05	; 5
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <DIO_vidSETPINval+0x2a>
     dd6:	f7 c0       	rjmp	.+494    	; 0xfc6 <DIO_vidSETPINval+0x218>
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	88 30       	cpi	r24, 0x08	; 8
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <DIO_vidSETPINval+0x32>
     dde:	f3 c0       	rjmp	.+486    	; 0xfc6 <DIO_vidSETPINval+0x218>
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	88 23       	and	r24, r24
     de4:	21 f0       	breq	.+8      	; 0xdee <DIO_vidSETPINval+0x40>
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	09 f0       	breq	.+2      	; 0xdee <DIO_vidSETPINval+0x40>
     dec:	ec c0       	rjmp	.+472    	; 0xfc6 <DIO_vidSETPINval+0x218>
			&& ((copy_value == DIO_u8HIGH) || (copy_value == DIO_u8LOW)))
	{
		if (copy_value==DIO_u8HIGH)
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	88 23       	and	r24, r24
     df2:	09 f0       	breq	.+2      	; 0xdf6 <DIO_vidSETPINval+0x48>
     df4:	70 c0       	rjmp	.+224    	; 0xed6 <DIO_vidSETPINval+0x128>
		{
			switch(Copy_PortX)
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	3f 83       	std	Y+7, r19	; 0x07
     dfe:	2e 83       	std	Y+6, r18	; 0x06
     e00:	8e 81       	ldd	r24, Y+6	; 0x06
     e02:	9f 81       	ldd	r25, Y+7	; 0x07
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	91 05       	cpc	r25, r1
     e08:	51 f1       	breq	.+84     	; 0xe5e <DIO_vidSETPINval+0xb0>
     e0a:	2e 81       	ldd	r18, Y+6	; 0x06
     e0c:	3f 81       	ldd	r19, Y+7	; 0x07
     e0e:	23 30       	cpi	r18, 0x03	; 3
     e10:	31 05       	cpc	r19, r1
     e12:	34 f4       	brge	.+12     	; 0xe20 <DIO_vidSETPINval+0x72>
     e14:	8e 81       	ldd	r24, Y+6	; 0x06
     e16:	9f 81       	ldd	r25, Y+7	; 0x07
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	61 f0       	breq	.+24     	; 0xe36 <DIO_vidSETPINval+0x88>
     e1e:	d3 c0       	rjmp	.+422    	; 0xfc6 <DIO_vidSETPINval+0x218>
     e20:	2e 81       	ldd	r18, Y+6	; 0x06
     e22:	3f 81       	ldd	r19, Y+7	; 0x07
     e24:	23 30       	cpi	r18, 0x03	; 3
     e26:	31 05       	cpc	r19, r1
     e28:	71 f1       	breq	.+92     	; 0xe86 <DIO_vidSETPINval+0xd8>
     e2a:	8e 81       	ldd	r24, Y+6	; 0x06
     e2c:	9f 81       	ldd	r25, Y+7	; 0x07
     e2e:	84 30       	cpi	r24, 0x04	; 4
     e30:	91 05       	cpc	r25, r1
     e32:	e9 f1       	breq	.+122    	; 0xeae <DIO_vidSETPINval+0x100>
     e34:	c8 c0       	rjmp	.+400    	; 0xfc6 <DIO_vidSETPINval+0x218>
			{
			case u8PORTA:
				SET_BIT(PORTA_REG,Copy_PinX);
     e36:	ab e3       	ldi	r26, 0x3B	; 59
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	eb e3       	ldi	r30, 0x3B	; 59
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_vidSETPINval+0xa6>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_vidSETPINval+0xa2>
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	b4 c0       	rjmp	.+360    	; 0xfc6 <DIO_vidSETPINval+0x218>
				break;
			case u8PORTB:
				SET_BIT(PORTB_REG,Copy_PinX);
     e5e:	a8 e3       	ldi	r26, 0x38	; 56
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e8 e3       	ldi	r30, 0x38	; 56
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_vidSETPINval+0xce>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_vidSETPINval+0xca>
     e80:	84 2b       	or	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	a0 c0       	rjmp	.+320    	; 0xfc6 <DIO_vidSETPINval+0x218>
				break;
			case u8PORTC:
				SET_BIT(PORTC_REG,Copy_PinX);
     e86:	a5 e3       	ldi	r26, 0x35	; 53
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e5 e3       	ldi	r30, 0x35	; 53
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_vidSETPINval+0xf6>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_vidSETPINval+0xf2>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	8c c0       	rjmp	.+280    	; 0xfc6 <DIO_vidSETPINval+0x218>
				break;
			case u8PORTD:
				SET_BIT(PORTD_REG,Copy_PinX);
     eae:	a2 e3       	ldi	r26, 0x32	; 50
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e2 e3       	ldi	r30, 0x32	; 50
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_vidSETPINval+0x11e>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_vidSETPINval+0x11a>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	78 c0       	rjmp	.+240    	; 0xfc6 <DIO_vidSETPINval+0x218>
				break;

			}
		}
			else if(copy_value == DIO_u8LOW)
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	09 f0       	breq	.+2      	; 0xede <DIO_vidSETPINval+0x130>
     edc:	74 c0       	rjmp	.+232    	; 0xfc6 <DIO_vidSETPINval+0x218>
			{

				switch(Copy_PortX)
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3d 83       	std	Y+5, r19	; 0x05
     ee6:	2c 83       	std	Y+4, r18	; 0x04
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	9d 81       	ldd	r25, Y+5	; 0x05
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	91 05       	cpc	r25, r1
     ef0:	61 f1       	breq	.+88     	; 0xf4a <DIO_vidSETPINval+0x19c>
     ef2:	2c 81       	ldd	r18, Y+4	; 0x04
     ef4:	3d 81       	ldd	r19, Y+5	; 0x05
     ef6:	23 30       	cpi	r18, 0x03	; 3
     ef8:	31 05       	cpc	r19, r1
     efa:	34 f4       	brge	.+12     	; 0xf08 <DIO_vidSETPINval+0x15a>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	91 05       	cpc	r25, r1
     f04:	69 f0       	breq	.+26     	; 0xf20 <DIO_vidSETPINval+0x172>
     f06:	5f c0       	rjmp	.+190    	; 0xfc6 <DIO_vidSETPINval+0x218>
     f08:	2c 81       	ldd	r18, Y+4	; 0x04
     f0a:	3d 81       	ldd	r19, Y+5	; 0x05
     f0c:	23 30       	cpi	r18, 0x03	; 3
     f0e:	31 05       	cpc	r19, r1
     f10:	89 f1       	breq	.+98     	; 0xf74 <DIO_vidSETPINval+0x1c6>
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <DIO_vidSETPINval+0x170>
     f1c:	40 c0       	rjmp	.+128    	; 0xf9e <DIO_vidSETPINval+0x1f0>
     f1e:	53 c0       	rjmp	.+166    	; 0xfc6 <DIO_vidSETPINval+0x218>
				{
				case u8PORTA:
					CLR_BIT(PORTA_REG,Copy_PinX);
     f20:	ab e3       	ldi	r26, 0x3B	; 59
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	eb e3       	ldi	r30, 0x3B	; 59
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_vidSETPINval+0x190>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_vidSETPINval+0x18c>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	3e c0       	rjmp	.+124    	; 0xfc6 <DIO_vidSETPINval+0x218>
					break;
				case u8PORTB:
					CLR_BIT(PORTB_REG,Copy_PinX);
     f4a:	a8 e3       	ldi	r26, 0x38	; 56
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e8 e3       	ldi	r30, 0x38	; 56
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_vidSETPINval+0x1ba>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_vidSETPINval+0x1b6>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	29 c0       	rjmp	.+82     	; 0xfc6 <DIO_vidSETPINval+0x218>
					break;
				case u8PORTC:
					CLR_BIT(PORTC_REG,Copy_PinX);
     f74:	a5 e3       	ldi	r26, 0x35	; 53
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_vidSETPINval+0x1e4>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_vidSETPINval+0x1e0>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	14 c0       	rjmp	.+40     	; 0xfc6 <DIO_vidSETPINval+0x218>
					break;
				case u8PORTD:
					CLR_BIT(PORTD_REG,Copy_PinX);
     f9e:	a2 e3       	ldi	r26, 0x32	; 50
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e2 e3       	ldi	r30, 0x32	; 50
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_vidSETPINval+0x20e>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_vidSETPINval+0x20a>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
			}

		}


	}
     fc6:	27 96       	adiw	r28, 0x07	; 7
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <DIO_vidSetPinDirection>:
	void DIO_vidSetPinDirection(u8 Copy_PortX,u8 Copy_PinX, u8 Copy_Direction)
	{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	27 97       	sbiw	r28, 0x07	; 7
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	6a 83       	std	Y+2, r22	; 0x02
     ff0:	4b 83       	std	Y+3, r20	; 0x03
		if(((Copy_PortX >= u8PORTA) && (Copy_PortX <= u8PORTD)) && ((Copy_PinX >= DIO_u8PIN_0) && (Copy_PinX <= DIO_u8PIN_7)) \
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	88 23       	and	r24, r24
     ff6:	09 f4       	brne	.+2      	; 0xffa <DIO_vidSetPinDirection+0x22>
     ff8:	fb c0       	rjmp	.+502    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	85 30       	cpi	r24, 0x05	; 5
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <DIO_vidSetPinDirection+0x2a>
    1000:	f7 c0       	rjmp	.+494    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	88 30       	cpi	r24, 0x08	; 8
    1006:	08 f0       	brcs	.+2      	; 0x100a <DIO_vidSetPinDirection+0x32>
    1008:	f3 c0       	rjmp	.+486    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 23       	and	r24, r24
    100e:	21 f0       	breq	.+8      	; 0x1018 <DIO_vidSetPinDirection+0x40>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	09 f0       	breq	.+2      	; 0x1018 <DIO_vidSetPinDirection+0x40>
    1016:	ec c0       	rjmp	.+472    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
				&& ((Copy_Direction == DIO_u8INPUT) || (Copy_Direction == DIO_u8OUTPUT)))
		{
			if(Copy_Direction == DIO_u8INPUT)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	88 23       	and	r24, r24
    101c:	09 f0       	breq	.+2      	; 0x1020 <DIO_vidSetPinDirection+0x48>
    101e:	75 c0       	rjmp	.+234    	; 0x110a <DIO_vidSetPinDirection+0x132>
			{
				switch(Copy_PortX)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3f 83       	std	Y+7, r19	; 0x07
    1028:	2e 83       	std	Y+6, r18	; 0x06
    102a:	8e 81       	ldd	r24, Y+6	; 0x06
    102c:	9f 81       	ldd	r25, Y+7	; 0x07
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	91 05       	cpc	r25, r1
    1032:	61 f1       	breq	.+88     	; 0x108c <DIO_vidSetPinDirection+0xb4>
    1034:	2e 81       	ldd	r18, Y+6	; 0x06
    1036:	3f 81       	ldd	r19, Y+7	; 0x07
    1038:	23 30       	cpi	r18, 0x03	; 3
    103a:	31 05       	cpc	r19, r1
    103c:	34 f4       	brge	.+12     	; 0x104a <DIO_vidSetPinDirection+0x72>
    103e:	8e 81       	ldd	r24, Y+6	; 0x06
    1040:	9f 81       	ldd	r25, Y+7	; 0x07
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	69 f0       	breq	.+26     	; 0x1062 <DIO_vidSetPinDirection+0x8a>
    1048:	d3 c0       	rjmp	.+422    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
    104a:	2e 81       	ldd	r18, Y+6	; 0x06
    104c:	3f 81       	ldd	r19, Y+7	; 0x07
    104e:	23 30       	cpi	r18, 0x03	; 3
    1050:	31 05       	cpc	r19, r1
    1052:	89 f1       	breq	.+98     	; 0x10b6 <DIO_vidSetPinDirection+0xde>
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	9f 81       	ldd	r25, Y+7	; 0x07
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	91 05       	cpc	r25, r1
    105c:	09 f4       	brne	.+2      	; 0x1060 <DIO_vidSetPinDirection+0x88>
    105e:	40 c0       	rjmp	.+128    	; 0x10e0 <DIO_vidSetPinDirection+0x108>
    1060:	c7 c0       	rjmp	.+398    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
				{
				case u8PORTA:
					CLR_BIT(DDRA_REG,Copy_PinX);
    1062:	aa e3       	ldi	r26, 0x3A	; 58
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ea e3       	ldi	r30, 0x3A	; 58
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_vidSetPinDirection+0xa8>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_vidSetPinDirection+0xa4>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	b2 c0       	rjmp	.+356    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTB:
					CLR_BIT(DDRB_REG,Copy_PinX);
    108c:	a7 e3       	ldi	r26, 0x37	; 55
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e7 e3       	ldi	r30, 0x37	; 55
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_vidSetPinDirection+0xd2>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_vidSetPinDirection+0xce>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	9d c0       	rjmp	.+314    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTC:
					CLR_BIT(DDRC_REG,Copy_PinX);
    10b6:	a4 e3       	ldi	r26, 0x34	; 52
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e4 e3       	ldi	r30, 0x34	; 52
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_vidSetPinDirection+0xfc>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_vidSetPinDirection+0xf8>
    10d8:	80 95       	com	r24
    10da:	84 23       	and	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	88 c0       	rjmp	.+272    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTD:
					CLR_BIT(DDRD_REG,Copy_PinX);
    10e0:	a1 e3       	ldi	r26, 0x31	; 49
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e1 e3       	ldi	r30, 0x31	; 49
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_vidSetPinDirection+0x126>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_vidSetPinDirection+0x122>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	73 c0       	rjmp	.+230    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
					break;
				}
			}
			else if(Copy_Direction == DIO_u8OUTPUT)
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	09 f0       	breq	.+2      	; 0x1112 <DIO_vidSetPinDirection+0x13a>
    1110:	6f c0       	rjmp	.+222    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
			{
				switch(Copy_PortX)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3d 83       	std	Y+5, r19	; 0x05
    111a:	2c 83       	std	Y+4, r18	; 0x04
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	91 05       	cpc	r25, r1
    1124:	51 f1       	breq	.+84     	; 0x117a <DIO_vidSetPinDirection+0x1a2>
    1126:	2c 81       	ldd	r18, Y+4	; 0x04
    1128:	3d 81       	ldd	r19, Y+5	; 0x05
    112a:	23 30       	cpi	r18, 0x03	; 3
    112c:	31 05       	cpc	r19, r1
    112e:	34 f4       	brge	.+12     	; 0x113c <DIO_vidSetPinDirection+0x164>
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	91 05       	cpc	r25, r1
    1138:	61 f0       	breq	.+24     	; 0x1152 <DIO_vidSetPinDirection+0x17a>
    113a:	5a c0       	rjmp	.+180    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
    113c:	2c 81       	ldd	r18, Y+4	; 0x04
    113e:	3d 81       	ldd	r19, Y+5	; 0x05
    1140:	23 30       	cpi	r18, 0x03	; 3
    1142:	31 05       	cpc	r19, r1
    1144:	71 f1       	breq	.+92     	; 0x11a2 <DIO_vidSetPinDirection+0x1ca>
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	91 05       	cpc	r25, r1
    114e:	e9 f1       	breq	.+122    	; 0x11ca <DIO_vidSetPinDirection+0x1f2>
    1150:	4f c0       	rjmp	.+158    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
				{
				case u8PORTA:
					SET_BIT(DDRA_REG,Copy_PinX);
    1152:	aa e3       	ldi	r26, 0x3A	; 58
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ea e3       	ldi	r30, 0x3A	; 58
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_vidSetPinDirection+0x198>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_vidSetPinDirection+0x194>
    1174:	84 2b       	or	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	3b c0       	rjmp	.+118    	; 0x11f0 <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTB:
					SET_BIT(DDRB_REG,Copy_PinX);
    117a:	a7 e3       	ldi	r26, 0x37	; 55
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e7 e3       	ldi	r30, 0x37	; 55
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_vidSetPinDirection+0x1c0>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_vidSetPinDirection+0x1bc>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	27 c0       	rjmp	.+78     	; 0x11f0 <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTC:
					SET_BIT(DDRC_REG,Copy_PinX);
    11a2:	a4 e3       	ldi	r26, 0x34	; 52
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e4 e3       	ldi	r30, 0x34	; 52
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_vidSetPinDirection+0x1e8>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_vidSetPinDirection+0x1e4>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	13 c0       	rjmp	.+38     	; 0x11f0 <DIO_vidSetPinDirection+0x218>
					break;
				case u8PORTD:
					SET_BIT(DDRD_REG,Copy_PinX);
    11ca:	a1 e3       	ldi	r26, 0x31	; 49
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e1 e3       	ldi	r30, 0x31	; 49
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_vidSetPinDirection+0x210>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_vidSetPinDirection+0x20c>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
					break;
				}
			}
		}

	}
    11f0:	27 96       	adiw	r28, 0x07	; 7
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <DIO_vidSETPORTDIRECION>:

	void DIO_vidSETPORTDIRECION(u8 copy_portx , u8 copy_direction)  // ALL THE 8 EIGHT PINS
	{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <DIO_vidSETPORTDIRECION+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <DIO_vidSETPORTDIRECION+0x8>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	6a 83       	std	Y+2, r22	; 0x02

		if((copy_portx >= u8PORTA)&&(copy_portx <= u8PORTD))
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	88 23       	and	r24, r24
    1216:	b1 f1       	breq	.+108    	; 0x1284 <DIO_vidSETPORTDIRECION+0x82>
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	85 30       	cpi	r24, 0x05	; 5
    121c:	98 f5       	brcc	.+102    	; 0x1284 <DIO_vidSETPORTDIRECION+0x82>
		{
			switch (copy_portx)
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3c 83       	std	Y+4, r19	; 0x04
    1226:	2b 83       	std	Y+3, r18	; 0x03
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	91 05       	cpc	r25, r1
    1230:	d9 f0       	breq	.+54     	; 0x1268 <DIO_vidSETPORTDIRECION+0x66>
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	3c 81       	ldd	r19, Y+4	; 0x04
    1236:	23 30       	cpi	r18, 0x03	; 3
    1238:	31 05       	cpc	r19, r1
    123a:	34 f4       	brge	.+12     	; 0x1248 <DIO_vidSETPORTDIRECION+0x46>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	61 f0       	breq	.+24     	; 0x125e <DIO_vidSETPORTDIRECION+0x5c>
    1246:	1e c0       	rjmp	.+60     	; 0x1284 <DIO_vidSETPORTDIRECION+0x82>
    1248:	2b 81       	ldd	r18, Y+3	; 0x03
    124a:	3c 81       	ldd	r19, Y+4	; 0x04
    124c:	23 30       	cpi	r18, 0x03	; 3
    124e:	31 05       	cpc	r19, r1
    1250:	81 f0       	breq	.+32     	; 0x1272 <DIO_vidSETPORTDIRECION+0x70>
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	91 05       	cpc	r25, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <DIO_vidSETPORTDIRECION+0x7a>
    125c:	13 c0       	rjmp	.+38     	; 0x1284 <DIO_vidSETPORTDIRECION+0x82>
			{
			case u8PORTA :
				DDRA_REG = copy_direction ;
    125e:	ea e3       	ldi	r30, 0x3A	; 58
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <DIO_vidSETPORTDIRECION+0x82>
				break;

			case u8PORTB :
				DDRB_REG = copy_direction ;
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <DIO_vidSETPORTDIRECION+0x82>
				break;

			case u8PORTC :
				DDRC_REG = copy_direction ;
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <DIO_vidSETPORTDIRECION+0x82>
				break;

			case u8PORTD :
				DDRD_REG = copy_direction ;
    127c:	e1 e3       	ldi	r30, 0x31	; 49
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
			}

		}


	}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <DIO_vidSETPORTVAL>:
	void DIO_vidSETPORTVAL(u8 COPY_PORTX , u8 copy_value)
	{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <DIO_vidSETPORTVAL+0x6>
    1298:	00 d0       	rcall	.+0      	; 0x129a <DIO_vidSETPORTVAL+0x8>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	6a 83       	std	Y+2, r22	; 0x02
		if((COPY_PORTX >= u8PORTA)&&(COPY_PORTX <= u8PORTD))
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	88 23       	and	r24, r24
    12a6:	b1 f1       	breq	.+108    	; 0x1314 <DIO_vidSETPORTVAL+0x82>
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	85 30       	cpi	r24, 0x05	; 5
    12ac:	98 f5       	brcc	.+102    	; 0x1314 <DIO_vidSETPORTVAL+0x82>
		{
			switch (COPY_PORTX)
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3c 83       	std	Y+4, r19	; 0x04
    12b6:	2b 83       	std	Y+3, r18	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	91 05       	cpc	r25, r1
    12c0:	d9 f0       	breq	.+54     	; 0x12f8 <DIO_vidSETPORTVAL+0x66>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	23 30       	cpi	r18, 0x03	; 3
    12c8:	31 05       	cpc	r19, r1
    12ca:	34 f4       	brge	.+12     	; 0x12d8 <DIO_vidSETPORTVAL+0x46>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	61 f0       	breq	.+24     	; 0x12ee <DIO_vidSETPORTVAL+0x5c>
    12d6:	1e c0       	rjmp	.+60     	; 0x1314 <DIO_vidSETPORTVAL+0x82>
    12d8:	2b 81       	ldd	r18, Y+3	; 0x03
    12da:	3c 81       	ldd	r19, Y+4	; 0x04
    12dc:	23 30       	cpi	r18, 0x03	; 3
    12de:	31 05       	cpc	r19, r1
    12e0:	81 f0       	breq	.+32     	; 0x1302 <DIO_vidSETPORTVAL+0x70>
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	84 30       	cpi	r24, 0x04	; 4
    12e8:	91 05       	cpc	r25, r1
    12ea:	81 f0       	breq	.+32     	; 0x130c <DIO_vidSETPORTVAL+0x7a>
    12ec:	13 c0       	rjmp	.+38     	; 0x1314 <DIO_vidSETPORTVAL+0x82>
			{
			case u8PORTA :
				PORTA_REG = copy_value ;
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	80 83       	st	Z, r24
    12f6:	0e c0       	rjmp	.+28     	; 0x1314 <DIO_vidSETPORTVAL+0x82>
				break;

			case u8PORTB :
				PORTB_REG = copy_value ;
    12f8:	e8 e3       	ldi	r30, 0x38	; 56
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	80 83       	st	Z, r24
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <DIO_vidSETPORTVAL+0x82>
				break;

			case u8PORTC :
				PORTC_REG = copy_value ;
    1302:	e5 e3       	ldi	r30, 0x35	; 53
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	80 83       	st	Z, r24
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <DIO_vidSETPORTVAL+0x82>
				break;

			case u8PORTD :
				PORTD_REG = copy_value ;
    130c:	e2 e3       	ldi	r30, 0x32	; 50
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	80 83       	st	Z, r24
				break;
			}
		}
	}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <DIO_vidSTOGGPORTVAL>:

	void DIO_vidSTOGGPORTVAL(u8 copy_portX, u8 copy_pinX)
	{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <DIO_vidSTOGGPORTVAL+0x6>
    1328:	00 d0       	rcall	.+0      	; 0x132a <DIO_vidSTOGGPORTVAL+0x8>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	6a 83       	std	Y+2, r22	; 0x02
		switch (copy_portX)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3c 83       	std	Y+4, r19	; 0x04
    133a:	2b 83       	std	Y+3, r18	; 0x03
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	91 05       	cpc	r25, r1
    1344:	51 f1       	breq	.+84     	; 0x139a <DIO_vidSTOGGPORTVAL+0x78>
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	23 30       	cpi	r18, 0x03	; 3
    134c:	31 05       	cpc	r19, r1
    134e:	34 f4       	brge	.+12     	; 0x135c <DIO_vidSTOGGPORTVAL+0x3a>
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	61 f0       	breq	.+24     	; 0x1372 <DIO_vidSTOGGPORTVAL+0x50>
    135a:	5a c0       	rjmp	.+180    	; 0x1410 <DIO_vidSTOGGPORTVAL+0xee>
    135c:	2b 81       	ldd	r18, Y+3	; 0x03
    135e:	3c 81       	ldd	r19, Y+4	; 0x04
    1360:	23 30       	cpi	r18, 0x03	; 3
    1362:	31 05       	cpc	r19, r1
    1364:	71 f1       	breq	.+92     	; 0x13c2 <DIO_vidSTOGGPORTVAL+0xa0>
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	84 30       	cpi	r24, 0x04	; 4
    136c:	91 05       	cpc	r25, r1
    136e:	e9 f1       	breq	.+122    	; 0x13ea <DIO_vidSTOGGPORTVAL+0xc8>
    1370:	4f c0       	rjmp	.+158    	; 0x1410 <DIO_vidSTOGGPORTVAL+0xee>
		{
		case u8PORTA:
			TOGGLE_BIT(PORTA_REG,copy_pinX);
    1372:	ab e3       	ldi	r26, 0x3B	; 59
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	eb e3       	ldi	r30, 0x3B	; 59
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_vidSTOGGPORTVAL+0x6e>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_vidSTOGGPORTVAL+0x6a>
    1394:	84 27       	eor	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	3b c0       	rjmp	.+118    	; 0x1410 <DIO_vidSTOGGPORTVAL+0xee>
			break;

		case u8PORTB:
			TOGGLE_BIT(PORTB_REG,copy_pinX);
    139a:	a8 e3       	ldi	r26, 0x38	; 56
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e8 e3       	ldi	r30, 0x38	; 56
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_vidSTOGGPORTVAL+0x96>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_vidSTOGGPORTVAL+0x92>
    13bc:	84 27       	eor	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	27 c0       	rjmp	.+78     	; 0x1410 <DIO_vidSTOGGPORTVAL+0xee>
			break;

		case u8PORTC:
			TOGGLE_BIT(PORTC_REG,copy_pinX);
    13c2:	a5 e3       	ldi	r26, 0x35	; 53
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e3       	ldi	r30, 0x35	; 53
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_vidSTOGGPORTVAL+0xbe>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_vidSTOGGPORTVAL+0xba>
    13e4:	84 27       	eor	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	13 c0       	rjmp	.+38     	; 0x1410 <DIO_vidSTOGGPORTVAL+0xee>
			break;

		case u8PORTD:
			TOGGLE_BIT(PORTD_REG,copy_pinX);
    13ea:	a2 e3       	ldi	r26, 0x32	; 50
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e2 e3       	ldi	r30, 0x32	; 50
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_vidSTOGGPORTVAL+0xe6>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_vidSTOGGPORTVAL+0xe2>
    140c:	84 27       	eor	r24, r20
    140e:	8c 93       	st	X, r24
			break;
		}
	}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <LCD_vidWriteData>:
#include "LCD_int.h"



void LCD_vidWriteData(u8 Copy_Data)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	2f 97       	sbiw	r28, 0x0f	; 15
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_vidSETPINval(u8PORTA,DIO_u8PIN_0,DIO_u8HIGH);
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
	DIO_vidSETPINval(u8PORTA,DIO_u8PIN_1,DIO_u8LOW);
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	41 e0       	ldi	r20, 0x01	; 1
    1444:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
	DIO_vidSETPORTVAL(u8PORTB,Copy_Data);
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	6f 85       	ldd	r22, Y+15	; 0x0f
    144c:	0e 94 49 09 	call	0x1292	; 0x1292 <DIO_vidSETPORTVAL>
	DIO_vidSETPINval(u8PORTA,DIO_u8PIN_2,DIO_u8HIGH);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	62 e0       	ldi	r22, 0x02	; 2
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
    145a:	88 e5       	ldi	r24, 0x58	; 88
    145c:	99 e3       	ldi	r25, 0x39	; 57
    145e:	a4 ec       	ldi	r26, 0xC4	; 196
    1460:	bf e3       	ldi	r27, 0x3F	; 63
    1462:	8b 87       	std	Y+11, r24	; 0x0b
    1464:	9c 87       	std	Y+12, r25	; 0x0c
    1466:	ad 87       	std	Y+13, r26	; 0x0d
    1468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146a:	6b 85       	ldd	r22, Y+11	; 0x0b
    146c:	7c 85       	ldd	r23, Y+12	; 0x0c
    146e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1470:	9e 85       	ldd	r25, Y+14	; 0x0e
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a ef       	ldi	r20, 0xFA	; 250
    1478:	54 e4       	ldi	r21, 0x44	; 68
    147a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	8f 83       	std	Y+7, r24	; 0x07
    1484:	98 87       	std	Y+8, r25	; 0x08
    1486:	a9 87       	std	Y+9, r26	; 0x09
    1488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    149e:	88 23       	and	r24, r24
    14a0:	2c f4       	brge	.+10     	; 0x14ac <LCD_vidWriteData+0x8e>
		__ticks = 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	3f c0       	rjmp	.+126    	; 0x152a <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    14ac:	6f 81       	ldd	r22, Y+7	; 0x07
    14ae:	78 85       	ldd	r23, Y+8	; 0x08
    14b0:	89 85       	ldd	r24, Y+9	; 0x09
    14b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f e7       	ldi	r20, 0x7F	; 127
    14ba:	57 e4       	ldi	r21, 0x47	; 71
    14bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c0:	18 16       	cp	r1, r24
    14c2:	4c f5       	brge	.+82     	; 0x1516 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e2       	ldi	r20, 0x20	; 32
    14d2:	51 e4       	ldi	r21, 0x41	; 65
    14d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <LCD_vidWriteData+0xee>
    14ee:	88 ec       	ldi	r24, 0xC8	; 200
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9c 83       	std	Y+4, r25	; 0x04
    14f4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <LCD_vidWriteData+0xdc>
    14fe:	9c 83       	std	Y+4, r25	; 0x04
    1500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	9e 83       	std	Y+6, r25	; 0x06
    150a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	69 f7       	brne	.-38     	; 0x14ee <LCD_vidWriteData+0xd0>
    1514:	14 c0       	rjmp	.+40     	; 0x153e <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1516:	6f 81       	ldd	r22, Y+7	; 0x07
    1518:	78 85       	ldd	r23, Y+8	; 0x08
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	9a 85       	ldd	r25, Y+10	; 0x0a
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9e 83       	std	Y+6, r25	; 0x06
    1528:	8d 83       	std	Y+5, r24	; 0x05
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <LCD_vidWriteData+0x118>
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.533);

	DIO_vidSETPINval(u8PORTA,DIO_u8PIN_2,DIO_u8LOW);
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
}
    1548:	2f 96       	adiw	r28, 0x0f	; 15
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <LCD_vidSendCommand>:

void LCD_vidSendCommand(u8 Copy_Comand)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	2f 97       	sbiw	r28, 0x0f	; 15
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_vidSETPINval(u8PORTA,DIO_u8PIN_0,DIO_u8LOW);
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
	DIO_vidSETPINval(u8PORTA,DIO_u8PIN_1,DIO_u8LOW);
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	61 e0       	ldi	r22, 0x01	; 1
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
	DIO_vidSETPORTVAL(u8PORTB, Copy_Comand);
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	6f 85       	ldd	r22, Y+15	; 0x0f
    1588:	0e 94 49 09 	call	0x1292	; 0x1292 <DIO_vidSETPORTVAL>
	DIO_vidSETPINval(u8PORTA,DIO_u8PIN_2,DIO_u8HIGH);
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	62 e0       	ldi	r22, 0x02	; 2
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
    1596:	88 e5       	ldi	r24, 0x58	; 88
    1598:	99 e3       	ldi	r25, 0x39	; 57
    159a:	a4 ec       	ldi	r26, 0xC4	; 196
    159c:	bf e3       	ldi	r27, 0x3F	; 63
    159e:	8b 87       	std	Y+11, r24	; 0x0b
    15a0:	9c 87       	std	Y+12, r25	; 0x0c
    15a2:	ad 87       	std	Y+13, r26	; 0x0d
    15a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a ef       	ldi	r20, 0xFA	; 250
    15b4:	54 e4       	ldi	r21, 0x44	; 68
    15b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8f 83       	std	Y+7, r24	; 0x07
    15c0:	98 87       	std	Y+8, r25	; 0x08
    15c2:	a9 87       	std	Y+9, r26	; 0x09
    15c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15da:	88 23       	and	r24, r24
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <LCD_vidSendCommand+0x8e>
		__ticks = 1;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9e 83       	std	Y+6, r25	; 0x06
    15e4:	8d 83       	std	Y+5, r24	; 0x05
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <LCD_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    15e8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ea:	78 85       	ldd	r23, Y+8	; 0x08
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	3f ef       	ldi	r19, 0xFF	; 255
    15f4:	4f e7       	ldi	r20, 0x7F	; 127
    15f6:	57 e4       	ldi	r21, 0x47	; 71
    15f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	4c f5       	brge	.+82     	; 0x1652 <LCD_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	6b 85       	ldd	r22, Y+11	; 0x0b
    1602:	7c 85       	ldd	r23, Y+12	; 0x0c
    1604:	8d 85       	ldd	r24, Y+13	; 0x0d
    1606:	9e 85       	ldd	r25, Y+14	; 0x0e
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	51 e4       	ldi	r21, 0x41	; 65
    1610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	0f c0       	rjmp	.+30     	; 0x1648 <LCD_vidSendCommand+0xee>
    162a:	88 ec       	ldi	r24, 0xC8	; 200
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9c 83       	std	Y+4, r25	; 0x04
    1630:	8b 83       	std	Y+3, r24	; 0x03
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <LCD_vidSendCommand+0xdc>
    163a:	9c 83       	std	Y+4, r25	; 0x04
    163c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	69 f7       	brne	.-38     	; 0x162a <LCD_vidSendCommand+0xd0>
    1650:	14 c0       	rjmp	.+40     	; 0x167a <LCD_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <LCD_vidSendCommand+0x118>
    1676:	9a 83       	std	Y+2, r25	; 0x02
    1678:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.533);

	DIO_vidSETPINval(u8PORTA,DIO_u8PIN_2,DIO_u8LOW);
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	62 e0       	ldi	r22, 0x02	; 2
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
}
    1684:	2f 96       	adiw	r28, 0x0f	; 15
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <LCD_vidWriteString>:



void LCD_vidWriteString(u8 *Copy_String)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <LCD_vidWriteString+0x6>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9b 83       	std	Y+3, r25	; 0x03
    16a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator ;
	for(iterator =0 ; Copy_String[iterator]!= 0 ;iterator ++ )
    16a6:	19 82       	std	Y+1, r1	; 0x01
    16a8:	0e c0       	rjmp	.+28     	; 0x16c6 <LCD_vidWriteString+0x30>
	{
		LCD_vidWriteData(Copy_String[iterator]);
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	9b 81       	ldd	r25, Y+3	; 0x03
    16b4:	fc 01       	movw	r30, r24
    16b6:	e2 0f       	add	r30, r18
    16b8:	f3 1f       	adc	r31, r19
    16ba:	80 81       	ld	r24, Z
    16bc:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>


void LCD_vidWriteString(u8 *Copy_String)
{
	u8 iterator ;
	for(iterator =0 ; Copy_String[iterator]!= 0 ;iterator ++ )
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	9b 81       	ldd	r25, Y+3	; 0x03
    16d0:	fc 01       	movw	r30, r24
    16d2:	e2 0f       	add	r30, r18
    16d4:	f3 1f       	adc	r31, r19
    16d6:	80 81       	ld	r24, Z
    16d8:	88 23       	and	r24, r24
    16da:	39 f7       	brne	.-50     	; 0x16aa <LCD_vidWriteString+0x14>
	{
		LCD_vidWriteData(Copy_String[iterator]);
	}
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <LCD_vidInt>:

void LCD_vidInt()
{
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	cc 54       	subi	r28, 0x4C	; 76
    16f6:	d0 40       	sbci	r29, 0x00	; 0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
	DIO_vidSetPinDirection(u8PORTA,DIO_u8PIN_0,DIO_u8OUTPUT);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(u8PORTA,DIO_u8PIN_1,DIO_u8OUTPUT);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(u8PORTA,DIO_u8PIN_2,DIO_u8OUTPUT);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_vidSetPinDirection>
	DIO_vidSETPORTDIRECION(u8PORTB,DIO_u8OUTPUT);
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_vidSETPORTDIRECION>
    1728:	fe 01       	movw	r30, r28
    172a:	e7 5b       	subi	r30, 0xB7	; 183
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a0 ef       	ldi	r26, 0xF0	; 240
    1734:	b1 e4       	ldi	r27, 0x41	; 65
    1736:	80 83       	st	Z, r24
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	a2 83       	std	Z+2, r26	; 0x02
    173c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	8e 01       	movw	r16, r28
    1740:	0b 5b       	subi	r16, 0xBB	; 187
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	fe 01       	movw	r30, r28
    1746:	e7 5b       	subi	r30, 0xB7	; 183
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4a ef       	ldi	r20, 0xFA	; 250
    1758:	54 e4       	ldi	r21, 0x44	; 68
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	f8 01       	movw	r30, r16
    1764:	80 83       	st	Z, r24
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    176c:	fe 01       	movw	r30, r28
    176e:	eb 5b       	subi	r30, 0xBB	; 187
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1786:	88 23       	and	r24, r24
    1788:	44 f4       	brge	.+16     	; 0x179a <LCD_vidInt+0xb2>
		__ticks = 1;
    178a:	fe 01       	movw	r30, r28
    178c:	ed 5b       	subi	r30, 0xBD	; 189
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
    1798:	64 c0       	rjmp	.+200    	; 0x1862 <LCD_vidInt+0x17a>
	else if (__tmp > 65535)
    179a:	fe 01       	movw	r30, r28
    179c:	eb 5b       	subi	r30, 0xBB	; 187
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	57 e4       	ldi	r21, 0x47	; 71
    17b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17b4:	18 16       	cp	r1, r24
    17b6:	0c f0       	brlt	.+2      	; 0x17ba <LCD_vidInt+0xd2>
    17b8:	43 c0       	rjmp	.+134    	; 0x1840 <LCD_vidInt+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ba:	fe 01       	movw	r30, r28
    17bc:	e7 5b       	subi	r30, 0xB7	; 183
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	8e 01       	movw	r16, r28
    17da:	0d 5b       	subi	r16, 0xBD	; 189
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    17f0:	1f c0       	rjmp	.+62     	; 0x1830 <LCD_vidInt+0x148>
    17f2:	fe 01       	movw	r30, r28
    17f4:	ef 5b       	subi	r30, 0xBF	; 191
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
    1800:	fe 01       	movw	r30, r28
    1802:	ef 5b       	subi	r30, 0xBF	; 191
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <LCD_vidInt+0x122>
    180e:	fe 01       	movw	r30, r28
    1810:	ef 5b       	subi	r30, 0xBF	; 191
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	91 83       	std	Z+1, r25	; 0x01
    1816:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	de 01       	movw	r26, r28
    181a:	ad 5b       	subi	r26, 0xBD	; 189
    181c:	bf 4f       	sbci	r27, 0xFF	; 255
    181e:	fe 01       	movw	r30, r28
    1820:	ed 5b       	subi	r30, 0xBD	; 189
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	11 96       	adiw	r26, 0x01	; 1
    182c:	9c 93       	st	X, r25
    182e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	fe 01       	movw	r30, r28
    1832:	ed 5b       	subi	r30, 0xBD	; 189
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	d1 f6       	brne	.-76     	; 0x17f2 <LCD_vidInt+0x10a>
    183e:	24 c0       	rjmp	.+72     	; 0x1888 <LCD_vidInt+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	8e 01       	movw	r16, r28
    1842:	0d 5b       	subi	r16, 0xBD	; 189
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	fe 01       	movw	r30, r28
    1848:	eb 5b       	subi	r30, 0xBB	; 187
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	f8 01       	movw	r30, r16
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
    1862:	fe 01       	movw	r30, r28
    1864:	ed 5b       	subi	r30, 0xBD	; 189
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	fe 01       	movw	r30, r28
    186e:	ff 96       	adiw	r30, 0x3f	; 63
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
    1874:	fe 01       	movw	r30, r28
    1876:	ff 96       	adiw	r30, 0x3f	; 63
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_vidInt+0x194>
    1880:	fe 01       	movw	r30, r28
    1882:	ff 96       	adiw	r30, 0x3f	; 63
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
	_delay_ms(30);
	LCD_vidSendCommand(0b00111000);//step2
    1888:	88 e3       	ldi	r24, 0x38	; 56
    188a:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	ac e1       	ldi	r26, 0x1C	; 28
    1894:	b2 e4       	ldi	r27, 0x42	; 66
    1896:	8b af       	std	Y+59, r24	; 0x3b
    1898:	9c af       	std	Y+60, r25	; 0x3c
    189a:	ad af       	std	Y+61, r26	; 0x3d
    189c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    189e:	6b ad       	ldd	r22, Y+59	; 0x3b
    18a0:	7c ad       	ldd	r23, Y+60	; 0x3c
    18a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a6:	2b ea       	ldi	r18, 0xAB	; 171
    18a8:	3a ea       	ldi	r19, 0xAA	; 170
    18aa:	4a e2       	ldi	r20, 0x2A	; 42
    18ac:	50 e4       	ldi	r21, 0x40	; 64
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8f ab       	std	Y+55, r24	; 0x37
    18b8:	98 af       	std	Y+56, r25	; 0x38
    18ba:	a9 af       	std	Y+57, r26	; 0x39
    18bc:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    18be:	6f a9       	ldd	r22, Y+55	; 0x37
    18c0:	78 ad       	ldd	r23, Y+56	; 0x38
    18c2:	89 ad       	ldd	r24, Y+57	; 0x39
    18c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	1c f4       	brge	.+6      	; 0x18dc <LCD_vidInt+0x1f4>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	8e ab       	std	Y+54, r24	; 0x36
    18da:	91 c0       	rjmp	.+290    	; 0x19fe <LCD_vidInt+0x316>
	else if (__tmp > 255)
    18dc:	6f a9       	ldd	r22, Y+55	; 0x37
    18de:	78 ad       	ldd	r23, Y+56	; 0x38
    18e0:	89 ad       	ldd	r24, Y+57	; 0x39
    18e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	53 e4       	ldi	r21, 0x43	; 67
    18ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	0c f0       	brlt	.+2      	; 0x18f6 <LCD_vidInt+0x20e>
    18f4:	7b c0       	rjmp	.+246    	; 0x19ec <LCD_vidInt+0x304>
	{
		_delay_ms(__us / 1000.0);
    18f6:	6b ad       	ldd	r22, Y+59	; 0x3b
    18f8:	7c ad       	ldd	r23, Y+60	; 0x3c
    18fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    18fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a e7       	ldi	r20, 0x7A	; 122
    1904:	54 e4       	ldi	r21, 0x44	; 68
    1906:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	8a ab       	std	Y+50, r24	; 0x32
    1910:	9b ab       	std	Y+51, r25	; 0x33
    1912:	ac ab       	std	Y+52, r26	; 0x34
    1914:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	6a a9       	ldd	r22, Y+50	; 0x32
    1918:	7b a9       	ldd	r23, Y+51	; 0x33
    191a:	8c a9       	ldd	r24, Y+52	; 0x34
    191c:	9d a9       	ldd	r25, Y+53	; 0x35
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a ef       	ldi	r20, 0xFA	; 250
    1924:	54 e4       	ldi	r21, 0x44	; 68
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	8e a7       	std	Y+46, r24	; 0x2e
    1930:	9f a7       	std	Y+47, r25	; 0x2f
    1932:	a8 ab       	std	Y+48, r26	; 0x30
    1934:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1936:	6e a5       	ldd	r22, Y+46	; 0x2e
    1938:	7f a5       	ldd	r23, Y+47	; 0x2f
    193a:	88 a9       	ldd	r24, Y+48	; 0x30
    193c:	99 a9       	ldd	r25, Y+49	; 0x31
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	2c f4       	brge	.+10     	; 0x1958 <LCD_vidInt+0x270>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9d a7       	std	Y+45, r25	; 0x2d
    1954:	8c a7       	std	Y+44, r24	; 0x2c
    1956:	3f c0       	rjmp	.+126    	; 0x19d6 <LCD_vidInt+0x2ee>
	else if (__tmp > 65535)
    1958:	6e a5       	ldd	r22, Y+46	; 0x2e
    195a:	7f a5       	ldd	r23, Y+47	; 0x2f
    195c:	88 a9       	ldd	r24, Y+48	; 0x30
    195e:	99 a9       	ldd	r25, Y+49	; 0x31
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	4f e7       	ldi	r20, 0x7F	; 127
    1966:	57 e4       	ldi	r21, 0x47	; 71
    1968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    196c:	18 16       	cp	r1, r24
    196e:	4c f5       	brge	.+82     	; 0x19c2 <LCD_vidInt+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1970:	6a a9       	ldd	r22, Y+50	; 0x32
    1972:	7b a9       	ldd	r23, Y+51	; 0x33
    1974:	8c a9       	ldd	r24, Y+52	; 0x34
    1976:	9d a9       	ldd	r25, Y+53	; 0x35
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9d a7       	std	Y+45, r25	; 0x2d
    1996:	8c a7       	std	Y+44, r24	; 0x2c
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <LCD_vidInt+0x2d0>
    199a:	88 ec       	ldi	r24, 0xC8	; 200
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9b a7       	std	Y+43, r25	; 0x2b
    19a0:	8a a7       	std	Y+42, r24	; 0x2a
    19a2:	8a a5       	ldd	r24, Y+42	; 0x2a
    19a4:	9b a5       	ldd	r25, Y+43	; 0x2b
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_vidInt+0x2be>
    19aa:	9b a7       	std	Y+43, r25	; 0x2b
    19ac:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    19b0:	9d a5       	ldd	r25, Y+45	; 0x2d
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	9d a7       	std	Y+45, r25	; 0x2d
    19b6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    19ba:	9d a5       	ldd	r25, Y+45	; 0x2d
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f7       	brne	.-38     	; 0x199a <LCD_vidInt+0x2b2>
    19c0:	24 c0       	rjmp	.+72     	; 0x1a0a <LCD_vidInt+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	6e a5       	ldd	r22, Y+46	; 0x2e
    19c4:	7f a5       	ldd	r23, Y+47	; 0x2f
    19c6:	88 a9       	ldd	r24, Y+48	; 0x30
    19c8:	99 a9       	ldd	r25, Y+49	; 0x31
    19ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9d a7       	std	Y+45, r25	; 0x2d
    19d4:	8c a7       	std	Y+44, r24	; 0x2c
    19d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    19d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    19da:	99 a7       	std	Y+41, r25	; 0x29
    19dc:	88 a7       	std	Y+40, r24	; 0x28
    19de:	88 a5       	ldd	r24, Y+40	; 0x28
    19e0:	99 a5       	ldd	r25, Y+41	; 0x29
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_vidInt+0x2fa>
    19e6:	99 a7       	std	Y+41, r25	; 0x29
    19e8:	88 a7       	std	Y+40, r24	; 0x28
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <LCD_vidInt+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19ec:	6f a9       	ldd	r22, Y+55	; 0x37
    19ee:	78 ad       	ldd	r23, Y+56	; 0x38
    19f0:	89 ad       	ldd	r24, Y+57	; 0x39
    19f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	8e ab       	std	Y+54, r24	; 0x36
    19fe:	8e a9       	ldd	r24, Y+54	; 0x36
    1a00:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a02:	8f a1       	ldd	r24, Y+39	; 0x27
    1a04:	8a 95       	dec	r24
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <LCD_vidInt+0x31c>
    1a08:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(39); // microseconds
	LCD_vidSendCommand(0b00001111);//step4
    1a0a:	8f e0       	ldi	r24, 0x0F	; 15
    1a0c:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	ac e1       	ldi	r26, 0x1C	; 28
    1a16:	b2 e4       	ldi	r27, 0x42	; 66
    1a18:	8b a3       	std	Y+35, r24	; 0x23
    1a1a:	9c a3       	std	Y+36, r25	; 0x24
    1a1c:	ad a3       	std	Y+37, r26	; 0x25
    1a1e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a20:	6b a1       	ldd	r22, Y+35	; 0x23
    1a22:	7c a1       	ldd	r23, Y+36	; 0x24
    1a24:	8d a1       	ldd	r24, Y+37	; 0x25
    1a26:	9e a1       	ldd	r25, Y+38	; 0x26
    1a28:	2b ea       	ldi	r18, 0xAB	; 171
    1a2a:	3a ea       	ldi	r19, 0xAA	; 170
    1a2c:	4a e2       	ldi	r20, 0x2A	; 42
    1a2e:	50 e4       	ldi	r21, 0x40	; 64
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8f 8f       	std	Y+31, r24	; 0x1f
    1a3a:	98 a3       	std	Y+32, r25	; 0x20
    1a3c:	a9 a3       	std	Y+33, r26	; 0x21
    1a3e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a40:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a42:	78 a1       	ldd	r23, Y+32	; 0x20
    1a44:	89 a1       	ldd	r24, Y+33	; 0x21
    1a46:	9a a1       	ldd	r25, Y+34	; 0x22
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	1c f4       	brge	.+6      	; 0x1a5e <LCD_vidInt+0x376>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a5c:	91 c0       	rjmp	.+290    	; 0x1b80 <LCD_vidInt+0x498>
	else if (__tmp > 255)
    1a5e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a60:	78 a1       	ldd	r23, Y+32	; 0x20
    1a62:	89 a1       	ldd	r24, Y+33	; 0x21
    1a64:	9a a1       	ldd	r25, Y+34	; 0x22
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	53 e4       	ldi	r21, 0x43	; 67
    1a6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	0c f0       	brlt	.+2      	; 0x1a78 <LCD_vidInt+0x390>
    1a76:	7b c0       	rjmp	.+246    	; 0x1b6e <LCD_vidInt+0x486>
	{
		_delay_ms(__us / 1000.0);
    1a78:	6b a1       	ldd	r22, Y+35	; 0x23
    1a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	4a e7       	ldi	r20, 0x7A	; 122
    1a86:	54 e4       	ldi	r21, 0x44	; 68
    1a88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	8a 8f       	std	Y+26, r24	; 0x1a
    1a92:	9b 8f       	std	Y+27, r25	; 0x1b
    1a94:	ac 8f       	std	Y+28, r26	; 0x1c
    1a96:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a98:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a9a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a ef       	ldi	r20, 0xFA	; 250
    1aa6:	54 e4       	ldi	r21, 0x44	; 68
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	8e 8b       	std	Y+22, r24	; 0x16
    1ab2:	9f 8b       	std	Y+23, r25	; 0x17
    1ab4:	a8 8f       	std	Y+24, r26	; 0x18
    1ab6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ab8:	6e 89       	ldd	r22, Y+22	; 0x16
    1aba:	7f 89       	ldd	r23, Y+23	; 0x17
    1abc:	88 8d       	ldd	r24, Y+24	; 0x18
    1abe:	99 8d       	ldd	r25, Y+25	; 0x19
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e8       	ldi	r20, 0x80	; 128
    1ac6:	5f e3       	ldi	r21, 0x3F	; 63
    1ac8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	2c f4       	brge	.+10     	; 0x1ada <LCD_vidInt+0x3f2>
		__ticks = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9d 8b       	std	Y+21, r25	; 0x15
    1ad6:	8c 8b       	std	Y+20, r24	; 0x14
    1ad8:	3f c0       	rjmp	.+126    	; 0x1b58 <LCD_vidInt+0x470>
	else if (__tmp > 65535)
    1ada:	6e 89       	ldd	r22, Y+22	; 0x16
    1adc:	7f 89       	ldd	r23, Y+23	; 0x17
    1ade:	88 8d       	ldd	r24, Y+24	; 0x18
    1ae0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	4f e7       	ldi	r20, 0x7F	; 127
    1ae8:	57 e4       	ldi	r21, 0x47	; 71
    1aea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aee:	18 16       	cp	r1, r24
    1af0:	4c f5       	brge	.+82     	; 0x1b44 <LCD_vidInt+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1af4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1af6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1af8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9d 8b       	std	Y+21, r25	; 0x15
    1b18:	8c 8b       	std	Y+20, r24	; 0x14
    1b1a:	0f c0       	rjmp	.+30     	; 0x1b3a <LCD_vidInt+0x452>
    1b1c:	88 ec       	ldi	r24, 0xC8	; 200
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9b 8b       	std	Y+19, r25	; 0x13
    1b22:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b24:	8a 89       	ldd	r24, Y+18	; 0x12
    1b26:	9b 89       	ldd	r25, Y+19	; 0x13
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_vidInt+0x440>
    1b2c:	9b 8b       	std	Y+19, r25	; 0x13
    1b2e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b30:	8c 89       	ldd	r24, Y+20	; 0x14
    1b32:	9d 89       	ldd	r25, Y+21	; 0x15
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	9d 8b       	std	Y+21, r25	; 0x15
    1b38:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3a:	8c 89       	ldd	r24, Y+20	; 0x14
    1b3c:	9d 89       	ldd	r25, Y+21	; 0x15
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	69 f7       	brne	.-38     	; 0x1b1c <LCD_vidInt+0x434>
    1b42:	24 c0       	rjmp	.+72     	; 0x1b8c <LCD_vidInt+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b44:	6e 89       	ldd	r22, Y+22	; 0x16
    1b46:	7f 89       	ldd	r23, Y+23	; 0x17
    1b48:	88 8d       	ldd	r24, Y+24	; 0x18
    1b4a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9d 8b       	std	Y+21, r25	; 0x15
    1b56:	8c 8b       	std	Y+20, r24	; 0x14
    1b58:	8c 89       	ldd	r24, Y+20	; 0x14
    1b5a:	9d 89       	ldd	r25, Y+21	; 0x15
    1b5c:	99 8b       	std	Y+17, r25	; 0x11
    1b5e:	88 8b       	std	Y+16, r24	; 0x10
    1b60:	88 89       	ldd	r24, Y+16	; 0x10
    1b62:	99 89       	ldd	r25, Y+17	; 0x11
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LCD_vidInt+0x47c>
    1b68:	99 8b       	std	Y+17, r25	; 0x11
    1b6a:	88 8b       	std	Y+16, r24	; 0x10
    1b6c:	0f c0       	rjmp	.+30     	; 0x1b8c <LCD_vidInt+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b6e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b70:	78 a1       	ldd	r23, Y+32	; 0x20
    1b72:	89 a1       	ldd	r24, Y+33	; 0x21
    1b74:	9a a1       	ldd	r25, Y+34	; 0x22
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b82:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b86:	8a 95       	dec	r24
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_vidInt+0x49e>
    1b8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(39); // microseconds
	LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
    1b92:	8a e0       	ldi	r24, 0x0A	; 10
    1b94:	97 ed       	ldi	r25, 0xD7	; 215
    1b96:	a3 ec       	ldi	r26, 0xC3	; 195
    1b98:	bf e3       	ldi	r27, 0x3F	; 63
    1b9a:	8b 87       	std	Y+11, r24	; 0x0b
    1b9c:	9c 87       	std	Y+12, r25	; 0x0c
    1b9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ba0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	4a ef       	ldi	r20, 0xFA	; 250
    1bb0:	54 e4       	ldi	r21, 0x44	; 68
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8f 83       	std	Y+7, r24	; 0x07
    1bbc:	98 87       	std	Y+8, r25	; 0x08
    1bbe:	a9 87       	std	Y+9, r26	; 0x09
    1bc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc4:	78 85       	ldd	r23, Y+8	; 0x08
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e8       	ldi	r20, 0x80	; 128
    1bd0:	5f e3       	ldi	r21, 0x3F	; 63
    1bd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <LCD_vidInt+0x4fc>
		__ticks = 1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
    1be2:	3f c0       	rjmp	.+126    	; 0x1c62 <LCD_vidInt+0x57a>
	else if (__tmp > 65535)
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	3f ef       	ldi	r19, 0xFF	; 255
    1bf0:	4f e7       	ldi	r20, 0x7F	; 127
    1bf2:	57 e4       	ldi	r21, 0x47	; 71
    1bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf8:	18 16       	cp	r1, r24
    1bfa:	4c f5       	brge	.+82     	; 0x1c4e <LCD_vidInt+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e2       	ldi	r20, 0x20	; 32
    1c0a:	51 e4       	ldi	r21, 0x41	; 65
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	bc 01       	movw	r22, r24
    1c16:	cd 01       	movw	r24, r26
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <LCD_vidInt+0x55c>
    1c26:	88 ec       	ldi	r24, 0xC8	; 200
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9c 83       	std	Y+4, r25	; 0x04
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <LCD_vidInt+0x54a>
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	9e 83       	std	Y+6, r25	; 0x06
    1c42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	9e 81       	ldd	r25, Y+6	; 0x06
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	69 f7       	brne	.-38     	; 0x1c26 <LCD_vidInt+0x53e>
    1c4c:	14 c0       	rjmp	.+40     	; 0x1c76 <LCD_vidInt+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c50:	78 85       	ldd	r23, Y+8	; 0x08
    1c52:	89 85       	ldd	r24, Y+9	; 0x09
    1c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <LCD_vidInt+0x586>
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.53);
	LCD_vidSendCommand(0b00000110);
    1c76:	86 e0       	ldi	r24, 0x06	; 6
    1c78:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>

}
    1c7c:	c4 5b       	subi	r28, 0xB4	; 180
    1c7e:	df 4f       	sbci	r29, 0xFF	; 255
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <LCD_vidGoTo>:
void LCD_vidGoTo(u8 Copy_Row, u8 Copy_Column)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <LCD_vidGoTo+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <LCD_vidGoTo+0x8>
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	6a 83       	std	Y+2, r22	; 0x02
	 if((Copy_Column >= 0) && (Copy_Column <= 15))
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	80 31       	cpi	r24, 0x10	; 16
    1ca8:	c0 f4       	brcc	.+48     	; 0x1cda <LCD_vidGoTo+0x46>
	   {
	         switch(Copy_Row)
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3c 83       	std	Y+4, r19	; 0x04
    1cb2:	2b 83       	std	Y+3, r18	; 0x03
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	31 f0       	breq	.+12     	; 0x1cc8 <LCD_vidGoTo+0x34>
    1cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc0:	21 30       	cpi	r18, 0x01	; 1
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	31 f0       	breq	.+12     	; 0x1cd2 <LCD_vidGoTo+0x3e>
    1cc6:	09 c0       	rjmp	.+18     	; 0x1cda <LCD_vidGoTo+0x46>
	         {
	           case 0:
	        	   LCD_vidSendCommand((0b10000000)+(Copy_Column));           //sets cursor to row 0 and Copy_coloumn
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	80 58       	subi	r24, 0x80	; 128
    1ccc:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
    1cd0:	04 c0       	rjmp	.+8      	; 0x1cda <LCD_vidGoTo+0x46>
	          	 break;
	           case 1:
	        	   LCD_vidSendCommand((0b11000000)+(Copy_Column));            //sets cursor to row 0 and Copy_coloumn
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	80 54       	subi	r24, 0x40	; 64
    1cd6:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
	          	 break;
	           default:
	        	   break;
	         }
	   }
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <PWM_vidInit>:
#include "../LIB/MATH_H.h"
#include "../LIB/ATMEGA32_REGISTER.h"
#include "PWM_int.h"

void PWM_vidInit(u8 Copy_TimerNo)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <PWM_vidInit+0x6>
    1cee:	0f 92       	push	r0
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_TimerNo)
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	3b 83       	std	Y+3, r19	; 0x03
    1cfe:	2a 83       	std	Y+2, r18	; 0x02
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	31 f0       	breq	.+12     	; 0x1d14 <PWM_vidInit+0x2c>
    1d08:	2a 81       	ldd	r18, Y+2	; 0x02
    1d0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d0c:	21 30       	cpi	r18, 0x01	; 1
    1d0e:	31 05       	cpc	r19, r1
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <PWM_vidInit+0x42>
    1d12:	39 c0       	rjmp	.+114    	; 0x1d86 <PWM_vidInit+0x9e>
	{
	case TIMER_0 :
		TCCR0_REG.BITS.BIT_3 = 1;
    1d14:	e3 e5       	ldi	r30, 0x53	; 83
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	88 60       	ori	r24, 0x08	; 8
    1d1c:	80 83       	st	Z, r24
		TCCR0_REG.BITS.BIT_6 = 1;
    1d1e:	e3 e5       	ldi	r30, 0x53	; 83
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	80 64       	ori	r24, 0x40	; 64
    1d26:	80 83       	st	Z, r24
    1d28:	2e c0       	rjmp	.+92     	; 0x1d86 <PWM_vidInit+0x9e>
		break;
	case TIMER_1 :
		/*set compare output mode , fast PWM to  Clear OC1A/OC1B on compare match, set
		OC1A/OC1B at BOTTOM */
		TCCR1A_REG.BITS.BIT_7 = 1 ;  //set OCr1a
    1d2a:	ef e4       	ldi	r30, 0x4F	; 79
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 68       	ori	r24, 0x80	; 128
    1d32:	80 83       	st	Z, r24
		TCCR1A_REG.BITS.BIT_6 = 0  ;
    1d34:	ef e4       	ldi	r30, 0x4F	; 79
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 7b       	andi	r24, 0xBF	; 191
    1d3c:	80 83       	st	Z, r24

		TCCR1A_REG.BITS.BIT_5= 0  ;
    1d3e:	ef e4       	ldi	r30, 0x4F	; 79
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 7d       	andi	r24, 0xDF	; 223
    1d46:	80 83       	st	Z, r24
		TCCR1A_REG.BITS.BIT_4= 0  ;
    1d48:	ef e4       	ldi	r30, 0x4F	; 79
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8f 7e       	andi	r24, 0xEF	; 239
    1d50:	80 83       	st	Z, r24
		/* wave generation mode FAST PWM (MODE 14) */
		TCCR1A_REG.BITS.BIT_0= 0  ; //wgm10
    1d52:	ef e4       	ldi	r30, 0x4F	; 79
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8e 7f       	andi	r24, 0xFE	; 254
    1d5a:	80 83       	st	Z, r24
		TCCR1A_REG.BITS.BIT_1= 1 ;//WGM11
    1d5c:	ef e4       	ldi	r30, 0x4F	; 79
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	82 60       	ori	r24, 0x02	; 2
    1d64:	80 83       	st	Z, r24

		TCCR1B_REG.BITS.BIT_3= 1 ; //wgm12
    1d66:	ee e4       	ldi	r30, 0x4E	; 78
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	88 60       	ori	r24, 0x08	; 8
    1d6e:	80 83       	st	Z, r24
		TCCR1B_REG.BITS.BIT_4= 1 ;//wgm13
    1d70:	ee e4       	ldi	r30, 0x4E	; 78
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	80 61       	ori	r24, 0x10	; 16
    1d78:	80 83       	st	Z, r24

		/*The Input Capture is updated with the counter (TCNT1) value each time an event occurs on the
		ICP1 pin (or optionally on the analog comparator output for Timer/Counter1 which is this case).*/
		ICR1_REG = PWM_ICR1_VALUE ;
    1d7a:	e6 e4       	ldi	r30, 0x46	; 70
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	84 ec       	ldi	r24, 0xC4	; 196
    1d80:	99 e0       	ldi	r25, 0x09	; 9
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	80 83       	st	Z, r24

		break;


	}
}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <PWM_vidSetPwmDutyCycle>:

void PWM_vidSetPwmDutyCycle(u8 Copy_TimerNo , f32 Copy_DC )
{
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	27 97       	sbiw	r28, 0x07	; 7
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	4a 83       	std	Y+2, r20	; 0x02
    1dae:	5b 83       	std	Y+3, r21	; 0x03
    1db0:	6c 83       	std	Y+4, r22	; 0x04
    1db2:	7d 83       	std	Y+5, r23	; 0x05
	switch(Copy_TimerNo)
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	3f 83       	std	Y+7, r19	; 0x07
    1dbc:	2e 83       	std	Y+6, r18	; 0x06
    1dbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	31 f0       	breq	.+12     	; 0x1dd2 <PWM_vidSetPwmDutyCycle+0x40>
    1dc6:	ee 81       	ldd	r30, Y+6	; 0x06
    1dc8:	ff 81       	ldd	r31, Y+7	; 0x07
    1dca:	e1 30       	cpi	r30, 0x01	; 1
    1dcc:	f1 05       	cpc	r31, r1
    1dce:	11 f1       	breq	.+68     	; 0x1e14 <PWM_vidSetPwmDutyCycle+0x82>
    1dd0:	42 c0       	rjmp	.+132    	; 0x1e56 <PWM_vidSetPwmDutyCycle+0xc4>
	{
	case TIMER_0 :

		OCR0_REG.Whole_Register = (u8)(((f32)Copy_DC*((f32)256))/100);
    1dd2:	0c e5       	ldi	r16, 0x5C	; 92
    1dd4:	10 e0       	ldi	r17, 0x00	; 0
    1dd6:	6a 81       	ldd	r22, Y+2	; 0x02
    1dd8:	7b 81       	ldd	r23, Y+3	; 0x03
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e8       	ldi	r20, 0x80	; 128
    1de4:	53 e4       	ldi	r21, 0x43	; 67
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	48 ec       	ldi	r20, 0xC8	; 200
    1df8:	52 e4       	ldi	r21, 0x42	; 66
    1dfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	f8 01       	movw	r30, r16
    1e10:	80 83       	st	Z, r24
    1e12:	21 c0       	rjmp	.+66     	; 0x1e56 <PWM_vidSetPwmDutyCycle+0xc4>
		break;
	case TIMER_1 :
		/*The Output Compare Registers contain a 16-bit value that is continuously compared with the
		counter value (TCNT1). A match can be used to generate an output compare interrupt, or to
		generate a waveform output on the OC1x pin.*/
		OCR1A_REG = (u16)(((f32)Copy_DC*((f32)PWM_ICR1_VALUE))/100);
    1e14:	0a e4       	ldi	r16, 0x4A	; 74
    1e16:	10 e0       	ldi	r17, 0x00	; 0
    1e18:	6a 81       	ldd	r22, Y+2	; 0x02
    1e1a:	7b 81       	ldd	r23, Y+3	; 0x03
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e4       	ldi	r19, 0x40	; 64
    1e24:	4c e1       	ldi	r20, 0x1C	; 28
    1e26:	55 e4       	ldi	r21, 0x45	; 69
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	48 ec       	ldi	r20, 0xC8	; 200
    1e3a:	52 e4       	ldi	r21, 0x42	; 66
    1e3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	f8 01       	movw	r30, r16
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24

		break;

	}
}
    1e56:	27 96       	adiw	r28, 0x07	; 7
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <PWM_StopTimer>:

void PWM_StopTimer(u8 Copy_TimerNo )
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <PWM_StopTimer+0x6>
    1e72:	0f 92       	push	r0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_TimerNo)
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	3b 83       	std	Y+3, r19	; 0x03
    1e82:	2a 83       	std	Y+2, r18	; 0x02
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	31 f0       	breq	.+12     	; 0x1e98 <PWM_StopTimer+0x2c>
    1e8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e90:	21 30       	cpi	r18, 0x01	; 1
    1e92:	31 05       	cpc	r19, r1
    1e94:	49 f0       	breq	.+18     	; 0x1ea8 <PWM_StopTimer+0x3c>
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <PWM_StopTimer+0x4a>
	{
	case TIMER_0 :
		TCCR0_REG.Whole_Register  &= 0xf8 ;
    1e98:	a3 e5       	ldi	r26, 0x53	; 83
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e3 e5       	ldi	r30, 0x53	; 83
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	88 7f       	andi	r24, 0xF8	; 248
    1ea4:	8c 93       	st	X, r24
    1ea6:	07 c0       	rjmp	.+14     	; 0x1eb6 <PWM_StopTimer+0x4a>
		break;

	case TIMER_1 :
		/* sets the first three bits zero (no clock source /timer stopped ) )*/
		TCCR1A_REG.Whole_Register &= 0xf8 ;
    1ea8:	af e4       	ldi	r26, 0x4F	; 79
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ef e4       	ldi	r30, 0x4F	; 79
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 7f       	andi	r24, 0xF8	; 248
    1eb4:	8c 93       	st	X, r24
		break;
	}
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <PWM_StartTimer>:

void PWM_StartTimer(u8 Copy_TimerNo )
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <PWM_StartTimer+0x6>
    1ec8:	0f 92       	push	r0
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_TimerNo)
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	3b 83       	std	Y+3, r19	; 0x03
    1ed8:	2a 83       	std	Y+2, r18	; 0x02
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	31 f0       	breq	.+12     	; 0x1eee <PWM_StartTimer+0x2c>
    1ee2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee6:	21 30       	cpi	r18, 0x01	; 1
    1ee8:	31 05       	cpc	r19, r1
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <PWM_StartTimer+0x4a>
    1eec:	1d c0       	rjmp	.+58     	; 0x1f28 <PWM_StartTimer+0x66>
	{
	case TIMER_0 :
		TCCR0_REG.Whole_Register &= PWM_CS_CLEAR_MASK ;
    1eee:	a3 e5       	ldi	r26, 0x53	; 83
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e3 e5       	ldi	r30, 0x53	; 83
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 7f       	andi	r24, 0xF8	; 248
    1efa:	8c 93       	st	X, r24
		TCCR0_REG.Whole_Register |= PWM_CS0_MODE;
    1efc:	a3 e5       	ldi	r26, 0x53	; 83
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e3 e5       	ldi	r30, 0x53	; 83
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	84 60       	ori	r24, 0x04	; 4
    1f08:	8c 93       	st	X, r24
    1f0a:	0e c0       	rjmp	.+28     	; 0x1f28 <PWM_StartTimer+0x66>
		break;

	case TIMER_1 :
		/* clearing the register first four bits then seting only the first four bits based on the prescalar
		selected (clock select bit discription)*/
		TCCR1B_REG.Whole_Register &= PWM_CS_CLEAR_MASK ;
    1f0c:	ae e4       	ldi	r26, 0x4E	; 78
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	ee e4       	ldi	r30, 0x4E	; 78
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	88 7f       	andi	r24, 0xF8	; 248
    1f18:	8c 93       	st	X, r24
		TCCR1B_REG.Whole_Register |= PWM_CS1_MODE;
    1f1a:	ae e4       	ldi	r26, 0x4E	; 78
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	ee e4       	ldi	r30, 0x4E	; 78
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	83 60       	ori	r24, 0x03	; 3
    1f26:	8c 93       	st	X, r24
		break;
	}
}
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <UART_vidInit>:




void UART_vidInit(void)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
UCSRC_REG.BITS.BIT_7 = 1 ;
    1f3c:	e0 e4       	ldi	r30, 0x40	; 64
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	80 68       	ori	r24, 0x80	; 128
    1f44:	80 83       	st	Z, r24
UCSRC_REG.BITS.BIT_6 =  0 ; //parity disabled
    1f46:	e0 e4       	ldi	r30, 0x40	; 64
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8f 7b       	andi	r24, 0xBF	; 191
    1f4e:	80 83       	st	Z, r24

UCSRC_REG.BITS.BIT_3 =  0;
    1f50:	e0 e4       	ldi	r30, 0x40	; 64
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	87 7f       	andi	r24, 0xF7	; 247
    1f58:	80 83       	st	Z, r24
UCSRC_REG.BITS.BIT_1 =  1;
    1f5a:	e0 e4       	ldi	r30, 0x40	; 64
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	82 60       	ori	r24, 0x02	; 2
    1f62:	80 83       	st	Z, r24
UCSRC_REG.BITS.BIT_2 =  1;
    1f64:	e0 e4       	ldi	r30, 0x40	; 64
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	84 60       	ori	r24, 0x04	; 4
    1f6c:	80 83       	st	Z, r24


/*parity mode disabled*/
UCSRC_REG.BITS.BIT_4 =  0;
    1f6e:	e0 e4       	ldi	r30, 0x40	; 64
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	8f 7e       	andi	r24, 0xEF	; 239
    1f76:	80 83       	st	Z, r24
UCSRC_REG.BITS.BIT_5=   0;
    1f78:	e0 e4       	ldi	r30, 0x40	; 64
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	8f 7d       	andi	r24, 0xDF	; 223
    1f80:	80 83       	st	Z, r24
UCSRB_REG.BITS.BIT_2 =  0;
    1f82:	ea e2       	ldi	r30, 0x2A	; 42
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8b 7f       	andi	r24, 0xFB	; 251
    1f8a:	80 83       	st	Z, r24

/*rx & TX */
UCSRB_REG.BITS.BIT_3 =  1;
    1f8c:	ea e2       	ldi	r30, 0x2A	; 42
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	88 60       	ori	r24, 0x08	; 8
    1f94:	80 83       	st	Z, r24
UCSRB_REG.BITS.BIT_4 =  1;
    1f96:	ea e2       	ldi	r30, 0x2A	; 42
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 61       	ori	r24, 0x10	; 16
    1f9e:	80 83       	st	Z, r24

/*bound rate 9600*/
UBRRL_REG.Whole_Register =  51 ;
    1fa0:	e9 e2       	ldi	r30, 0x29	; 41
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	83 e3       	ldi	r24, 0x33	; 51
    1fa6:	80 83       	st	Z, r24
UBRRH_REG.Whole_Register =  0 ;
    1fa8:	e0 e4       	ldi	r30, 0x40	; 64
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	10 82       	st	Z, r1


}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <UART_vidSendByte>:

void UART_vidSendByte(u8 copy_u8Data)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	0f 92       	push	r0
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	while(UCSRA_REG.BITS.BIT_5 == 0);
    1fc0:	eb e2       	ldi	r30, 0x2B	; 43
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 72       	andi	r24, 0x20	; 32
    1fc8:	88 23       	and	r24, r24
    1fca:	d1 f3       	breq	.-12     	; 0x1fc0 <UART_vidSendByte+0xc>
	UDR_REG.Whole_Register = copy_u8Data ;
    1fcc:	ec e2       	ldi	r30, 0x2C	; 44
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	80 83       	st	Z, r24
}
    1fd4:	0f 90       	pop	r0
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <UART_u8ReceiveByte>:

u8 UART_u8ReceiveByte(void)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	0f 92       	push	r0
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Result ;
	while(UCSRA_REG.BITS.BIT_7==0);
    1fe6:	eb e2       	ldi	r30, 0x2B	; 43
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	80 78       	andi	r24, 0x80	; 128
    1fee:	88 23       	and	r24, r24
    1ff0:	d1 f3       	breq	.-12     	; 0x1fe6 <UART_u8ReceiveByte+0xa>
	local_u8Result = UDR_REG.Whole_Register ;
    1ff2:	ec e2       	ldi	r30, 0x2C	; 44
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	89 83       	std	Y+1, r24	; 0x01
	UCSRA_REG.BITS.BIT_7 = 0 ;
    1ffa:	eb e2       	ldi	r30, 0x2B	; 43
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	8f 77       	andi	r24, 0x7F	; 127
    2002:	80 83       	st	Z, r24

	return local_u8Result ;
    2004:	89 81       	ldd	r24, Y+1	; 0x01
}
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <main>:
		0b01111001,
		0b00100100,
		0b00110000,
};
int main (void)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62

	DIO_vidSetPinDirection(u8PORTD,DIO_u8PIN_4,DIO_u8OUTPUT); //Green Leds
    2018:	84 e0       	ldi	r24, 0x04	; 4
    201a:	64 e0       	ldi	r22, 0x04	; 4
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(u8PORTD,DIO_u8PIN_5,DIO_u8OUTPUT); //Red Leds
    2022:	84 e0       	ldi	r24, 0x04	; 4
    2024:	65 e0       	ldi	r22, 0x05	; 5
    2026:	41 e0       	ldi	r20, 0x01	; 1
    2028:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(u8PORTD,DIO_u8PIN_6,DIO_u8OUTPUT); //Buzzer
    202c:	84 e0       	ldi	r24, 0x04	; 4
    202e:	66 e0       	ldi	r22, 0x06	; 6
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_vidSetPinDirection>
	//motor pins
	DIO_vidSetPinDirection(u8PORTA,DIO_u8PIN_6,DIO_u8OUTPUT);
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	66 e0       	ldi	r22, 0x06	; 6
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(u8PORTA,DIO_u8PIN_7,DIO_u8OUTPUT);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	67 e0       	ldi	r22, 0x07	; 7
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_vidSetPinDirection>

	//initiating all leds to low
	DIO_vidSETPINval(u8PORTD,DIO_u8PIN_4,DIO_u8LOW);
    204a:	84 e0       	ldi	r24, 0x04	; 4
    204c:	64 e0       	ldi	r22, 0x04	; 4
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
	DIO_vidSETPINval(u8PORTD,DIO_u8PIN_5,DIO_u8LOW);
    2054:	84 e0       	ldi	r24, 0x04	; 4
    2056:	65 e0       	ldi	r22, 0x05	; 5
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>

	//PIR sensor
	DIO_vidSetPinDirection(u8PORTD,DIO_u8PIN_2,DIO_u8INPUT);
    205e:	84 e0       	ldi	r24, 0x04	; 4
    2060:	62 e0       	ldi	r22, 0x02	; 2
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_vidSetPinDirection>
	DIO_vidSETPINval(u8PORTD,DIO_u8PIN_2,DIO_u8HIGH);
    2068:	84 e0       	ldi	r24, 0x04	; 4
    206a:	62 e0       	ldi	r22, 0x02	; 2
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>

	//7 segment
	DIO_vidSETPORTDIRECION(u8PORTC,0xff);
    2072:	83 e0       	ldi	r24, 0x03	; 3
    2074:	6f ef       	ldi	r22, 0xFF	; 255
    2076:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_vidSETPORTDIRECION>
	DIO_vidSETPORTVAL(u8PORTC,0xff);
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	6f ef       	ldi	r22, 0xFF	; 255
    207e:	0e 94 49 09 	call	0x1292	; 0x1292 <DIO_vidSETPORTVAL>

//	DDRC=0XFF;
//	PORTC=0XFF;

	UART_vidInit();
    2082:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <UART_vidInit>
	LCD_vidInt();
    2086:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_vidInt>
	start_pass();
    208a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <start_pass>

	while(1)
	{
		for(u8 k = 0 ; k < 5; k++)
    208e:	19 82       	std	Y+1, r1	; 0x01
    2090:	05 c0       	rjmp	.+10     	; 0x209c <main+0x8e>
		{
			key_print();
    2092:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <key_print>
	LCD_vidInt();
	start_pass();

	while(1)
	{
		for(u8 k = 0 ; k < 5; k++)
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	8f 5f       	subi	r24, 0xFF	; 255
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	85 30       	cpi	r24, 0x05	; 5
    20a0:	c0 f3       	brcs	.-16     	; 0x2092 <main+0x84>
    20a2:	f5 cf       	rjmp	.-22     	; 0x208e <main+0x80>

000020a4 <start_pass>:

	return 0 ;
}

void start_pass (void)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	0f 92       	push	r0
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
	LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
	LCD_vidWriteString("pass =");
    20b4:	80 e6       	ldi	r24, 0x60	; 96
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
	for(u8 k = 0 ; k < 5; k++)
    20bc:	19 82       	std	Y+1, r1	; 0x01
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <start_pass+0x26>
	{
		key_print(); }
    20c0:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <key_print>

void start_pass (void)
{
	LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
	LCD_vidWriteString("pass =");
	for(u8 k = 0 ; k < 5; k++)
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	8f 5f       	subi	r24, 0xFF	; 255
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	85 30       	cpi	r24, 0x05	; 5
    20ce:	c0 f3       	brcs	.-16     	; 0x20c0 <start_pass+0x1c>
	{
		key_print(); }
}
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <key_print>:

void key_print()
{   data = UART_u8ReceiveByte();
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	ca 51       	subi	r28, 0x1A	; 26
    20e6:	d1 40       	sbci	r29, 0x01	; 1
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <UART_u8ReceiveByte>
    20f6:	80 93 ce 00 	sts	0x00CE, r24

if (data)
    20fa:	80 91 ce 00 	lds	r24, 0x00CE
    20fe:	88 23       	and	r24, r24
    2100:	11 f4       	brne	.+4      	; 0x2106 <key_print+0x2e>
    2102:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <key_print+0x1ce2>
{
	switch (data)
    2106:	80 91 ce 00 	lds	r24, 0x00CE
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	c7 5e       	subi	r28, 0xE7	; 231
    2110:	de 4f       	sbci	r29, 0xFE	; 254
    2112:	39 83       	std	Y+1, r19	; 0x01
    2114:	28 83       	st	Y, r18
    2116:	c9 51       	subi	r28, 0x19	; 25
    2118:	d1 40       	sbci	r29, 0x01	; 1
    211a:	c7 5e       	subi	r28, 0xE7	; 231
    211c:	de 4f       	sbci	r29, 0xFE	; 254
    211e:	88 81       	ld	r24, Y
    2120:	99 81       	ldd	r25, Y+1	; 0x01
    2122:	c9 51       	subi	r28, 0x19	; 25
    2124:	d1 40       	sbci	r29, 0x01	; 1
    2126:	84 33       	cpi	r24, 0x34	; 52
    2128:	91 05       	cpc	r25, r1
    212a:	09 f4       	brne	.+2      	; 0x212e <key_print+0x56>
    212c:	07 c5       	rjmp	.+2574   	; 0x2b3c <key_print+0xa64>
    212e:	c7 5e       	subi	r28, 0xE7	; 231
    2130:	de 4f       	sbci	r29, 0xFE	; 254
    2132:	e8 81       	ld	r30, Y
    2134:	f9 81       	ldd	r31, Y+1	; 0x01
    2136:	c9 51       	subi	r28, 0x19	; 25
    2138:	d1 40       	sbci	r29, 0x01	; 1
    213a:	e5 33       	cpi	r30, 0x35	; 53
    213c:	f1 05       	cpc	r31, r1
    213e:	0c f0       	brlt	.+2      	; 0x2142 <key_print+0x6a>
    2140:	41 c0       	rjmp	.+130    	; 0x21c4 <key_print+0xec>
    2142:	c7 5e       	subi	r28, 0xE7	; 231
    2144:	de 4f       	sbci	r29, 0xFE	; 254
    2146:	28 81       	ld	r18, Y
    2148:	39 81       	ldd	r19, Y+1	; 0x01
    214a:	c9 51       	subi	r28, 0x19	; 25
    214c:	d1 40       	sbci	r29, 0x01	; 1
    214e:	21 33       	cpi	r18, 0x31	; 49
    2150:	31 05       	cpc	r19, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <key_print+0x7e>
    2154:	79 c0       	rjmp	.+242    	; 0x2248 <key_print+0x170>
    2156:	c7 5e       	subi	r28, 0xE7	; 231
    2158:	de 4f       	sbci	r29, 0xFE	; 254
    215a:	88 81       	ld	r24, Y
    215c:	99 81       	ldd	r25, Y+1	; 0x01
    215e:	c9 51       	subi	r28, 0x19	; 25
    2160:	d1 40       	sbci	r29, 0x01	; 1
    2162:	82 33       	cpi	r24, 0x32	; 50
    2164:	91 05       	cpc	r25, r1
    2166:	c4 f4       	brge	.+48     	; 0x2198 <key_print+0xc0>
    2168:	c7 5e       	subi	r28, 0xE7	; 231
    216a:	de 4f       	sbci	r29, 0xFE	; 254
    216c:	e8 81       	ld	r30, Y
    216e:	f9 81       	ldd	r31, Y+1	; 0x01
    2170:	c9 51       	subi	r28, 0x19	; 25
    2172:	d1 40       	sbci	r29, 0x01	; 1
    2174:	e3 32       	cpi	r30, 0x23	; 35
    2176:	f1 05       	cpc	r31, r1
    2178:	11 f4       	brne	.+4      	; 0x217e <key_print+0xa6>
    217a:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <key_print+0x1cd8>
    217e:	c7 5e       	subi	r28, 0xE7	; 231
    2180:	de 4f       	sbci	r29, 0xFE	; 254
    2182:	28 81       	ld	r18, Y
    2184:	39 81       	ldd	r19, Y+1	; 0x01
    2186:	c9 51       	subi	r28, 0x19	; 25
    2188:	d1 40       	sbci	r29, 0x01	; 1
    218a:	20 33       	cpi	r18, 0x30	; 48
    218c:	31 05       	cpc	r19, r1
    218e:	11 f4       	brne	.+4      	; 0x2194 <key_print+0xbc>
    2190:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <key_print+0x1ae2>
    2194:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <key_print+0x1ce2>
    2198:	c7 5e       	subi	r28, 0xE7	; 231
    219a:	de 4f       	sbci	r29, 0xFE	; 254
    219c:	88 81       	ld	r24, Y
    219e:	99 81       	ldd	r25, Y+1	; 0x01
    21a0:	c9 51       	subi	r28, 0x19	; 25
    21a2:	d1 40       	sbci	r29, 0x01	; 1
    21a4:	82 33       	cpi	r24, 0x32	; 50
    21a6:	91 05       	cpc	r25, r1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <key_print+0xd4>
    21aa:	cc c1       	rjmp	.+920    	; 0x2544 <key_print+0x46c>
    21ac:	c7 5e       	subi	r28, 0xE7	; 231
    21ae:	de 4f       	sbci	r29, 0xFE	; 254
    21b0:	e8 81       	ld	r30, Y
    21b2:	f9 81       	ldd	r31, Y+1	; 0x01
    21b4:	c9 51       	subi	r28, 0x19	; 25
    21b6:	d1 40       	sbci	r29, 0x01	; 1
    21b8:	e3 33       	cpi	r30, 0x33	; 51
    21ba:	f1 05       	cpc	r31, r1
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <key_print+0xe8>
    21be:	40 c3       	rjmp	.+1664   	; 0x2840 <key_print+0x768>
    21c0:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <key_print+0x1ce2>
    21c4:	c7 5e       	subi	r28, 0xE7	; 231
    21c6:	de 4f       	sbci	r29, 0xFE	; 254
    21c8:	28 81       	ld	r18, Y
    21ca:	39 81       	ldd	r19, Y+1	; 0x01
    21cc:	c9 51       	subi	r28, 0x19	; 25
    21ce:	d1 40       	sbci	r29, 0x01	; 1
    21d0:	27 33       	cpi	r18, 0x37	; 55
    21d2:	31 05       	cpc	r19, r1
    21d4:	11 f4       	brne	.+4      	; 0x21da <key_print+0x102>
    21d6:	0c 94 16 1a 	jmp	0x342c	; 0x342c <key_print+0x1354>
    21da:	c7 5e       	subi	r28, 0xE7	; 231
    21dc:	de 4f       	sbci	r29, 0xFE	; 254
    21de:	88 81       	ld	r24, Y
    21e0:	99 81       	ldd	r25, Y+1	; 0x01
    21e2:	c9 51       	subi	r28, 0x19	; 25
    21e4:	d1 40       	sbci	r29, 0x01	; 1
    21e6:	88 33       	cpi	r24, 0x38	; 56
    21e8:	91 05       	cpc	r25, r1
    21ea:	b4 f4       	brge	.+44     	; 0x2218 <key_print+0x140>
    21ec:	c7 5e       	subi	r28, 0xE7	; 231
    21ee:	de 4f       	sbci	r29, 0xFE	; 254
    21f0:	e8 81       	ld	r30, Y
    21f2:	f9 81       	ldd	r31, Y+1	; 0x01
    21f4:	c9 51       	subi	r28, 0x19	; 25
    21f6:	d1 40       	sbci	r29, 0x01	; 1
    21f8:	e5 33       	cpi	r30, 0x35	; 53
    21fa:	f1 05       	cpc	r31, r1
    21fc:	09 f4       	brne	.+2      	; 0x2200 <key_print+0x128>
    21fe:	1c c6       	rjmp	.+3128   	; 0x2e38 <key_print+0xd60>
    2200:	c7 5e       	subi	r28, 0xE7	; 231
    2202:	de 4f       	sbci	r29, 0xFE	; 254
    2204:	28 81       	ld	r18, Y
    2206:	39 81       	ldd	r19, Y+1	; 0x01
    2208:	c9 51       	subi	r28, 0x19	; 25
    220a:	d1 40       	sbci	r29, 0x01	; 1
    220c:	26 33       	cpi	r18, 0x36	; 54
    220e:	31 05       	cpc	r19, r1
    2210:	09 f4       	brne	.+2      	; 0x2214 <key_print+0x13c>
    2212:	8f c7       	rjmp	.+3870   	; 0x3132 <key_print+0x105a>
    2214:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <key_print+0x1ce2>
    2218:	c7 5e       	subi	r28, 0xE7	; 231
    221a:	de 4f       	sbci	r29, 0xFE	; 254
    221c:	88 81       	ld	r24, Y
    221e:	99 81       	ldd	r25, Y+1	; 0x01
    2220:	c9 51       	subi	r28, 0x19	; 25
    2222:	d1 40       	sbci	r29, 0x01	; 1
    2224:	88 33       	cpi	r24, 0x38	; 56
    2226:	91 05       	cpc	r25, r1
    2228:	11 f4       	brne	.+4      	; 0x222e <key_print+0x156>
    222a:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <key_print+0x164e>
    222e:	c7 5e       	subi	r28, 0xE7	; 231
    2230:	de 4f       	sbci	r29, 0xFE	; 254
    2232:	e8 81       	ld	r30, Y
    2234:	f9 81       	ldd	r31, Y+1	; 0x01
    2236:	c9 51       	subi	r28, 0x19	; 25
    2238:	d1 40       	sbci	r29, 0x01	; 1
    223a:	e9 33       	cpi	r30, 0x39	; 57
    223c:	f1 05       	cpc	r31, r1
    223e:	11 f4       	brne	.+4      	; 0x2244 <key_print+0x16c>
    2240:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <key_print+0x18ec>
    2244:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <key_print+0x1ce2>
    2248:	fe 01       	movw	r30, r28
    224a:	eb 5e       	subi	r30, 0xEB	; 235
    224c:	fe 4f       	sbci	r31, 0xFE	; 254
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a8 ec       	ldi	r26, 0xC8	; 200
    2254:	b2 e4       	ldi	r27, 0x42	; 66
    2256:	80 83       	st	Z, r24
    2258:	91 83       	std	Z+1, r25	; 0x01
    225a:	a2 83       	std	Z+2, r26	; 0x02
    225c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225e:	8e 01       	movw	r16, r28
    2260:	0f 5e       	subi	r16, 0xEF	; 239
    2262:	1e 4f       	sbci	r17, 0xFE	; 254
    2264:	fe 01       	movw	r30, r28
    2266:	eb 5e       	subi	r30, 0xEB	; 235
    2268:	fe 4f       	sbci	r31, 0xFE	; 254
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a ef       	ldi	r20, 0xFA	; 250
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	f8 01       	movw	r30, r16
    2284:	80 83       	st	Z, r24
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	a2 83       	std	Z+2, r26	; 0x02
    228a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    228c:	fe 01       	movw	r30, r28
    228e:	ef 5e       	subi	r30, 0xEF	; 239
    2290:	fe 4f       	sbci	r31, 0xFE	; 254
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e8       	ldi	r20, 0x80	; 128
    22a0:	5f e3       	ldi	r21, 0x3F	; 63
    22a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a6:	88 23       	and	r24, r24
    22a8:	44 f4       	brge	.+16     	; 0x22ba <key_print+0x1e2>
		__ticks = 1;
    22aa:	fe 01       	movw	r30, r28
    22ac:	e1 5f       	subi	r30, 0xF1	; 241
    22ae:	fe 4f       	sbci	r31, 0xFE	; 254
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	80 83       	st	Z, r24
    22b8:	64 c0       	rjmp	.+200    	; 0x2382 <key_print+0x2aa>
	else if (__tmp > 65535)
    22ba:	fe 01       	movw	r30, r28
    22bc:	ef 5e       	subi	r30, 0xEF	; 239
    22be:	fe 4f       	sbci	r31, 0xFE	; 254
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	0c f0       	brlt	.+2      	; 0x22da <key_print+0x202>
    22d8:	43 c0       	rjmp	.+134    	; 0x2360 <key_print+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	fe 01       	movw	r30, r28
    22dc:	eb 5e       	subi	r30, 0xEB	; 235
    22de:	fe 4f       	sbci	r31, 0xFE	; 254
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	8e 01       	movw	r16, r28
    22fa:	01 5f       	subi	r16, 0xF1	; 241
    22fc:	1e 4f       	sbci	r17, 0xFE	; 254
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	f8 01       	movw	r30, r16
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
    2310:	1f c0       	rjmp	.+62     	; 0x2350 <key_print+0x278>
    2312:	fe 01       	movw	r30, r28
    2314:	e3 5f       	subi	r30, 0xF3	; 243
    2316:	fe 4f       	sbci	r31, 0xFE	; 254
    2318:	88 ec       	ldi	r24, 0xC8	; 200
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	fe 01       	movw	r30, r28
    2322:	e3 5f       	subi	r30, 0xF3	; 243
    2324:	fe 4f       	sbci	r31, 0xFE	; 254
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <key_print+0x252>
    232e:	fe 01       	movw	r30, r28
    2330:	e3 5f       	subi	r30, 0xF3	; 243
    2332:	fe 4f       	sbci	r31, 0xFE	; 254
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	de 01       	movw	r26, r28
    233a:	a1 5f       	subi	r26, 0xF1	; 241
    233c:	be 4f       	sbci	r27, 0xFE	; 254
    233e:	fe 01       	movw	r30, r28
    2340:	e1 5f       	subi	r30, 0xF1	; 241
    2342:	fe 4f       	sbci	r31, 0xFE	; 254
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	11 96       	adiw	r26, 0x01	; 1
    234c:	9c 93       	st	X, r25
    234e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2350:	fe 01       	movw	r30, r28
    2352:	e1 5f       	subi	r30, 0xF1	; 241
    2354:	fe 4f       	sbci	r31, 0xFE	; 254
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	d1 f6       	brne	.-76     	; 0x2312 <key_print+0x23a>
    235e:	27 c0       	rjmp	.+78     	; 0x23ae <key_print+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	8e 01       	movw	r16, r28
    2362:	01 5f       	subi	r16, 0xF1	; 241
    2364:	1e 4f       	sbci	r17, 0xFE	; 254
    2366:	fe 01       	movw	r30, r28
    2368:	ef 5e       	subi	r30, 0xEF	; 239
    236a:	fe 4f       	sbci	r31, 0xFE	; 254
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	f8 01       	movw	r30, r16
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	80 83       	st	Z, r24
    2382:	de 01       	movw	r26, r28
    2384:	a5 5f       	subi	r26, 0xF5	; 245
    2386:	be 4f       	sbci	r27, 0xFE	; 254
    2388:	fe 01       	movw	r30, r28
    238a:	e1 5f       	subi	r30, 0xF1	; 241
    238c:	fe 4f       	sbci	r31, 0xFE	; 254
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	8d 93       	st	X+, r24
    2394:	9c 93       	st	X, r25
    2396:	fe 01       	movw	r30, r28
    2398:	e5 5f       	subi	r30, 0xF5	; 245
    239a:	fe 4f       	sbci	r31, 0xFE	; 254
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <key_print+0x2c8>
    23a4:	fe 01       	movw	r30, r28
    23a6:	e5 5f       	subi	r30, 0xF5	; 245
    23a8:	fe 4f       	sbci	r31, 0xFE	; 254
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
	{

	case '1':
		_delay_ms(100);
		LCD_vidWriteString("1");
    23ae:	87 e6       	ldi	r24, 0x67	; 103
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('1');
    23b6:	81 e3       	ldi	r24, 0x31	; 49
    23b8:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    23bc:	fe 01       	movw	r30, r28
    23be:	e9 5f       	subi	r30, 0xF9	; 249
    23c0:	fe 4f       	sbci	r31, 0xFE	; 254
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a8 e4       	ldi	r26, 0x48	; 72
    23c8:	b3 e4       	ldi	r27, 0x43	; 67
    23ca:	80 83       	st	Z, r24
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	a2 83       	std	Z+2, r26	; 0x02
    23d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	8e 01       	movw	r16, r28
    23d4:	0d 5f       	subi	r16, 0xFD	; 253
    23d6:	1e 4f       	sbci	r17, 0xFE	; 254
    23d8:	fe 01       	movw	r30, r28
    23da:	e9 5f       	subi	r30, 0xF9	; 249
    23dc:	fe 4f       	sbci	r31, 0xFE	; 254
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4a ef       	ldi	r20, 0xFA	; 250
    23ec:	54 e4       	ldi	r21, 0x44	; 68
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	f8 01       	movw	r30, r16
    23f8:	80 83       	st	Z, r24
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	a2 83       	std	Z+2, r26	; 0x02
    23fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2400:	fe 01       	movw	r30, r28
    2402:	ed 5f       	subi	r30, 0xFD	; 253
    2404:	fe 4f       	sbci	r31, 0xFE	; 254
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    241a:	88 23       	and	r24, r24
    241c:	44 f4       	brge	.+16     	; 0x242e <key_print+0x356>
		__ticks = 1;
    241e:	fe 01       	movw	r30, r28
    2420:	ef 5f       	subi	r30, 0xFF	; 255
    2422:	fe 4f       	sbci	r31, 0xFE	; 254
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
    242c:	64 c0       	rjmp	.+200    	; 0x24f6 <key_print+0x41e>
	else if (__tmp > 65535)
    242e:	fe 01       	movw	r30, r28
    2430:	ed 5f       	subi	r30, 0xFD	; 253
    2432:	fe 4f       	sbci	r31, 0xFE	; 254
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	3f ef       	ldi	r19, 0xFF	; 255
    2440:	4f e7       	ldi	r20, 0x7F	; 127
    2442:	57 e4       	ldi	r21, 0x47	; 71
    2444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2448:	18 16       	cp	r1, r24
    244a:	0c f0       	brlt	.+2      	; 0x244e <key_print+0x376>
    244c:	43 c0       	rjmp	.+134    	; 0x24d4 <key_print+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244e:	fe 01       	movw	r30, r28
    2450:	e9 5f       	subi	r30, 0xF9	; 249
    2452:	fe 4f       	sbci	r31, 0xFE	; 254
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e2       	ldi	r20, 0x20	; 32
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	8e 01       	movw	r16, r28
    246e:	0f 5f       	subi	r16, 0xFF	; 255
    2470:	1e 4f       	sbci	r17, 0xFE	; 254
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	f8 01       	movw	r30, r16
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
    2484:	1f c0       	rjmp	.+62     	; 0x24c4 <key_print+0x3ec>
    2486:	fe 01       	movw	r30, r28
    2488:	e1 50       	subi	r30, 0x01	; 1
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	88 ec       	ldi	r24, 0xC8	; 200
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
    2494:	fe 01       	movw	r30, r28
    2496:	e1 50       	subi	r30, 0x01	; 1
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <key_print+0x3c6>
    24a2:	fe 01       	movw	r30, r28
    24a4:	e1 50       	subi	r30, 0x01	; 1
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ac:	de 01       	movw	r26, r28
    24ae:	af 5f       	subi	r26, 0xFF	; 255
    24b0:	be 4f       	sbci	r27, 0xFE	; 254
    24b2:	fe 01       	movw	r30, r28
    24b4:	ef 5f       	subi	r30, 0xFF	; 255
    24b6:	fe 4f       	sbci	r31, 0xFE	; 254
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	11 96       	adiw	r26, 0x01	; 1
    24c0:	9c 93       	st	X, r25
    24c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	fe 01       	movw	r30, r28
    24c6:	ef 5f       	subi	r30, 0xFF	; 255
    24c8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	d1 f6       	brne	.-76     	; 0x2486 <key_print+0x3ae>
    24d2:	27 c0       	rjmp	.+78     	; 0x2522 <key_print+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	8e 01       	movw	r16, r28
    24d6:	0f 5f       	subi	r16, 0xFF	; 255
    24d8:	1e 4f       	sbci	r17, 0xFE	; 254
    24da:	fe 01       	movw	r30, r28
    24dc:	ed 5f       	subi	r30, 0xFD	; 253
    24de:	fe 4f       	sbci	r31, 0xFE	; 254
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	f8 01       	movw	r30, r16
    24f2:	91 83       	std	Z+1, r25	; 0x01
    24f4:	80 83       	st	Z, r24
    24f6:	de 01       	movw	r26, r28
    24f8:	a3 50       	subi	r26, 0x03	; 3
    24fa:	bf 4f       	sbci	r27, 0xFF	; 255
    24fc:	fe 01       	movw	r30, r28
    24fe:	ef 5f       	subi	r30, 0xFF	; 255
    2500:	fe 4f       	sbci	r31, 0xFE	; 254
    2502:	80 81       	ld	r24, Z
    2504:	91 81       	ldd	r25, Z+1	; 0x01
    2506:	8d 93       	st	X+, r24
    2508:	9c 93       	st	X, r25
    250a:	fe 01       	movw	r30, r28
    250c:	e3 50       	subi	r30, 0x03	; 3
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	91 81       	ldd	r25, Z+1	; 0x01
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <key_print+0x43c>
    2518:	fe 01       	movw	r30, r28
    251a:	e3 50       	subi	r30, 0x03	; 3
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    2522:	90 91 c5 00 	lds	r25, 0x00C5
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	69 2f       	mov	r22, r25
    252a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    252e:	80 91 c6 00 	lds	r24, 0x00C6
    2532:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    2536:	80 91 c5 00 	lds	r24, 0x00C5
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	80 93 c5 00 	sts	0x00C5, r24
    2540:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <key_print+0x1ce2>
		break ;
    2544:	fe 01       	movw	r30, r28
    2546:	e7 50       	subi	r30, 0x07	; 7
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	a8 ec       	ldi	r26, 0xC8	; 200
    2550:	b2 e4       	ldi	r27, 0x42	; 66
    2552:	80 83       	st	Z, r24
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	a2 83       	std	Z+2, r26	; 0x02
    2558:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255a:	8e 01       	movw	r16, r28
    255c:	0b 50       	subi	r16, 0x0B	; 11
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	e7 50       	subi	r30, 0x07	; 7
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4a ef       	ldi	r20, 0xFA	; 250
    2574:	54 e4       	ldi	r21, 0x44	; 68
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	f8 01       	movw	r30, r16
    2580:	80 83       	st	Z, r24
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	a2 83       	std	Z+2, r26	; 0x02
    2586:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2588:	fe 01       	movw	r30, r28
    258a:	eb 50       	subi	r30, 0x0B	; 11
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	44 f4       	brge	.+16     	; 0x25b6 <key_print+0x4de>
		__ticks = 1;
    25a6:	fe 01       	movw	r30, r28
    25a8:	ed 50       	subi	r30, 0x0D	; 13
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
    25b4:	64 c0       	rjmp	.+200    	; 0x267e <key_print+0x5a6>
	else if (__tmp > 65535)
    25b6:	fe 01       	movw	r30, r28
    25b8:	eb 50       	subi	r30, 0x0B	; 11
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	3f ef       	ldi	r19, 0xFF	; 255
    25c8:	4f e7       	ldi	r20, 0x7F	; 127
    25ca:	57 e4       	ldi	r21, 0x47	; 71
    25cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d0:	18 16       	cp	r1, r24
    25d2:	0c f0       	brlt	.+2      	; 0x25d6 <key_print+0x4fe>
    25d4:	43 c0       	rjmp	.+134    	; 0x265c <key_print+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	fe 01       	movw	r30, r28
    25d8:	e7 50       	subi	r30, 0x07	; 7
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	60 81       	ld	r22, Z
    25de:	71 81       	ldd	r23, Z+1	; 0x01
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	93 81       	ldd	r25, Z+3	; 0x03
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e2       	ldi	r20, 0x20	; 32
    25ea:	51 e4       	ldi	r21, 0x41	; 65
    25ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	8e 01       	movw	r16, r28
    25f6:	0d 50       	subi	r16, 0x0D	; 13
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	f8 01       	movw	r30, r16
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	80 83       	st	Z, r24
    260c:	1f c0       	rjmp	.+62     	; 0x264c <key_print+0x574>
    260e:	fe 01       	movw	r30, r28
    2610:	ef 50       	subi	r30, 0x0F	; 15
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	88 ec       	ldi	r24, 0xC8	; 200
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	80 83       	st	Z, r24
    261c:	fe 01       	movw	r30, r28
    261e:	ef 50       	subi	r30, 0x0F	; 15
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <key_print+0x54e>
    262a:	fe 01       	movw	r30, r28
    262c:	ef 50       	subi	r30, 0x0F	; 15
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	de 01       	movw	r26, r28
    2636:	ad 50       	subi	r26, 0x0D	; 13
    2638:	bf 4f       	sbci	r27, 0xFF	; 255
    263a:	fe 01       	movw	r30, r28
    263c:	ed 50       	subi	r30, 0x0D	; 13
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	91 81       	ldd	r25, Z+1	; 0x01
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	11 96       	adiw	r26, 0x01	; 1
    2648:	9c 93       	st	X, r25
    264a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	fe 01       	movw	r30, r28
    264e:	ed 50       	subi	r30, 0x0D	; 13
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 81       	ld	r24, Z
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	d1 f6       	brne	.-76     	; 0x260e <key_print+0x536>
    265a:	27 c0       	rjmp	.+78     	; 0x26aa <key_print+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265c:	8e 01       	movw	r16, r28
    265e:	0d 50       	subi	r16, 0x0D	; 13
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	fe 01       	movw	r30, r28
    2664:	eb 50       	subi	r30, 0x0B	; 11
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	60 81       	ld	r22, Z
    266a:	71 81       	ldd	r23, Z+1	; 0x01
    266c:	82 81       	ldd	r24, Z+2	; 0x02
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	f8 01       	movw	r30, r16
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
    267e:	de 01       	movw	r26, r28
    2680:	a1 51       	subi	r26, 0x11	; 17
    2682:	bf 4f       	sbci	r27, 0xFF	; 255
    2684:	fe 01       	movw	r30, r28
    2686:	ed 50       	subi	r30, 0x0D	; 13
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	91 81       	ldd	r25, Z+1	; 0x01
    268e:	8d 93       	st	X+, r24
    2690:	9c 93       	st	X, r25
    2692:	fe 01       	movw	r30, r28
    2694:	e1 51       	subi	r30, 0x11	; 17
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 81       	ld	r24, Z
    269a:	91 81       	ldd	r25, Z+1	; 0x01
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	f1 f7       	brne	.-4      	; 0x269c <key_print+0x5c4>
    26a0:	fe 01       	movw	r30, r28
    26a2:	e1 51       	subi	r30, 0x11	; 17
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
	case '2':
		_delay_ms(100);
		LCD_vidWriteString("2");
    26aa:	89 e6       	ldi	r24, 0x69	; 105
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('2');
    26b2:	82 e3       	ldi	r24, 0x32	; 50
    26b4:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    26b8:	fe 01       	movw	r30, r28
    26ba:	e5 51       	subi	r30, 0x15	; 21
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	a8 e4       	ldi	r26, 0x48	; 72
    26c4:	b3 e4       	ldi	r27, 0x43	; 67
    26c6:	80 83       	st	Z, r24
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	a2 83       	std	Z+2, r26	; 0x02
    26cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ce:	8e 01       	movw	r16, r28
    26d0:	09 51       	subi	r16, 0x19	; 25
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	fe 01       	movw	r30, r28
    26d6:	e5 51       	subi	r30, 0x15	; 21
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	4a ef       	ldi	r20, 0xFA	; 250
    26e8:	54 e4       	ldi	r21, 0x44	; 68
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	f8 01       	movw	r30, r16
    26f4:	80 83       	st	Z, r24
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	a2 83       	std	Z+2, r26	; 0x02
    26fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26fc:	fe 01       	movw	r30, r28
    26fe:	e9 51       	subi	r30, 0x19	; 25
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	60 81       	ld	r22, Z
    2704:	71 81       	ldd	r23, Z+1	; 0x01
    2706:	82 81       	ldd	r24, Z+2	; 0x02
    2708:	93 81       	ldd	r25, Z+3	; 0x03
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	44 f4       	brge	.+16     	; 0x272a <key_print+0x652>
		__ticks = 1;
    271a:	fe 01       	movw	r30, r28
    271c:	eb 51       	subi	r30, 0x1B	; 27
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
    2728:	64 c0       	rjmp	.+200    	; 0x27f2 <key_print+0x71a>
	else if (__tmp > 65535)
    272a:	fe 01       	movw	r30, r28
    272c:	e9 51       	subi	r30, 0x19	; 25
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	0c f0       	brlt	.+2      	; 0x274a <key_print+0x672>
    2748:	43 c0       	rjmp	.+134    	; 0x27d0 <key_print+0x6f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274a:	fe 01       	movw	r30, r28
    274c:	e5 51       	subi	r30, 0x15	; 21
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	51 e4       	ldi	r21, 0x41	; 65
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8e 01       	movw	r16, r28
    276a:	0b 51       	subi	r16, 0x1B	; 27
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	f8 01       	movw	r30, r16
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	80 83       	st	Z, r24
    2780:	1f c0       	rjmp	.+62     	; 0x27c0 <key_print+0x6e8>
    2782:	fe 01       	movw	r30, r28
    2784:	ed 51       	subi	r30, 0x1D	; 29
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	88 ec       	ldi	r24, 0xC8	; 200
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
    2790:	fe 01       	movw	r30, r28
    2792:	ed 51       	subi	r30, 0x1D	; 29
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <key_print+0x6c2>
    279e:	fe 01       	movw	r30, r28
    27a0:	ed 51       	subi	r30, 0x1D	; 29
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a8:	de 01       	movw	r26, r28
    27aa:	ab 51       	subi	r26, 0x1B	; 27
    27ac:	bf 4f       	sbci	r27, 0xFF	; 255
    27ae:	fe 01       	movw	r30, r28
    27b0:	eb 51       	subi	r30, 0x1B	; 27
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	11 96       	adiw	r26, 0x01	; 1
    27bc:	9c 93       	st	X, r25
    27be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c0:	fe 01       	movw	r30, r28
    27c2:	eb 51       	subi	r30, 0x1B	; 27
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	d1 f6       	brne	.-76     	; 0x2782 <key_print+0x6aa>
    27ce:	27 c0       	rjmp	.+78     	; 0x281e <key_print+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d0:	8e 01       	movw	r16, r28
    27d2:	0b 51       	subi	r16, 0x1B	; 27
    27d4:	1f 4f       	sbci	r17, 0xFF	; 255
    27d6:	fe 01       	movw	r30, r28
    27d8:	e9 51       	subi	r30, 0x19	; 25
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	f8 01       	movw	r30, r16
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	de 01       	movw	r26, r28
    27f4:	af 51       	subi	r26, 0x1F	; 31
    27f6:	bf 4f       	sbci	r27, 0xFF	; 255
    27f8:	fe 01       	movw	r30, r28
    27fa:	eb 51       	subi	r30, 0x1B	; 27
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	8d 93       	st	X+, r24
    2804:	9c 93       	st	X, r25
    2806:	fe 01       	movw	r30, r28
    2808:	ef 51       	subi	r30, 0x1F	; 31
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <key_print+0x738>
    2814:	fe 01       	movw	r30, r28
    2816:	ef 51       	subi	r30, 0x1F	; 31
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    281e:	90 91 c5 00 	lds	r25, 0x00C5
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	69 2f       	mov	r22, r25
    2826:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    282a:	80 91 c6 00 	lds	r24, 0x00C6
    282e:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    2832:	80 91 c5 00 	lds	r24, 0x00C5
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	80 93 c5 00 	sts	0x00C5, r24
    283c:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <key_print+0x1ce2>
		break ;
    2840:	fe 01       	movw	r30, r28
    2842:	e3 52       	subi	r30, 0x23	; 35
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a8 ec       	ldi	r26, 0xC8	; 200
    284c:	b2 e4       	ldi	r27, 0x42	; 66
    284e:	80 83       	st	Z, r24
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	a2 83       	std	Z+2, r26	; 0x02
    2854:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	8e 01       	movw	r16, r28
    2858:	07 52       	subi	r16, 0x27	; 39
    285a:	1f 4f       	sbci	r17, 0xFF	; 255
    285c:	fe 01       	movw	r30, r28
    285e:	e3 52       	subi	r30, 0x23	; 35
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	f8 01       	movw	r30, r16
    287c:	80 83       	st	Z, r24
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	a2 83       	std	Z+2, r26	; 0x02
    2882:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2884:	fe 01       	movw	r30, r28
    2886:	e7 52       	subi	r30, 0x27	; 39
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e8       	ldi	r20, 0x80	; 128
    2898:	5f e3       	ldi	r21, 0x3F	; 63
    289a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289e:	88 23       	and	r24, r24
    28a0:	44 f4       	brge	.+16     	; 0x28b2 <key_print+0x7da>
		__ticks = 1;
    28a2:	fe 01       	movw	r30, r28
    28a4:	e9 52       	subi	r30, 0x29	; 41
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
    28b0:	64 c0       	rjmp	.+200    	; 0x297a <key_print+0x8a2>
	else if (__tmp > 65535)
    28b2:	fe 01       	movw	r30, r28
    28b4:	e7 52       	subi	r30, 0x27	; 39
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	60 81       	ld	r22, Z
    28ba:	71 81       	ldd	r23, Z+1	; 0x01
    28bc:	82 81       	ldd	r24, Z+2	; 0x02
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	3f ef       	ldi	r19, 0xFF	; 255
    28c4:	4f e7       	ldi	r20, 0x7F	; 127
    28c6:	57 e4       	ldi	r21, 0x47	; 71
    28c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28cc:	18 16       	cp	r1, r24
    28ce:	0c f0       	brlt	.+2      	; 0x28d2 <key_print+0x7fa>
    28d0:	43 c0       	rjmp	.+134    	; 0x2958 <key_print+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d2:	fe 01       	movw	r30, r28
    28d4:	e3 52       	subi	r30, 0x23	; 35
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e2       	ldi	r20, 0x20	; 32
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8e 01       	movw	r16, r28
    28f2:	09 52       	subi	r16, 0x29	; 41
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	f8 01       	movw	r30, r16
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	80 83       	st	Z, r24
    2908:	1f c0       	rjmp	.+62     	; 0x2948 <key_print+0x870>
    290a:	fe 01       	movw	r30, r28
    290c:	eb 52       	subi	r30, 0x2B	; 43
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	88 ec       	ldi	r24, 0xC8	; 200
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	80 83       	st	Z, r24
    2918:	fe 01       	movw	r30, r28
    291a:	eb 52       	subi	r30, 0x2B	; 43
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <key_print+0x84a>
    2926:	fe 01       	movw	r30, r28
    2928:	eb 52       	subi	r30, 0x2B	; 43
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2930:	de 01       	movw	r26, r28
    2932:	a9 52       	subi	r26, 0x29	; 41
    2934:	bf 4f       	sbci	r27, 0xFF	; 255
    2936:	fe 01       	movw	r30, r28
    2938:	e9 52       	subi	r30, 0x29	; 41
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	91 81       	ldd	r25, Z+1	; 0x01
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	11 96       	adiw	r26, 0x01	; 1
    2944:	9c 93       	st	X, r25
    2946:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2948:	fe 01       	movw	r30, r28
    294a:	e9 52       	subi	r30, 0x29	; 41
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	d1 f6       	brne	.-76     	; 0x290a <key_print+0x832>
    2956:	27 c0       	rjmp	.+78     	; 0x29a6 <key_print+0x8ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	8e 01       	movw	r16, r28
    295a:	09 52       	subi	r16, 0x29	; 41
    295c:	1f 4f       	sbci	r17, 0xFF	; 255
    295e:	fe 01       	movw	r30, r28
    2960:	e7 52       	subi	r30, 0x27	; 39
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	f8 01       	movw	r30, r16
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
    297a:	de 01       	movw	r26, r28
    297c:	ad 52       	subi	r26, 0x2D	; 45
    297e:	bf 4f       	sbci	r27, 0xFF	; 255
    2980:	fe 01       	movw	r30, r28
    2982:	e9 52       	subi	r30, 0x29	; 41
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	8d 93       	st	X+, r24
    298c:	9c 93       	st	X, r25
    298e:	fe 01       	movw	r30, r28
    2990:	ed 52       	subi	r30, 0x2D	; 45
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <key_print+0x8c0>
    299c:	fe 01       	movw	r30, r28
    299e:	ed 52       	subi	r30, 0x2D	; 45
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
	case '3':
		_delay_ms(100);
		LCD_vidWriteString("3");
    29a6:	8b e6       	ldi	r24, 0x6B	; 107
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('3');
    29ae:	83 e3       	ldi	r24, 0x33	; 51
    29b0:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    29b4:	fe 01       	movw	r30, r28
    29b6:	e1 53       	subi	r30, 0x31	; 49
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	a8 e4       	ldi	r26, 0x48	; 72
    29c0:	b3 e4       	ldi	r27, 0x43	; 67
    29c2:	80 83       	st	Z, r24
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	a2 83       	std	Z+2, r26	; 0x02
    29c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ca:	8e 01       	movw	r16, r28
    29cc:	05 53       	subi	r16, 0x35	; 53
    29ce:	1f 4f       	sbci	r17, 0xFF	; 255
    29d0:	fe 01       	movw	r30, r28
    29d2:	e1 53       	subi	r30, 0x31	; 49
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a ef       	ldi	r20, 0xFA	; 250
    29e4:	54 e4       	ldi	r21, 0x44	; 68
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	f8 01       	movw	r30, r16
    29f0:	80 83       	st	Z, r24
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	a2 83       	std	Z+2, r26	; 0x02
    29f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29f8:	fe 01       	movw	r30, r28
    29fa:	e5 53       	subi	r30, 0x35	; 53
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a12:	88 23       	and	r24, r24
    2a14:	44 f4       	brge	.+16     	; 0x2a26 <key_print+0x94e>
		__ticks = 1;
    2a16:	fe 01       	movw	r30, r28
    2a18:	e7 53       	subi	r30, 0x37	; 55
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
    2a24:	64 c0       	rjmp	.+200    	; 0x2aee <key_print+0xa16>
	else if (__tmp > 65535)
    2a26:	fe 01       	movw	r30, r28
    2a28:	e5 53       	subi	r30, 0x35	; 53
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	3f ef       	ldi	r19, 0xFF	; 255
    2a38:	4f e7       	ldi	r20, 0x7F	; 127
    2a3a:	57 e4       	ldi	r21, 0x47	; 71
    2a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a40:	18 16       	cp	r1, r24
    2a42:	0c f0       	brlt	.+2      	; 0x2a46 <key_print+0x96e>
    2a44:	43 c0       	rjmp	.+134    	; 0x2acc <key_print+0x9f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a46:	fe 01       	movw	r30, r28
    2a48:	e1 53       	subi	r30, 0x31	; 49
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e2       	ldi	r20, 0x20	; 32
    2a5a:	51 e4       	ldi	r21, 0x41	; 65
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	8e 01       	movw	r16, r28
    2a66:	07 53       	subi	r16, 0x37	; 55
    2a68:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	f8 01       	movw	r30, r16
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	80 83       	st	Z, r24
    2a7c:	1f c0       	rjmp	.+62     	; 0x2abc <key_print+0x9e4>
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e9 53       	subi	r30, 0x39	; 57
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	88 ec       	ldi	r24, 0xC8	; 200
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	80 83       	st	Z, r24
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e9 53       	subi	r30, 0x39	; 57
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <key_print+0x9be>
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e9 53       	subi	r30, 0x39	; 57
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa4:	de 01       	movw	r26, r28
    2aa6:	a7 53       	subi	r26, 0x37	; 55
    2aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e7 53       	subi	r30, 0x37	; 55
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	11 96       	adiw	r26, 0x01	; 1
    2ab8:	9c 93       	st	X, r25
    2aba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	fe 01       	movw	r30, r28
    2abe:	e7 53       	subi	r30, 0x37	; 55
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	d1 f6       	brne	.-76     	; 0x2a7e <key_print+0x9a6>
    2aca:	27 c0       	rjmp	.+78     	; 0x2b1a <key_print+0xa42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2acc:	8e 01       	movw	r16, r28
    2ace:	07 53       	subi	r16, 0x37	; 55
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e5 53       	subi	r30, 0x35	; 53
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	f8 01       	movw	r30, r16
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	80 83       	st	Z, r24
    2aee:	de 01       	movw	r26, r28
    2af0:	ab 53       	subi	r26, 0x3B	; 59
    2af2:	bf 4f       	sbci	r27, 0xFF	; 255
    2af4:	fe 01       	movw	r30, r28
    2af6:	e7 53       	subi	r30, 0x37	; 55
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	91 81       	ldd	r25, Z+1	; 0x01
    2afe:	8d 93       	st	X+, r24
    2b00:	9c 93       	st	X, r25
    2b02:	fe 01       	movw	r30, r28
    2b04:	eb 53       	subi	r30, 0x3B	; 59
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <key_print+0xa34>
    2b10:	fe 01       	movw	r30, r28
    2b12:	eb 53       	subi	r30, 0x3B	; 59
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    2b1a:	90 91 c5 00 	lds	r25, 0x00C5
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	69 2f       	mov	r22, r25
    2b22:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    2b26:	80 91 c6 00 	lds	r24, 0x00C6
    2b2a:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    2b2e:	80 91 c5 00 	lds	r24, 0x00C5
    2b32:	8f 5f       	subi	r24, 0xFF	; 255
    2b34:	80 93 c5 00 	sts	0x00C5, r24
    2b38:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <key_print+0x1ce2>
		break ;
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ef 53       	subi	r30, 0x3F	; 63
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a8 ec       	ldi	r26, 0xC8	; 200
    2b48:	b2 e4       	ldi	r27, 0x42	; 66
    2b4a:	80 83       	st	Z, r24
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	a2 83       	std	Z+2, r26	; 0x02
    2b50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	8e 01       	movw	r16, r28
    2b54:	03 54       	subi	r16, 0x43	; 67
    2b56:	1f 4f       	sbci	r17, 0xFF	; 255
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ef 53       	subi	r30, 0x3F	; 63
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	4a ef       	ldi	r20, 0xFA	; 250
    2b6c:	54 e4       	ldi	r21, 0x44	; 68
    2b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	f8 01       	movw	r30, r16
    2b78:	80 83       	st	Z, r24
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	a2 83       	std	Z+2, r26	; 0x02
    2b7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b80:	fe 01       	movw	r30, r28
    2b82:	e3 54       	subi	r30, 0x43	; 67
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	60 81       	ld	r22, Z
    2b88:	71 81       	ldd	r23, Z+1	; 0x01
    2b8a:	82 81       	ldd	r24, Z+2	; 0x02
    2b8c:	93 81       	ldd	r25, Z+3	; 0x03
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e8       	ldi	r20, 0x80	; 128
    2b94:	5f e3       	ldi	r21, 0x3F	; 63
    2b96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b9a:	88 23       	and	r24, r24
    2b9c:	44 f4       	brge	.+16     	; 0x2bae <key_print+0xad6>
		__ticks = 1;
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e5 54       	subi	r30, 0x45	; 69
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	91 83       	std	Z+1, r25	; 0x01
    2baa:	80 83       	st	Z, r24
    2bac:	64 c0       	rjmp	.+200    	; 0x2c76 <key_print+0xb9e>
	else if (__tmp > 65535)
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e3 54       	subi	r30, 0x43	; 67
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	60 81       	ld	r22, Z
    2bb6:	71 81       	ldd	r23, Z+1	; 0x01
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	93 81       	ldd	r25, Z+3	; 0x03
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	3f ef       	ldi	r19, 0xFF	; 255
    2bc0:	4f e7       	ldi	r20, 0x7F	; 127
    2bc2:	57 e4       	ldi	r21, 0x47	; 71
    2bc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc8:	18 16       	cp	r1, r24
    2bca:	0c f0       	brlt	.+2      	; 0x2bce <key_print+0xaf6>
    2bcc:	43 c0       	rjmp	.+134    	; 0x2c54 <key_print+0xb7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ef 53       	subi	r30, 0x3F	; 63
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e2       	ldi	r20, 0x20	; 32
    2be2:	51 e4       	ldi	r21, 0x41	; 65
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	8e 01       	movw	r16, r28
    2bee:	05 54       	subi	r16, 0x45	; 69
    2bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	cd 01       	movw	r24, r26
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	f8 01       	movw	r30, r16
    2c00:	91 83       	std	Z+1, r25	; 0x01
    2c02:	80 83       	st	Z, r24
    2c04:	1f c0       	rjmp	.+62     	; 0x2c44 <key_print+0xb6c>
    2c06:	fe 01       	movw	r30, r28
    2c08:	e7 54       	subi	r30, 0x47	; 71
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	88 ec       	ldi	r24, 0xC8	; 200
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	91 83       	std	Z+1, r25	; 0x01
    2c12:	80 83       	st	Z, r24
    2c14:	fe 01       	movw	r30, r28
    2c16:	e7 54       	subi	r30, 0x47	; 71
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	91 81       	ldd	r25, Z+1	; 0x01
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <key_print+0xb46>
    2c22:	fe 01       	movw	r30, r28
    2c24:	e7 54       	subi	r30, 0x47	; 71
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2c:	de 01       	movw	r26, r28
    2c2e:	a5 54       	subi	r26, 0x45	; 69
    2c30:	bf 4f       	sbci	r27, 0xFF	; 255
    2c32:	fe 01       	movw	r30, r28
    2c34:	e5 54       	subi	r30, 0x45	; 69
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	11 96       	adiw	r26, 0x01	; 1
    2c40:	9c 93       	st	X, r25
    2c42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c44:	fe 01       	movw	r30, r28
    2c46:	e5 54       	subi	r30, 0x45	; 69
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	d1 f6       	brne	.-76     	; 0x2c06 <key_print+0xb2e>
    2c52:	27 c0       	rjmp	.+78     	; 0x2ca2 <key_print+0xbca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c54:	8e 01       	movw	r16, r28
    2c56:	05 54       	subi	r16, 0x45	; 69
    2c58:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e3 54       	subi	r30, 0x43	; 67
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	60 81       	ld	r22, Z
    2c62:	71 81       	ldd	r23, Z+1	; 0x01
    2c64:	82 81       	ldd	r24, Z+2	; 0x02
    2c66:	93 81       	ldd	r25, Z+3	; 0x03
    2c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	f8 01       	movw	r30, r16
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
    2c76:	de 01       	movw	r26, r28
    2c78:	a9 54       	subi	r26, 0x49	; 73
    2c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e5 54       	subi	r30, 0x45	; 69
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	80 81       	ld	r24, Z
    2c84:	91 81       	ldd	r25, Z+1	; 0x01
    2c86:	8d 93       	st	X+, r24
    2c88:	9c 93       	st	X, r25
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e9 54       	subi	r30, 0x49	; 73
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 81       	ld	r24, Z
    2c92:	91 81       	ldd	r25, Z+1	; 0x01
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <key_print+0xbbc>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e9 54       	subi	r30, 0x49	; 73
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	80 83       	st	Z, r24

	case '4':
		_delay_ms(100);
		LCD_vidWriteString("4");
    2ca2:	8d e6       	ldi	r24, 0x6D	; 109
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('4');
    2caa:	84 e3       	ldi	r24, 0x34	; 52
    2cac:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	ed 54       	subi	r30, 0x4D	; 77
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	a8 e4       	ldi	r26, 0x48	; 72
    2cbc:	b3 e4       	ldi	r27, 0x43	; 67
    2cbe:	80 83       	st	Z, r24
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	a2 83       	std	Z+2, r26	; 0x02
    2cc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc6:	8e 01       	movw	r16, r28
    2cc8:	01 55       	subi	r16, 0x51	; 81
    2cca:	1f 4f       	sbci	r17, 0xFF	; 255
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ed 54       	subi	r30, 0x4D	; 77
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	60 81       	ld	r22, Z
    2cd4:	71 81       	ldd	r23, Z+1	; 0x01
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	4a ef       	ldi	r20, 0xFA	; 250
    2ce0:	54 e4       	ldi	r21, 0x44	; 68
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	f8 01       	movw	r30, r16
    2cec:	80 83       	st	Z, r24
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	a2 83       	std	Z+2, r26	; 0x02
    2cf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e1 55       	subi	r30, 0x51	; 81
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	60 81       	ld	r22, Z
    2cfc:	71 81       	ldd	r23, Z+1	; 0x01
    2cfe:	82 81       	ldd	r24, Z+2	; 0x02
    2d00:	93 81       	ldd	r25, Z+3	; 0x03
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e8       	ldi	r20, 0x80	; 128
    2d08:	5f e3       	ldi	r21, 0x3F	; 63
    2d0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0e:	88 23       	and	r24, r24
    2d10:	44 f4       	brge	.+16     	; 0x2d22 <key_print+0xc4a>
		__ticks = 1;
    2d12:	fe 01       	movw	r30, r28
    2d14:	e3 55       	subi	r30, 0x53	; 83
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
    2d20:	64 c0       	rjmp	.+200    	; 0x2dea <key_print+0xd12>
	else if (__tmp > 65535)
    2d22:	fe 01       	movw	r30, r28
    2d24:	e1 55       	subi	r30, 0x51	; 81
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	60 81       	ld	r22, Z
    2d2a:	71 81       	ldd	r23, Z+1	; 0x01
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
    2d2e:	93 81       	ldd	r25, Z+3	; 0x03
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	3f ef       	ldi	r19, 0xFF	; 255
    2d34:	4f e7       	ldi	r20, 0x7F	; 127
    2d36:	57 e4       	ldi	r21, 0x47	; 71
    2d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3c:	18 16       	cp	r1, r24
    2d3e:	0c f0       	brlt	.+2      	; 0x2d42 <key_print+0xc6a>
    2d40:	43 c0       	rjmp	.+134    	; 0x2dc8 <key_print+0xcf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d42:	fe 01       	movw	r30, r28
    2d44:	ed 54       	subi	r30, 0x4D	; 77
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	60 81       	ld	r22, Z
    2d4a:	71 81       	ldd	r23, Z+1	; 0x01
    2d4c:	82 81       	ldd	r24, Z+2	; 0x02
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	8e 01       	movw	r16, r28
    2d62:	03 55       	subi	r16, 0x53	; 83
    2d64:	1f 4f       	sbci	r17, 0xFF	; 255
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	f8 01       	movw	r30, r16
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	80 83       	st	Z, r24
    2d78:	1f c0       	rjmp	.+62     	; 0x2db8 <key_print+0xce0>
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e5 55       	subi	r30, 0x55	; 85
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	88 ec       	ldi	r24, 0xC8	; 200
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	80 83       	st	Z, r24
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e5 55       	subi	r30, 0x55	; 85
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <key_print+0xcba>
    2d96:	fe 01       	movw	r30, r28
    2d98:	e5 55       	subi	r30, 0x55	; 85
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da0:	de 01       	movw	r26, r28
    2da2:	a3 55       	subi	r26, 0x53	; 83
    2da4:	bf 4f       	sbci	r27, 0xFF	; 255
    2da6:	fe 01       	movw	r30, r28
    2da8:	e3 55       	subi	r30, 0x53	; 83
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	11 96       	adiw	r26, 0x01	; 1
    2db4:	9c 93       	st	X, r25
    2db6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db8:	fe 01       	movw	r30, r28
    2dba:	e3 55       	subi	r30, 0x53	; 83
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 81       	ld	r24, Z
    2dc0:	91 81       	ldd	r25, Z+1	; 0x01
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	d1 f6       	brne	.-76     	; 0x2d7a <key_print+0xca2>
    2dc6:	27 c0       	rjmp	.+78     	; 0x2e16 <key_print+0xd3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc8:	8e 01       	movw	r16, r28
    2dca:	03 55       	subi	r16, 0x53	; 83
    2dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e1 55       	subi	r30, 0x51	; 81
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	60 81       	ld	r22, Z
    2dd6:	71 81       	ldd	r23, Z+1	; 0x01
    2dd8:	82 81       	ldd	r24, Z+2	; 0x02
    2dda:	93 81       	ldd	r25, Z+3	; 0x03
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	f8 01       	movw	r30, r16
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	80 83       	st	Z, r24
    2dea:	de 01       	movw	r26, r28
    2dec:	a7 55       	subi	r26, 0x57	; 87
    2dee:	bf 4f       	sbci	r27, 0xFF	; 255
    2df0:	fe 01       	movw	r30, r28
    2df2:	e3 55       	subi	r30, 0x53	; 83
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	8d 93       	st	X+, r24
    2dfc:	9c 93       	st	X, r25
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e7 55       	subi	r30, 0x57	; 87
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 81       	ld	r24, Z
    2e06:	91 81       	ldd	r25, Z+1	; 0x01
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <key_print+0xd30>
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	e7 55       	subi	r30, 0x57	; 87
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    2e16:	90 91 c5 00 	lds	r25, 0x00C5
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	69 2f       	mov	r22, r25
    2e1e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    2e22:	80 91 c6 00 	lds	r24, 0x00C6
    2e26:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    2e2a:	80 91 c5 00 	lds	r24, 0x00C5
    2e2e:	8f 5f       	subi	r24, 0xFF	; 255
    2e30:	80 93 c5 00 	sts	0x00C5, r24
    2e34:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <key_print+0x1ce2>
		break ;
    2e38:	fe 01       	movw	r30, r28
    2e3a:	eb 55       	subi	r30, 0x5B	; 91
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	a8 ec       	ldi	r26, 0xC8	; 200
    2e44:	b2 e4       	ldi	r27, 0x42	; 66
    2e46:	80 83       	st	Z, r24
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	a2 83       	std	Z+2, r26	; 0x02
    2e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4e:	8e 01       	movw	r16, r28
    2e50:	0f 55       	subi	r16, 0x5F	; 95
    2e52:	1f 4f       	sbci	r17, 0xFF	; 255
    2e54:	fe 01       	movw	r30, r28
    2e56:	eb 55       	subi	r30, 0x5B	; 91
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	60 81       	ld	r22, Z
    2e5c:	71 81       	ldd	r23, Z+1	; 0x01
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	93 81       	ldd	r25, Z+3	; 0x03
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4a ef       	ldi	r20, 0xFA	; 250
    2e68:	54 e4       	ldi	r21, 0x44	; 68
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	f8 01       	movw	r30, r16
    2e74:	80 83       	st	Z, r24
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	a2 83       	std	Z+2, r26	; 0x02
    2e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ef 55       	subi	r30, 0x5F	; 95
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e8       	ldi	r20, 0x80	; 128
    2e90:	5f e3       	ldi	r21, 0x3F	; 63
    2e92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e96:	88 23       	and	r24, r24
    2e98:	44 f4       	brge	.+16     	; 0x2eaa <key_print+0xdd2>
		__ticks = 1;
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e1 56       	subi	r30, 0x61	; 97
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	80 83       	st	Z, r24
    2ea8:	64 c0       	rjmp	.+200    	; 0x2f72 <key_print+0xe9a>
	else if (__tmp > 65535)
    2eaa:	fe 01       	movw	r30, r28
    2eac:	ef 55       	subi	r30, 0x5F	; 95
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	3f ef       	ldi	r19, 0xFF	; 255
    2ebc:	4f e7       	ldi	r20, 0x7F	; 127
    2ebe:	57 e4       	ldi	r21, 0x47	; 71
    2ec0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec4:	18 16       	cp	r1, r24
    2ec6:	0c f0       	brlt	.+2      	; 0x2eca <key_print+0xdf2>
    2ec8:	43 c0       	rjmp	.+134    	; 0x2f50 <key_print+0xe78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eca:	fe 01       	movw	r30, r28
    2ecc:	eb 55       	subi	r30, 0x5B	; 91
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	8e 01       	movw	r16, r28
    2eea:	01 56       	subi	r16, 0x61	; 97
    2eec:	1f 4f       	sbci	r17, 0xFF	; 255
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	f8 01       	movw	r30, r16
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	80 83       	st	Z, r24
    2f00:	1f c0       	rjmp	.+62     	; 0x2f40 <key_print+0xe68>
    2f02:	fe 01       	movw	r30, r28
    2f04:	e3 56       	subi	r30, 0x63	; 99
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	88 ec       	ldi	r24, 0xC8	; 200
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
    2f10:	fe 01       	movw	r30, r28
    2f12:	e3 56       	subi	r30, 0x63	; 99
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <key_print+0xe42>
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e3 56       	subi	r30, 0x63	; 99
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f28:	de 01       	movw	r26, r28
    2f2a:	a1 56       	subi	r26, 0x61	; 97
    2f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e1 56       	subi	r30, 0x61	; 97
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 81       	ld	r24, Z
    2f36:	91 81       	ldd	r25, Z+1	; 0x01
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	11 96       	adiw	r26, 0x01	; 1
    2f3c:	9c 93       	st	X, r25
    2f3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f40:	fe 01       	movw	r30, r28
    2f42:	e1 56       	subi	r30, 0x61	; 97
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	d1 f6       	brne	.-76     	; 0x2f02 <key_print+0xe2a>
    2f4e:	27 c0       	rjmp	.+78     	; 0x2f9e <key_print+0xec6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f50:	8e 01       	movw	r16, r28
    2f52:	01 56       	subi	r16, 0x61	; 97
    2f54:	1f 4f       	sbci	r17, 0xFF	; 255
    2f56:	fe 01       	movw	r30, r28
    2f58:	ef 55       	subi	r30, 0x5F	; 95
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	60 81       	ld	r22, Z
    2f5e:	71 81       	ldd	r23, Z+1	; 0x01
    2f60:	82 81       	ldd	r24, Z+2	; 0x02
    2f62:	93 81       	ldd	r25, Z+3	; 0x03
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
    2f72:	de 01       	movw	r26, r28
    2f74:	a5 56       	subi	r26, 0x65	; 101
    2f76:	bf 4f       	sbci	r27, 0xFF	; 255
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e1 56       	subi	r30, 0x61	; 97
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	80 81       	ld	r24, Z
    2f80:	91 81       	ldd	r25, Z+1	; 0x01
    2f82:	8d 93       	st	X+, r24
    2f84:	9c 93       	st	X, r25
    2f86:	fe 01       	movw	r30, r28
    2f88:	e5 56       	subi	r30, 0x65	; 101
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <key_print+0xeb8>
    2f94:	fe 01       	movw	r30, r28
    2f96:	e5 56       	subi	r30, 0x65	; 101
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
	case '5':
		_delay_ms(100);
		LCD_vidWriteString("5");
    2f9e:	8f e6       	ldi	r24, 0x6F	; 111
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('5');
    2fa6:	85 e3       	ldi	r24, 0x35	; 53
    2fa8:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    2fac:	fe 01       	movw	r30, r28
    2fae:	e9 56       	subi	r30, 0x69	; 105
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a8 e4       	ldi	r26, 0x48	; 72
    2fb8:	b3 e4       	ldi	r27, 0x43	; 67
    2fba:	80 83       	st	Z, r24
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	a2 83       	std	Z+2, r26	; 0x02
    2fc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc2:	8e 01       	movw	r16, r28
    2fc4:	0d 56       	subi	r16, 0x6D	; 109
    2fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e9 56       	subi	r30, 0x69	; 105
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a ef       	ldi	r20, 0xFA	; 250
    2fdc:	54 e4       	ldi	r21, 0x44	; 68
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	80 83       	st	Z, r24
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	a2 83       	std	Z+2, r26	; 0x02
    2fee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	ed 56       	subi	r30, 0x6D	; 109
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	93 81       	ldd	r25, Z+3	; 0x03
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e8       	ldi	r20, 0x80	; 128
    3004:	5f e3       	ldi	r21, 0x3F	; 63
    3006:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    300a:	88 23       	and	r24, r24
    300c:	44 f4       	brge	.+16     	; 0x301e <key_print+0xf46>
		__ticks = 1;
    300e:	fe 01       	movw	r30, r28
    3010:	ef 56       	subi	r30, 0x6F	; 111
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
    301c:	64 c0       	rjmp	.+200    	; 0x30e6 <key_print+0x100e>
	else if (__tmp > 65535)
    301e:	fe 01       	movw	r30, r28
    3020:	ed 56       	subi	r30, 0x6D	; 109
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	60 81       	ld	r22, Z
    3026:	71 81       	ldd	r23, Z+1	; 0x01
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	3f ef       	ldi	r19, 0xFF	; 255
    3030:	4f e7       	ldi	r20, 0x7F	; 127
    3032:	57 e4       	ldi	r21, 0x47	; 71
    3034:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3038:	18 16       	cp	r1, r24
    303a:	0c f0       	brlt	.+2      	; 0x303e <key_print+0xf66>
    303c:	43 c0       	rjmp	.+134    	; 0x30c4 <key_print+0xfec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303e:	fe 01       	movw	r30, r28
    3040:	e9 56       	subi	r30, 0x69	; 105
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	82 81       	ldd	r24, Z+2	; 0x02
    304a:	93 81       	ldd	r25, Z+3	; 0x03
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	40 e2       	ldi	r20, 0x20	; 32
    3052:	51 e4       	ldi	r21, 0x41	; 65
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8e 01       	movw	r16, r28
    305e:	0f 56       	subi	r16, 0x6F	; 111
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	f8 01       	movw	r30, r16
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	80 83       	st	Z, r24
    3074:	1f c0       	rjmp	.+62     	; 0x30b4 <key_print+0xfdc>
    3076:	fe 01       	movw	r30, r28
    3078:	e1 57       	subi	r30, 0x71	; 113
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	88 ec       	ldi	r24, 0xC8	; 200
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	91 83       	std	Z+1, r25	; 0x01
    3082:	80 83       	st	Z, r24
    3084:	fe 01       	movw	r30, r28
    3086:	e1 57       	subi	r30, 0x71	; 113
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <key_print+0xfb6>
    3092:	fe 01       	movw	r30, r28
    3094:	e1 57       	subi	r30, 0x71	; 113
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309c:	de 01       	movw	r26, r28
    309e:	af 56       	subi	r26, 0x6F	; 111
    30a0:	bf 4f       	sbci	r27, 0xFF	; 255
    30a2:	fe 01       	movw	r30, r28
    30a4:	ef 56       	subi	r30, 0x6F	; 111
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	11 96       	adiw	r26, 0x01	; 1
    30b0:	9c 93       	st	X, r25
    30b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b4:	fe 01       	movw	r30, r28
    30b6:	ef 56       	subi	r30, 0x6F	; 111
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	91 81       	ldd	r25, Z+1	; 0x01
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	d1 f6       	brne	.-76     	; 0x3076 <key_print+0xf9e>
    30c2:	27 c0       	rjmp	.+78     	; 0x3112 <key_print+0x103a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c4:	8e 01       	movw	r16, r28
    30c6:	0f 56       	subi	r16, 0x6F	; 111
    30c8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ca:	fe 01       	movw	r30, r28
    30cc:	ed 56       	subi	r30, 0x6D	; 109
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	f8 01       	movw	r30, r16
    30e2:	91 83       	std	Z+1, r25	; 0x01
    30e4:	80 83       	st	Z, r24
    30e6:	de 01       	movw	r26, r28
    30e8:	a3 57       	subi	r26, 0x73	; 115
    30ea:	bf 4f       	sbci	r27, 0xFF	; 255
    30ec:	fe 01       	movw	r30, r28
    30ee:	ef 56       	subi	r30, 0x6F	; 111
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	8d 93       	st	X+, r24
    30f8:	9c 93       	st	X, r25
    30fa:	fe 01       	movw	r30, r28
    30fc:	e3 57       	subi	r30, 0x73	; 115
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <key_print+0x102c>
    3108:	fe 01       	movw	r30, r28
    310a:	e3 57       	subi	r30, 0x73	; 115
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    3112:	90 91 c5 00 	lds	r25, 0x00C5
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	69 2f       	mov	r22, r25
    311a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    311e:	80 91 c6 00 	lds	r24, 0x00C6
    3122:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    3126:	80 91 c5 00 	lds	r24, 0x00C5
    312a:	8f 5f       	subi	r24, 0xFF	; 255
    312c:	80 93 c5 00 	sts	0x00C5, r24
    3130:	44 c6       	rjmp	.+3208   	; 0x3dba <key_print+0x1ce2>
		break ;
    3132:	fe 01       	movw	r30, r28
    3134:	e7 57       	subi	r30, 0x77	; 119
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	a8 ec       	ldi	r26, 0xC8	; 200
    313e:	b2 e4       	ldi	r27, 0x42	; 66
    3140:	80 83       	st	Z, r24
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	a2 83       	std	Z+2, r26	; 0x02
    3146:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3148:	8e 01       	movw	r16, r28
    314a:	0b 57       	subi	r16, 0x7B	; 123
    314c:	1f 4f       	sbci	r17, 0xFF	; 255
    314e:	fe 01       	movw	r30, r28
    3150:	e7 57       	subi	r30, 0x77	; 119
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	60 81       	ld	r22, Z
    3156:	71 81       	ldd	r23, Z+1	; 0x01
    3158:	82 81       	ldd	r24, Z+2	; 0x02
    315a:	93 81       	ldd	r25, Z+3	; 0x03
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	4a ef       	ldi	r20, 0xFA	; 250
    3162:	54 e4       	ldi	r21, 0x44	; 68
    3164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	f8 01       	movw	r30, r16
    316e:	80 83       	st	Z, r24
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	a2 83       	std	Z+2, r26	; 0x02
    3174:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3176:	fe 01       	movw	r30, r28
    3178:	eb 57       	subi	r30, 0x7B	; 123
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	60 81       	ld	r22, Z
    317e:	71 81       	ldd	r23, Z+1	; 0x01
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	93 81       	ldd	r25, Z+3	; 0x03
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	44 f4       	brge	.+16     	; 0x31a4 <key_print+0x10cc>
		__ticks = 1;
    3194:	fe 01       	movw	r30, r28
    3196:	ed 57       	subi	r30, 0x7D	; 125
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	80 83       	st	Z, r24
    31a2:	64 c0       	rjmp	.+200    	; 0x326c <key_print+0x1194>
	else if (__tmp > 65535)
    31a4:	fe 01       	movw	r30, r28
    31a6:	eb 57       	subi	r30, 0x7B	; 123
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	60 81       	ld	r22, Z
    31ac:	71 81       	ldd	r23, Z+1	; 0x01
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	0c f0       	brlt	.+2      	; 0x31c4 <key_print+0x10ec>
    31c2:	43 c0       	rjmp	.+134    	; 0x324a <key_print+0x1172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c4:	fe 01       	movw	r30, r28
    31c6:	e7 57       	subi	r30, 0x77	; 119
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	60 81       	ld	r22, Z
    31cc:	71 81       	ldd	r23, Z+1	; 0x01
    31ce:	82 81       	ldd	r24, Z+2	; 0x02
    31d0:	93 81       	ldd	r25, Z+3	; 0x03
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e2       	ldi	r20, 0x20	; 32
    31d8:	51 e4       	ldi	r21, 0x41	; 65
    31da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	8e 01       	movw	r16, r28
    31e4:	0d 57       	subi	r16, 0x7D	; 125
    31e6:	1f 4f       	sbci	r17, 0xFF	; 255
    31e8:	bc 01       	movw	r22, r24
    31ea:	cd 01       	movw	r24, r26
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	f8 01       	movw	r30, r16
    31f6:	91 83       	std	Z+1, r25	; 0x01
    31f8:	80 83       	st	Z, r24
    31fa:	1f c0       	rjmp	.+62     	; 0x323a <key_print+0x1162>
    31fc:	fe 01       	movw	r30, r28
    31fe:	ef 57       	subi	r30, 0x7F	; 127
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	88 ec       	ldi	r24, 0xC8	; 200
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	80 83       	st	Z, r24
    320a:	fe 01       	movw	r30, r28
    320c:	ef 57       	subi	r30, 0x7F	; 127
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 81       	ld	r24, Z
    3212:	91 81       	ldd	r25, Z+1	; 0x01
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <key_print+0x113c>
    3218:	fe 01       	movw	r30, r28
    321a:	ef 57       	subi	r30, 0x7F	; 127
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3222:	de 01       	movw	r26, r28
    3224:	ad 57       	subi	r26, 0x7D	; 125
    3226:	bf 4f       	sbci	r27, 0xFF	; 255
    3228:	fe 01       	movw	r30, r28
    322a:	ed 57       	subi	r30, 0x7D	; 125
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	80 81       	ld	r24, Z
    3230:	91 81       	ldd	r25, Z+1	; 0x01
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	11 96       	adiw	r26, 0x01	; 1
    3236:	9c 93       	st	X, r25
    3238:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323a:	fe 01       	movw	r30, r28
    323c:	ed 57       	subi	r30, 0x7D	; 125
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 81       	ld	r24, Z
    3242:	91 81       	ldd	r25, Z+1	; 0x01
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	d1 f6       	brne	.-76     	; 0x31fc <key_print+0x1124>
    3248:	27 c0       	rjmp	.+78     	; 0x3298 <key_print+0x11c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324a:	8e 01       	movw	r16, r28
    324c:	0d 57       	subi	r16, 0x7D	; 125
    324e:	1f 4f       	sbci	r17, 0xFF	; 255
    3250:	fe 01       	movw	r30, r28
    3252:	eb 57       	subi	r30, 0x7B	; 123
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	60 81       	ld	r22, Z
    3258:	71 81       	ldd	r23, Z+1	; 0x01
    325a:	82 81       	ldd	r24, Z+2	; 0x02
    325c:	93 81       	ldd	r25, Z+3	; 0x03
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	f8 01       	movw	r30, r16
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
    326c:	de 01       	movw	r26, r28
    326e:	a1 58       	subi	r26, 0x81	; 129
    3270:	bf 4f       	sbci	r27, 0xFF	; 255
    3272:	fe 01       	movw	r30, r28
    3274:	ed 57       	subi	r30, 0x7D	; 125
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	8d 93       	st	X+, r24
    327e:	9c 93       	st	X, r25
    3280:	fe 01       	movw	r30, r28
    3282:	e1 58       	subi	r30, 0x81	; 129
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 81       	ld	r24, Z
    3288:	91 81       	ldd	r25, Z+1	; 0x01
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <key_print+0x11b2>
    328e:	fe 01       	movw	r30, r28
    3290:	e1 58       	subi	r30, 0x81	; 129
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	91 83       	std	Z+1, r25	; 0x01
    3296:	80 83       	st	Z, r24
	case '6':
		_delay_ms(100);
		LCD_vidWriteString("6");
    3298:	81 e7       	ldi	r24, 0x71	; 113
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('6');
    32a0:	86 e3       	ldi	r24, 0x36	; 54
    32a2:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    32a6:	fe 01       	movw	r30, r28
    32a8:	e5 58       	subi	r30, 0x85	; 133
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a8 e4       	ldi	r26, 0x48	; 72
    32b2:	b3 e4       	ldi	r27, 0x43	; 67
    32b4:	80 83       	st	Z, r24
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	a2 83       	std	Z+2, r26	; 0x02
    32ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	8e 01       	movw	r16, r28
    32be:	09 58       	subi	r16, 0x89	; 137
    32c0:	1f 4f       	sbci	r17, 0xFF	; 255
    32c2:	fe 01       	movw	r30, r28
    32c4:	e5 58       	subi	r30, 0x85	; 133
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	60 81       	ld	r22, Z
    32ca:	71 81       	ldd	r23, Z+1	; 0x01
    32cc:	82 81       	ldd	r24, Z+2	; 0x02
    32ce:	93 81       	ldd	r25, Z+3	; 0x03
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a ef       	ldi	r20, 0xFA	; 250
    32d6:	54 e4       	ldi	r21, 0x44	; 68
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	f8 01       	movw	r30, r16
    32e2:	80 83       	st	Z, r24
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	a2 83       	std	Z+2, r26	; 0x02
    32e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32ea:	fe 01       	movw	r30, r28
    32ec:	e9 58       	subi	r30, 0x89	; 137
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e8       	ldi	r20, 0x80	; 128
    32fe:	5f e3       	ldi	r21, 0x3F	; 63
    3300:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3304:	88 23       	and	r24, r24
    3306:	44 f4       	brge	.+16     	; 0x3318 <key_print+0x1240>
		__ticks = 1;
    3308:	fe 01       	movw	r30, r28
    330a:	eb 58       	subi	r30, 0x8B	; 139
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	80 83       	st	Z, r24
    3316:	64 c0       	rjmp	.+200    	; 0x33e0 <key_print+0x1308>
	else if (__tmp > 65535)
    3318:	fe 01       	movw	r30, r28
    331a:	e9 58       	subi	r30, 0x89	; 137
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	82 81       	ldd	r24, Z+2	; 0x02
    3324:	93 81       	ldd	r25, Z+3	; 0x03
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	3f ef       	ldi	r19, 0xFF	; 255
    332a:	4f e7       	ldi	r20, 0x7F	; 127
    332c:	57 e4       	ldi	r21, 0x47	; 71
    332e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3332:	18 16       	cp	r1, r24
    3334:	0c f0       	brlt	.+2      	; 0x3338 <key_print+0x1260>
    3336:	43 c0       	rjmp	.+134    	; 0x33be <key_print+0x12e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3338:	fe 01       	movw	r30, r28
    333a:	e5 58       	subi	r30, 0x85	; 133
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	60 81       	ld	r22, Z
    3340:	71 81       	ldd	r23, Z+1	; 0x01
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	93 81       	ldd	r25, Z+3	; 0x03
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e2       	ldi	r20, 0x20	; 32
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8e 01       	movw	r16, r28
    3358:	0b 58       	subi	r16, 0x8B	; 139
    335a:	1f 4f       	sbci	r17, 0xFF	; 255
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	f8 01       	movw	r30, r16
    336a:	91 83       	std	Z+1, r25	; 0x01
    336c:	80 83       	st	Z, r24
    336e:	1f c0       	rjmp	.+62     	; 0x33ae <key_print+0x12d6>
    3370:	fe 01       	movw	r30, r28
    3372:	ed 58       	subi	r30, 0x8D	; 141
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	88 ec       	ldi	r24, 0xC8	; 200
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	80 83       	st	Z, r24
    337e:	fe 01       	movw	r30, r28
    3380:	ed 58       	subi	r30, 0x8D	; 141
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	80 81       	ld	r24, Z
    3386:	91 81       	ldd	r25, Z+1	; 0x01
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <key_print+0x12b0>
    338c:	fe 01       	movw	r30, r28
    338e:	ed 58       	subi	r30, 0x8D	; 141
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3396:	de 01       	movw	r26, r28
    3398:	ab 58       	subi	r26, 0x8B	; 139
    339a:	bf 4f       	sbci	r27, 0xFF	; 255
    339c:	fe 01       	movw	r30, r28
    339e:	eb 58       	subi	r30, 0x8B	; 139
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	80 81       	ld	r24, Z
    33a4:	91 81       	ldd	r25, Z+1	; 0x01
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	11 96       	adiw	r26, 0x01	; 1
    33aa:	9c 93       	st	X, r25
    33ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ae:	fe 01       	movw	r30, r28
    33b0:	eb 58       	subi	r30, 0x8B	; 139
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	80 81       	ld	r24, Z
    33b6:	91 81       	ldd	r25, Z+1	; 0x01
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	d1 f6       	brne	.-76     	; 0x3370 <key_print+0x1298>
    33bc:	27 c0       	rjmp	.+78     	; 0x340c <key_print+0x1334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33be:	8e 01       	movw	r16, r28
    33c0:	0b 58       	subi	r16, 0x8B	; 139
    33c2:	1f 4f       	sbci	r17, 0xFF	; 255
    33c4:	fe 01       	movw	r30, r28
    33c6:	e9 58       	subi	r30, 0x89	; 137
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	f8 01       	movw	r30, r16
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	80 83       	st	Z, r24
    33e0:	de 01       	movw	r26, r28
    33e2:	af 58       	subi	r26, 0x8F	; 143
    33e4:	bf 4f       	sbci	r27, 0xFF	; 255
    33e6:	fe 01       	movw	r30, r28
    33e8:	eb 58       	subi	r30, 0x8B	; 139
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	8d 93       	st	X+, r24
    33f2:	9c 93       	st	X, r25
    33f4:	fe 01       	movw	r30, r28
    33f6:	ef 58       	subi	r30, 0x8F	; 143
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	80 81       	ld	r24, Z
    33fc:	91 81       	ldd	r25, Z+1	; 0x01
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <key_print+0x1326>
    3402:	fe 01       	movw	r30, r28
    3404:	ef 58       	subi	r30, 0x8F	; 143
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    340c:	90 91 c5 00 	lds	r25, 0x00C5
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	69 2f       	mov	r22, r25
    3414:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    3418:	80 91 c6 00 	lds	r24, 0x00C6
    341c:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    3420:	80 91 c5 00 	lds	r24, 0x00C5
    3424:	8f 5f       	subi	r24, 0xFF	; 255
    3426:	80 93 c5 00 	sts	0x00C5, r24
    342a:	c7 c4       	rjmp	.+2446   	; 0x3dba <key_print+0x1ce2>
		break ;
    342c:	fe 01       	movw	r30, r28
    342e:	e3 59       	subi	r30, 0x93	; 147
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	a8 ec       	ldi	r26, 0xC8	; 200
    3438:	b2 e4       	ldi	r27, 0x42	; 66
    343a:	80 83       	st	Z, r24
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	a2 83       	std	Z+2, r26	; 0x02
    3440:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3442:	8e 01       	movw	r16, r28
    3444:	07 59       	subi	r16, 0x97	; 151
    3446:	1f 4f       	sbci	r17, 0xFF	; 255
    3448:	fe 01       	movw	r30, r28
    344a:	e3 59       	subi	r30, 0x93	; 147
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	60 81       	ld	r22, Z
    3450:	71 81       	ldd	r23, Z+1	; 0x01
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	93 81       	ldd	r25, Z+3	; 0x03
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	4a ef       	ldi	r20, 0xFA	; 250
    345c:	54 e4       	ldi	r21, 0x44	; 68
    345e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	f8 01       	movw	r30, r16
    3468:	80 83       	st	Z, r24
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	a2 83       	std	Z+2, r26	; 0x02
    346e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3470:	fe 01       	movw	r30, r28
    3472:	e7 59       	subi	r30, 0x97	; 151
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	60 81       	ld	r22, Z
    3478:	71 81       	ldd	r23, Z+1	; 0x01
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	93 81       	ldd	r25, Z+3	; 0x03
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	40 e8       	ldi	r20, 0x80	; 128
    3484:	5f e3       	ldi	r21, 0x3F	; 63
    3486:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    348a:	88 23       	and	r24, r24
    348c:	44 f4       	brge	.+16     	; 0x349e <key_print+0x13c6>
		__ticks = 1;
    348e:	fe 01       	movw	r30, r28
    3490:	e9 59       	subi	r30, 0x99	; 153
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24
    349c:	64 c0       	rjmp	.+200    	; 0x3566 <key_print+0x148e>
	else if (__tmp > 65535)
    349e:	fe 01       	movw	r30, r28
    34a0:	e7 59       	subi	r30, 0x97	; 151
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	60 81       	ld	r22, Z
    34a6:	71 81       	ldd	r23, Z+1	; 0x01
    34a8:	82 81       	ldd	r24, Z+2	; 0x02
    34aa:	93 81       	ldd	r25, Z+3	; 0x03
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	3f ef       	ldi	r19, 0xFF	; 255
    34b0:	4f e7       	ldi	r20, 0x7F	; 127
    34b2:	57 e4       	ldi	r21, 0x47	; 71
    34b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34b8:	18 16       	cp	r1, r24
    34ba:	0c f0       	brlt	.+2      	; 0x34be <key_print+0x13e6>
    34bc:	43 c0       	rjmp	.+134    	; 0x3544 <key_print+0x146c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34be:	fe 01       	movw	r30, r28
    34c0:	e3 59       	subi	r30, 0x93	; 147
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e2       	ldi	r20, 0x20	; 32
    34d2:	51 e4       	ldi	r21, 0x41	; 65
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	8e 01       	movw	r16, r28
    34de:	09 59       	subi	r16, 0x99	; 153
    34e0:	1f 4f       	sbci	r17, 0xFF	; 255
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	f8 01       	movw	r30, r16
    34f0:	91 83       	std	Z+1, r25	; 0x01
    34f2:	80 83       	st	Z, r24
    34f4:	1f c0       	rjmp	.+62     	; 0x3534 <key_print+0x145c>
    34f6:	fe 01       	movw	r30, r28
    34f8:	eb 59       	subi	r30, 0x9B	; 155
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	88 ec       	ldi	r24, 0xC8	; 200
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	91 83       	std	Z+1, r25	; 0x01
    3502:	80 83       	st	Z, r24
    3504:	fe 01       	movw	r30, r28
    3506:	eb 59       	subi	r30, 0x9B	; 155
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	80 81       	ld	r24, Z
    350c:	91 81       	ldd	r25, Z+1	; 0x01
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <key_print+0x1436>
    3512:	fe 01       	movw	r30, r28
    3514:	eb 59       	subi	r30, 0x9B	; 155
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351c:	de 01       	movw	r26, r28
    351e:	a9 59       	subi	r26, 0x99	; 153
    3520:	bf 4f       	sbci	r27, 0xFF	; 255
    3522:	fe 01       	movw	r30, r28
    3524:	e9 59       	subi	r30, 0x99	; 153
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	91 81       	ldd	r25, Z+1	; 0x01
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	11 96       	adiw	r26, 0x01	; 1
    3530:	9c 93       	st	X, r25
    3532:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3534:	fe 01       	movw	r30, r28
    3536:	e9 59       	subi	r30, 0x99	; 153
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	80 81       	ld	r24, Z
    353c:	91 81       	ldd	r25, Z+1	; 0x01
    353e:	00 97       	sbiw	r24, 0x00	; 0
    3540:	d1 f6       	brne	.-76     	; 0x34f6 <key_print+0x141e>
    3542:	27 c0       	rjmp	.+78     	; 0x3592 <key_print+0x14ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3544:	8e 01       	movw	r16, r28
    3546:	09 59       	subi	r16, 0x99	; 153
    3548:	1f 4f       	sbci	r17, 0xFF	; 255
    354a:	fe 01       	movw	r30, r28
    354c:	e7 59       	subi	r30, 0x97	; 151
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	f8 01       	movw	r30, r16
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
    3566:	de 01       	movw	r26, r28
    3568:	ad 59       	subi	r26, 0x9D	; 157
    356a:	bf 4f       	sbci	r27, 0xFF	; 255
    356c:	fe 01       	movw	r30, r28
    356e:	e9 59       	subi	r30, 0x99	; 153
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	8d 93       	st	X+, r24
    3578:	9c 93       	st	X, r25
    357a:	fe 01       	movw	r30, r28
    357c:	ed 59       	subi	r30, 0x9D	; 157
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <key_print+0x14ac>
    3588:	fe 01       	movw	r30, r28
    358a:	ed 59       	subi	r30, 0x9D	; 157
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
	case '7':
		_delay_ms(100);
		LCD_vidWriteString("7");
    3592:	83 e7       	ldi	r24, 0x73	; 115
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('7');
    359a:	87 e3       	ldi	r24, 0x37	; 55
    359c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    35a0:	fe 01       	movw	r30, r28
    35a2:	e1 5a       	subi	r30, 0xA1	; 161
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	a8 e4       	ldi	r26, 0x48	; 72
    35ac:	b3 e4       	ldi	r27, 0x43	; 67
    35ae:	80 83       	st	Z, r24
    35b0:	91 83       	std	Z+1, r25	; 0x01
    35b2:	a2 83       	std	Z+2, r26	; 0x02
    35b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b6:	8e 01       	movw	r16, r28
    35b8:	05 5a       	subi	r16, 0xA5	; 165
    35ba:	1f 4f       	sbci	r17, 0xFF	; 255
    35bc:	fe 01       	movw	r30, r28
    35be:	e1 5a       	subi	r30, 0xA1	; 161
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	60 81       	ld	r22, Z
    35c4:	71 81       	ldd	r23, Z+1	; 0x01
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	93 81       	ldd	r25, Z+3	; 0x03
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	4a ef       	ldi	r20, 0xFA	; 250
    35d0:	54 e4       	ldi	r21, 0x44	; 68
    35d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	f8 01       	movw	r30, r16
    35dc:	80 83       	st	Z, r24
    35de:	91 83       	std	Z+1, r25	; 0x01
    35e0:	a2 83       	std	Z+2, r26	; 0x02
    35e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35e4:	fe 01       	movw	r30, r28
    35e6:	e5 5a       	subi	r30, 0xA5	; 165
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	60 81       	ld	r22, Z
    35ec:	71 81       	ldd	r23, Z+1	; 0x01
    35ee:	82 81       	ldd	r24, Z+2	; 0x02
    35f0:	93 81       	ldd	r25, Z+3	; 0x03
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	40 e8       	ldi	r20, 0x80	; 128
    35f8:	5f e3       	ldi	r21, 0x3F	; 63
    35fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35fe:	88 23       	and	r24, r24
    3600:	44 f4       	brge	.+16     	; 0x3612 <key_print+0x153a>
		__ticks = 1;
    3602:	fe 01       	movw	r30, r28
    3604:	e7 5a       	subi	r30, 0xA7	; 167
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	80 83       	st	Z, r24
    3610:	64 c0       	rjmp	.+200    	; 0x36da <key_print+0x1602>
	else if (__tmp > 65535)
    3612:	fe 01       	movw	r30, r28
    3614:	e5 5a       	subi	r30, 0xA5	; 165
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	60 81       	ld	r22, Z
    361a:	71 81       	ldd	r23, Z+1	; 0x01
    361c:	82 81       	ldd	r24, Z+2	; 0x02
    361e:	93 81       	ldd	r25, Z+3	; 0x03
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	3f ef       	ldi	r19, 0xFF	; 255
    3624:	4f e7       	ldi	r20, 0x7F	; 127
    3626:	57 e4       	ldi	r21, 0x47	; 71
    3628:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    362c:	18 16       	cp	r1, r24
    362e:	0c f0       	brlt	.+2      	; 0x3632 <key_print+0x155a>
    3630:	43 c0       	rjmp	.+134    	; 0x36b8 <key_print+0x15e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3632:	fe 01       	movw	r30, r28
    3634:	e1 5a       	subi	r30, 0xA1	; 161
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	60 81       	ld	r22, Z
    363a:	71 81       	ldd	r23, Z+1	; 0x01
    363c:	82 81       	ldd	r24, Z+2	; 0x02
    363e:	93 81       	ldd	r25, Z+3	; 0x03
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e2       	ldi	r20, 0x20	; 32
    3646:	51 e4       	ldi	r21, 0x41	; 65
    3648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	8e 01       	movw	r16, r28
    3652:	07 5a       	subi	r16, 0xA7	; 167
    3654:	1f 4f       	sbci	r17, 0xFF	; 255
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	f8 01       	movw	r30, r16
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	80 83       	st	Z, r24
    3668:	1f c0       	rjmp	.+62     	; 0x36a8 <key_print+0x15d0>
    366a:	fe 01       	movw	r30, r28
    366c:	e9 5a       	subi	r30, 0xA9	; 169
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	88 ec       	ldi	r24, 0xC8	; 200
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	80 83       	st	Z, r24
    3678:	fe 01       	movw	r30, r28
    367a:	e9 5a       	subi	r30, 0xA9	; 169
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	80 81       	ld	r24, Z
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	f1 f7       	brne	.-4      	; 0x3682 <key_print+0x15aa>
    3686:	fe 01       	movw	r30, r28
    3688:	e9 5a       	subi	r30, 0xA9	; 169
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	91 83       	std	Z+1, r25	; 0x01
    368e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3690:	de 01       	movw	r26, r28
    3692:	a7 5a       	subi	r26, 0xA7	; 167
    3694:	bf 4f       	sbci	r27, 0xFF	; 255
    3696:	fe 01       	movw	r30, r28
    3698:	e7 5a       	subi	r30, 0xA7	; 167
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	80 81       	ld	r24, Z
    369e:	91 81       	ldd	r25, Z+1	; 0x01
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	11 96       	adiw	r26, 0x01	; 1
    36a4:	9c 93       	st	X, r25
    36a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a8:	fe 01       	movw	r30, r28
    36aa:	e7 5a       	subi	r30, 0xA7	; 167
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 81       	ld	r24, Z
    36b0:	91 81       	ldd	r25, Z+1	; 0x01
    36b2:	00 97       	sbiw	r24, 0x00	; 0
    36b4:	d1 f6       	brne	.-76     	; 0x366a <key_print+0x1592>
    36b6:	27 c0       	rjmp	.+78     	; 0x3706 <key_print+0x162e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b8:	8e 01       	movw	r16, r28
    36ba:	07 5a       	subi	r16, 0xA7	; 167
    36bc:	1f 4f       	sbci	r17, 0xFF	; 255
    36be:	fe 01       	movw	r30, r28
    36c0:	e5 5a       	subi	r30, 0xA5	; 165
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	60 81       	ld	r22, Z
    36c6:	71 81       	ldd	r23, Z+1	; 0x01
    36c8:	82 81       	ldd	r24, Z+2	; 0x02
    36ca:	93 81       	ldd	r25, Z+3	; 0x03
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	f8 01       	movw	r30, r16
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	80 83       	st	Z, r24
    36da:	de 01       	movw	r26, r28
    36dc:	ab 5a       	subi	r26, 0xAB	; 171
    36de:	bf 4f       	sbci	r27, 0xFF	; 255
    36e0:	fe 01       	movw	r30, r28
    36e2:	e7 5a       	subi	r30, 0xA7	; 167
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
    36ea:	8d 93       	st	X+, r24
    36ec:	9c 93       	st	X, r25
    36ee:	fe 01       	movw	r30, r28
    36f0:	eb 5a       	subi	r30, 0xAB	; 171
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <key_print+0x1620>
    36fc:	fe 01       	movw	r30, r28
    36fe:	eb 5a       	subi	r30, 0xAB	; 171
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	91 83       	std	Z+1, r25	; 0x01
    3704:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    3706:	90 91 c5 00 	lds	r25, 0x00C5
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	69 2f       	mov	r22, r25
    370e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    3712:	80 91 c6 00 	lds	r24, 0x00C6
    3716:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    371a:	80 91 c5 00 	lds	r24, 0x00C5
    371e:	8f 5f       	subi	r24, 0xFF	; 255
    3720:	80 93 c5 00 	sts	0x00C5, r24
    3724:	4a c3       	rjmp	.+1684   	; 0x3dba <key_print+0x1ce2>
		break ;
    3726:	fe 01       	movw	r30, r28
    3728:	ef 5a       	subi	r30, 0xAF	; 175
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	a8 ec       	ldi	r26, 0xC8	; 200
    3732:	b2 e4       	ldi	r27, 0x42	; 66
    3734:	80 83       	st	Z, r24
    3736:	91 83       	std	Z+1, r25	; 0x01
    3738:	a2 83       	std	Z+2, r26	; 0x02
    373a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373c:	8e 01       	movw	r16, r28
    373e:	03 5b       	subi	r16, 0xB3	; 179
    3740:	1f 4f       	sbci	r17, 0xFF	; 255
    3742:	fe 01       	movw	r30, r28
    3744:	ef 5a       	subi	r30, 0xAF	; 175
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	60 81       	ld	r22, Z
    374a:	71 81       	ldd	r23, Z+1	; 0x01
    374c:	82 81       	ldd	r24, Z+2	; 0x02
    374e:	93 81       	ldd	r25, Z+3	; 0x03
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	4a ef       	ldi	r20, 0xFA	; 250
    3756:	54 e4       	ldi	r21, 0x44	; 68
    3758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	f8 01       	movw	r30, r16
    3762:	80 83       	st	Z, r24
    3764:	91 83       	std	Z+1, r25	; 0x01
    3766:	a2 83       	std	Z+2, r26	; 0x02
    3768:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    376a:	fe 01       	movw	r30, r28
    376c:	e3 5b       	subi	r30, 0xB3	; 179
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	60 81       	ld	r22, Z
    3772:	71 81       	ldd	r23, Z+1	; 0x01
    3774:	82 81       	ldd	r24, Z+2	; 0x02
    3776:	93 81       	ldd	r25, Z+3	; 0x03
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	40 e8       	ldi	r20, 0x80	; 128
    377e:	5f e3       	ldi	r21, 0x3F	; 63
    3780:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3784:	88 23       	and	r24, r24
    3786:	44 f4       	brge	.+16     	; 0x3798 <key_print+0x16c0>
		__ticks = 1;
    3788:	fe 01       	movw	r30, r28
    378a:	e5 5b       	subi	r30, 0xB5	; 181
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	91 83       	std	Z+1, r25	; 0x01
    3794:	80 83       	st	Z, r24
    3796:	64 c0       	rjmp	.+200    	; 0x3860 <key_print+0x1788>
	else if (__tmp > 65535)
    3798:	fe 01       	movw	r30, r28
    379a:	e3 5b       	subi	r30, 0xB3	; 179
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	60 81       	ld	r22, Z
    37a0:	71 81       	ldd	r23, Z+1	; 0x01
    37a2:	82 81       	ldd	r24, Z+2	; 0x02
    37a4:	93 81       	ldd	r25, Z+3	; 0x03
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	3f ef       	ldi	r19, 0xFF	; 255
    37aa:	4f e7       	ldi	r20, 0x7F	; 127
    37ac:	57 e4       	ldi	r21, 0x47	; 71
    37ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37b2:	18 16       	cp	r1, r24
    37b4:	0c f0       	brlt	.+2      	; 0x37b8 <key_print+0x16e0>
    37b6:	43 c0       	rjmp	.+134    	; 0x383e <key_print+0x1766>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b8:	fe 01       	movw	r30, r28
    37ba:	ef 5a       	subi	r30, 0xAF	; 175
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	60 81       	ld	r22, Z
    37c0:	71 81       	ldd	r23, Z+1	; 0x01
    37c2:	82 81       	ldd	r24, Z+2	; 0x02
    37c4:	93 81       	ldd	r25, Z+3	; 0x03
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e2       	ldi	r20, 0x20	; 32
    37cc:	51 e4       	ldi	r21, 0x41	; 65
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	8e 01       	movw	r16, r28
    37d8:	05 5b       	subi	r16, 0xB5	; 181
    37da:	1f 4f       	sbci	r17, 0xFF	; 255
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	f8 01       	movw	r30, r16
    37ea:	91 83       	std	Z+1, r25	; 0x01
    37ec:	80 83       	st	Z, r24
    37ee:	1f c0       	rjmp	.+62     	; 0x382e <key_print+0x1756>
    37f0:	fe 01       	movw	r30, r28
    37f2:	e7 5b       	subi	r30, 0xB7	; 183
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	88 ec       	ldi	r24, 0xC8	; 200
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	80 83       	st	Z, r24
    37fe:	fe 01       	movw	r30, r28
    3800:	e7 5b       	subi	r30, 0xB7	; 183
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	80 81       	ld	r24, Z
    3806:	91 81       	ldd	r25, Z+1	; 0x01
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <key_print+0x1730>
    380c:	fe 01       	movw	r30, r28
    380e:	e7 5b       	subi	r30, 0xB7	; 183
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	91 83       	std	Z+1, r25	; 0x01
    3814:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3816:	de 01       	movw	r26, r28
    3818:	a5 5b       	subi	r26, 0xB5	; 181
    381a:	bf 4f       	sbci	r27, 0xFF	; 255
    381c:	fe 01       	movw	r30, r28
    381e:	e5 5b       	subi	r30, 0xB5	; 181
    3820:	ff 4f       	sbci	r31, 0xFF	; 255
    3822:	80 81       	ld	r24, Z
    3824:	91 81       	ldd	r25, Z+1	; 0x01
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	11 96       	adiw	r26, 0x01	; 1
    382a:	9c 93       	st	X, r25
    382c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382e:	fe 01       	movw	r30, r28
    3830:	e5 5b       	subi	r30, 0xB5	; 181
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	80 81       	ld	r24, Z
    3836:	91 81       	ldd	r25, Z+1	; 0x01
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	d1 f6       	brne	.-76     	; 0x37f0 <key_print+0x1718>
    383c:	27 c0       	rjmp	.+78     	; 0x388c <key_print+0x17b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383e:	8e 01       	movw	r16, r28
    3840:	05 5b       	subi	r16, 0xB5	; 181
    3842:	1f 4f       	sbci	r17, 0xFF	; 255
    3844:	fe 01       	movw	r30, r28
    3846:	e3 5b       	subi	r30, 0xB3	; 179
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	60 81       	ld	r22, Z
    384c:	71 81       	ldd	r23, Z+1	; 0x01
    384e:	82 81       	ldd	r24, Z+2	; 0x02
    3850:	93 81       	ldd	r25, Z+3	; 0x03
    3852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	f8 01       	movw	r30, r16
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	80 83       	st	Z, r24
    3860:	de 01       	movw	r26, r28
    3862:	a9 5b       	subi	r26, 0xB9	; 185
    3864:	bf 4f       	sbci	r27, 0xFF	; 255
    3866:	fe 01       	movw	r30, r28
    3868:	e5 5b       	subi	r30, 0xB5	; 181
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	80 81       	ld	r24, Z
    386e:	91 81       	ldd	r25, Z+1	; 0x01
    3870:	8d 93       	st	X+, r24
    3872:	9c 93       	st	X, r25
    3874:	fe 01       	movw	r30, r28
    3876:	e9 5b       	subi	r30, 0xB9	; 185
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	80 81       	ld	r24, Z
    387c:	91 81       	ldd	r25, Z+1	; 0x01
    387e:	01 97       	sbiw	r24, 0x01	; 1
    3880:	f1 f7       	brne	.-4      	; 0x387e <key_print+0x17a6>
    3882:	fe 01       	movw	r30, r28
    3884:	e9 5b       	subi	r30, 0xB9	; 185
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	80 83       	st	Z, r24

	case '8':
		_delay_ms(100);
		LCD_vidWriteString("8");
    388c:	85 e7       	ldi	r24, 0x75	; 117
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('8');
    3894:	88 e3       	ldi	r24, 0x38	; 56
    3896:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    389a:	fe 01       	movw	r30, r28
    389c:	ed 5b       	subi	r30, 0xBD	; 189
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	a8 e4       	ldi	r26, 0x48	; 72
    38a6:	b3 e4       	ldi	r27, 0x43	; 67
    38a8:	80 83       	st	Z, r24
    38aa:	91 83       	std	Z+1, r25	; 0x01
    38ac:	a2 83       	std	Z+2, r26	; 0x02
    38ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b0:	8e 01       	movw	r16, r28
    38b2:	01 5c       	subi	r16, 0xC1	; 193
    38b4:	1f 4f       	sbci	r17, 0xFF	; 255
    38b6:	fe 01       	movw	r30, r28
    38b8:	ed 5b       	subi	r30, 0xBD	; 189
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	60 81       	ld	r22, Z
    38be:	71 81       	ldd	r23, Z+1	; 0x01
    38c0:	82 81       	ldd	r24, Z+2	; 0x02
    38c2:	93 81       	ldd	r25, Z+3	; 0x03
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	4a ef       	ldi	r20, 0xFA	; 250
    38ca:	54 e4       	ldi	r21, 0x44	; 68
    38cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	f8 01       	movw	r30, r16
    38d6:	80 83       	st	Z, r24
    38d8:	91 83       	std	Z+1, r25	; 0x01
    38da:	a2 83       	std	Z+2, r26	; 0x02
    38dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38de:	fe 01       	movw	r30, r28
    38e0:	ff 96       	adiw	r30, 0x3f	; 63
    38e2:	60 81       	ld	r22, Z
    38e4:	71 81       	ldd	r23, Z+1	; 0x01
    38e6:	82 81       	ldd	r24, Z+2	; 0x02
    38e8:	93 81       	ldd	r25, Z+3	; 0x03
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	40 e8       	ldi	r20, 0x80	; 128
    38f0:	5f e3       	ldi	r21, 0x3F	; 63
    38f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f6:	88 23       	and	r24, r24
    38f8:	2c f4       	brge	.+10     	; 0x3904 <key_print+0x182c>
		__ticks = 1;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	9e af       	std	Y+62, r25	; 0x3e
    3900:	8d af       	std	Y+61, r24	; 0x3d
    3902:	46 c0       	rjmp	.+140    	; 0x3990 <key_print+0x18b8>
	else if (__tmp > 65535)
    3904:	fe 01       	movw	r30, r28
    3906:	ff 96       	adiw	r30, 0x3f	; 63
    3908:	60 81       	ld	r22, Z
    390a:	71 81       	ldd	r23, Z+1	; 0x01
    390c:	82 81       	ldd	r24, Z+2	; 0x02
    390e:	93 81       	ldd	r25, Z+3	; 0x03
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	3f ef       	ldi	r19, 0xFF	; 255
    3914:	4f e7       	ldi	r20, 0x7F	; 127
    3916:	57 e4       	ldi	r21, 0x47	; 71
    3918:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    391c:	18 16       	cp	r1, r24
    391e:	64 f5       	brge	.+88     	; 0x3978 <key_print+0x18a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3920:	fe 01       	movw	r30, r28
    3922:	ed 5b       	subi	r30, 0xBD	; 189
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	60 81       	ld	r22, Z
    3928:	71 81       	ldd	r23, Z+1	; 0x01
    392a:	82 81       	ldd	r24, Z+2	; 0x02
    392c:	93 81       	ldd	r25, Z+3	; 0x03
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	40 e2       	ldi	r20, 0x20	; 32
    3934:	51 e4       	ldi	r21, 0x41	; 65
    3936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	bc 01       	movw	r22, r24
    3940:	cd 01       	movw	r24, r26
    3942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	9e af       	std	Y+62, r25	; 0x3e
    394c:	8d af       	std	Y+61, r24	; 0x3d
    394e:	0f c0       	rjmp	.+30     	; 0x396e <key_print+0x1896>
    3950:	88 ec       	ldi	r24, 0xC8	; 200
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	9c af       	std	Y+60, r25	; 0x3c
    3956:	8b af       	std	Y+59, r24	; 0x3b
    3958:	8b ad       	ldd	r24, Y+59	; 0x3b
    395a:	9c ad       	ldd	r25, Y+60	; 0x3c
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	f1 f7       	brne	.-4      	; 0x395c <key_print+0x1884>
    3960:	9c af       	std	Y+60, r25	; 0x3c
    3962:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3964:	8d ad       	ldd	r24, Y+61	; 0x3d
    3966:	9e ad       	ldd	r25, Y+62	; 0x3e
    3968:	01 97       	sbiw	r24, 0x01	; 1
    396a:	9e af       	std	Y+62, r25	; 0x3e
    396c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    396e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3970:	9e ad       	ldd	r25, Y+62	; 0x3e
    3972:	00 97       	sbiw	r24, 0x00	; 0
    3974:	69 f7       	brne	.-38     	; 0x3950 <key_print+0x1878>
    3976:	16 c0       	rjmp	.+44     	; 0x39a4 <key_print+0x18cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3978:	fe 01       	movw	r30, r28
    397a:	ff 96       	adiw	r30, 0x3f	; 63
    397c:	60 81       	ld	r22, Z
    397e:	71 81       	ldd	r23, Z+1	; 0x01
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	9e af       	std	Y+62, r25	; 0x3e
    398e:	8d af       	std	Y+61, r24	; 0x3d
    3990:	8d ad       	ldd	r24, Y+61	; 0x3d
    3992:	9e ad       	ldd	r25, Y+62	; 0x3e
    3994:	9a af       	std	Y+58, r25	; 0x3a
    3996:	89 af       	std	Y+57, r24	; 0x39
    3998:	89 ad       	ldd	r24, Y+57	; 0x39
    399a:	9a ad       	ldd	r25, Y+58	; 0x3a
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	f1 f7       	brne	.-4      	; 0x399c <key_print+0x18c4>
    39a0:	9a af       	std	Y+58, r25	; 0x3a
    39a2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    39a4:	90 91 c5 00 	lds	r25, 0x00C5
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	69 2f       	mov	r22, r25
    39ac:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    39b0:	80 91 c6 00 	lds	r24, 0x00C6
    39b4:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    39b8:	80 91 c5 00 	lds	r24, 0x00C5
    39bc:	8f 5f       	subi	r24, 0xFF	; 255
    39be:	80 93 c5 00 	sts	0x00C5, r24
    39c2:	fb c1       	rjmp	.+1014   	; 0x3dba <key_print+0x1ce2>
		break ;
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	aa ef       	ldi	r26, 0xFA	; 250
    39ca:	b3 e4       	ldi	r27, 0x43	; 67
    39cc:	8d ab       	std	Y+53, r24	; 0x35
    39ce:	9e ab       	std	Y+54, r25	; 0x36
    39d0:	af ab       	std	Y+55, r26	; 0x37
    39d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d4:	6d a9       	ldd	r22, Y+53	; 0x35
    39d6:	7e a9       	ldd	r23, Y+54	; 0x36
    39d8:	8f a9       	ldd	r24, Y+55	; 0x37
    39da:	98 ad       	ldd	r25, Y+56	; 0x38
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	4a ef       	ldi	r20, 0xFA	; 250
    39e2:	54 e4       	ldi	r21, 0x44	; 68
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	89 ab       	std	Y+49, r24	; 0x31
    39ee:	9a ab       	std	Y+50, r25	; 0x32
    39f0:	ab ab       	std	Y+51, r26	; 0x33
    39f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39f4:	69 a9       	ldd	r22, Y+49	; 0x31
    39f6:	7a a9       	ldd	r23, Y+50	; 0x32
    39f8:	8b a9       	ldd	r24, Y+51	; 0x33
    39fa:	9c a9       	ldd	r25, Y+52	; 0x34
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	2c f4       	brge	.+10     	; 0x3a16 <key_print+0x193e>
		__ticks = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	98 ab       	std	Y+48, r25	; 0x30
    3a12:	8f a7       	std	Y+47, r24	; 0x2f
    3a14:	3f c0       	rjmp	.+126    	; 0x3a94 <key_print+0x19bc>
	else if (__tmp > 65535)
    3a16:	69 a9       	ldd	r22, Y+49	; 0x31
    3a18:	7a a9       	ldd	r23, Y+50	; 0x32
    3a1a:	8b a9       	ldd	r24, Y+51	; 0x33
    3a1c:	9c a9       	ldd	r25, Y+52	; 0x34
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	3f ef       	ldi	r19, 0xFF	; 255
    3a22:	4f e7       	ldi	r20, 0x7F	; 127
    3a24:	57 e4       	ldi	r21, 0x47	; 71
    3a26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a2a:	18 16       	cp	r1, r24
    3a2c:	4c f5       	brge	.+82     	; 0x3a80 <key_print+0x19a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2e:	6d a9       	ldd	r22, Y+53	; 0x35
    3a30:	7e a9       	ldd	r23, Y+54	; 0x36
    3a32:	8f a9       	ldd	r24, Y+55	; 0x37
    3a34:	98 ad       	ldd	r25, Y+56	; 0x38
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	98 ab       	std	Y+48, r25	; 0x30
    3a54:	8f a7       	std	Y+47, r24	; 0x2f
    3a56:	0f c0       	rjmp	.+30     	; 0x3a76 <key_print+0x199e>
    3a58:	88 ec       	ldi	r24, 0xC8	; 200
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	9e a7       	std	Y+46, r25	; 0x2e
    3a5e:	8d a7       	std	Y+45, r24	; 0x2d
    3a60:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a62:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <key_print+0x198c>
    3a68:	9e a7       	std	Y+46, r25	; 0x2e
    3a6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a6e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	98 ab       	std	Y+48, r25	; 0x30
    3a74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a76:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a78:	98 a9       	ldd	r25, Y+48	; 0x30
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	69 f7       	brne	.-38     	; 0x3a58 <key_print+0x1980>
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <key_print+0x19d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a80:	69 a9       	ldd	r22, Y+49	; 0x31
    3a82:	7a a9       	ldd	r23, Y+50	; 0x32
    3a84:	8b a9       	ldd	r24, Y+51	; 0x33
    3a86:	9c a9       	ldd	r25, Y+52	; 0x34
    3a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	98 ab       	std	Y+48, r25	; 0x30
    3a92:	8f a7       	std	Y+47, r24	; 0x2f
    3a94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a96:	98 a9       	ldd	r25, Y+48	; 0x30
    3a98:	9c a7       	std	Y+44, r25	; 0x2c
    3a9a:	8b a7       	std	Y+43, r24	; 0x2b
    3a9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <key_print+0x19c8>
    3aa4:	9c a7       	std	Y+44, r25	; 0x2c
    3aa6:	8b a7       	std	Y+43, r24	; 0x2b

	case '9':
		_delay_ms(500);
		LCD_vidWriteString("9");
    3aa8:	87 e7       	ldi	r24, 0x77	; 119
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('9');
    3ab0:	89 e3       	ldi	r24, 0x39	; 57
    3ab2:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	a8 e4       	ldi	r26, 0x48	; 72
    3abc:	b3 e4       	ldi	r27, 0x43	; 67
    3abe:	8f a3       	std	Y+39, r24	; 0x27
    3ac0:	98 a7       	std	Y+40, r25	; 0x28
    3ac2:	a9 a7       	std	Y+41, r26	; 0x29
    3ac4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac6:	6f a1       	ldd	r22, Y+39	; 0x27
    3ac8:	78 a5       	ldd	r23, Y+40	; 0x28
    3aca:	89 a5       	ldd	r24, Y+41	; 0x29
    3acc:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	4a ef       	ldi	r20, 0xFA	; 250
    3ad4:	54 e4       	ldi	r21, 0x44	; 68
    3ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	8b a3       	std	Y+35, r24	; 0x23
    3ae0:	9c a3       	std	Y+36, r25	; 0x24
    3ae2:	ad a3       	std	Y+37, r26	; 0x25
    3ae4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ae6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ae8:	7c a1       	ldd	r23, Y+36	; 0x24
    3aea:	8d a1       	ldd	r24, Y+37	; 0x25
    3aec:	9e a1       	ldd	r25, Y+38	; 0x26
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	40 e8       	ldi	r20, 0x80	; 128
    3af4:	5f e3       	ldi	r21, 0x3F	; 63
    3af6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3afa:	88 23       	and	r24, r24
    3afc:	2c f4       	brge	.+10     	; 0x3b08 <key_print+0x1a30>
		__ticks = 1;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	9a a3       	std	Y+34, r25	; 0x22
    3b04:	89 a3       	std	Y+33, r24	; 0x21
    3b06:	3f c0       	rjmp	.+126    	; 0x3b86 <key_print+0x1aae>
	else if (__tmp > 65535)
    3b08:	6b a1       	ldd	r22, Y+35	; 0x23
    3b0a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b0c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b0e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	3f ef       	ldi	r19, 0xFF	; 255
    3b14:	4f e7       	ldi	r20, 0x7F	; 127
    3b16:	57 e4       	ldi	r21, 0x47	; 71
    3b18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b1c:	18 16       	cp	r1, r24
    3b1e:	4c f5       	brge	.+82     	; 0x3b72 <key_print+0x1a9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b20:	6f a1       	ldd	r22, Y+39	; 0x27
    3b22:	78 a5       	ldd	r23, Y+40	; 0x28
    3b24:	89 a5       	ldd	r24, Y+41	; 0x29
    3b26:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e2       	ldi	r20, 0x20	; 32
    3b2e:	51 e4       	ldi	r21, 0x41	; 65
    3b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	bc 01       	movw	r22, r24
    3b3a:	cd 01       	movw	r24, r26
    3b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	9a a3       	std	Y+34, r25	; 0x22
    3b46:	89 a3       	std	Y+33, r24	; 0x21
    3b48:	0f c0       	rjmp	.+30     	; 0x3b68 <key_print+0x1a90>
    3b4a:	88 ec       	ldi	r24, 0xC8	; 200
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	98 a3       	std	Y+32, r25	; 0x20
    3b50:	8f 8f       	std	Y+31, r24	; 0x1f
    3b52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b54:	98 a1       	ldd	r25, Y+32	; 0x20
    3b56:	01 97       	sbiw	r24, 0x01	; 1
    3b58:	f1 f7       	brne	.-4      	; 0x3b56 <key_print+0x1a7e>
    3b5a:	98 a3       	std	Y+32, r25	; 0x20
    3b5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b60:	9a a1       	ldd	r25, Y+34	; 0x22
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	9a a3       	std	Y+34, r25	; 0x22
    3b66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b68:	89 a1       	ldd	r24, Y+33	; 0x21
    3b6a:	9a a1       	ldd	r25, Y+34	; 0x22
    3b6c:	00 97       	sbiw	r24, 0x00	; 0
    3b6e:	69 f7       	brne	.-38     	; 0x3b4a <key_print+0x1a72>
    3b70:	14 c0       	rjmp	.+40     	; 0x3b9a <key_print+0x1ac2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b72:	6b a1       	ldd	r22, Y+35	; 0x23
    3b74:	7c a1       	ldd	r23, Y+36	; 0x24
    3b76:	8d a1       	ldd	r24, Y+37	; 0x25
    3b78:	9e a1       	ldd	r25, Y+38	; 0x26
    3b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	9a a3       	std	Y+34, r25	; 0x22
    3b84:	89 a3       	std	Y+33, r24	; 0x21
    3b86:	89 a1       	ldd	r24, Y+33	; 0x21
    3b88:	9a a1       	ldd	r25, Y+34	; 0x22
    3b8a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b8c:	8d 8f       	std	Y+29, r24	; 0x1d
    3b8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	f1 f7       	brne	.-4      	; 0x3b92 <key_print+0x1aba>
    3b96:	9e 8f       	std	Y+30, r25	; 0x1e
    3b98:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    3b9a:	90 91 c5 00 	lds	r25, 0x00C5
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	69 2f       	mov	r22, r25
    3ba2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    3ba6:	80 91 c6 00 	lds	r24, 0x00C6
    3baa:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    3bae:	80 91 c5 00 	lds	r24, 0x00C5
    3bb2:	8f 5f       	subi	r24, 0xFF	; 255
    3bb4:	80 93 c5 00 	sts	0x00C5, r24
    3bb8:	00 c1       	rjmp	.+512    	; 0x3dba <key_print+0x1ce2>
		break ;
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	a8 ec       	ldi	r26, 0xC8	; 200
    3bc0:	b2 e4       	ldi	r27, 0x42	; 66
    3bc2:	89 8f       	std	Y+25, r24	; 0x19
    3bc4:	9a 8f       	std	Y+26, r25	; 0x1a
    3bc6:	ab 8f       	std	Y+27, r26	; 0x1b
    3bc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bca:	69 8d       	ldd	r22, Y+25	; 0x19
    3bcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	4a ef       	ldi	r20, 0xFA	; 250
    3bd8:	54 e4       	ldi	r21, 0x44	; 68
    3bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	8d 8b       	std	Y+21, r24	; 0x15
    3be4:	9e 8b       	std	Y+22, r25	; 0x16
    3be6:	af 8b       	std	Y+23, r26	; 0x17
    3be8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bea:	6d 89       	ldd	r22, Y+21	; 0x15
    3bec:	7e 89       	ldd	r23, Y+22	; 0x16
    3bee:	8f 89       	ldd	r24, Y+23	; 0x17
    3bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bf2:	20 e0       	ldi	r18, 0x00	; 0
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	40 e8       	ldi	r20, 0x80	; 128
    3bf8:	5f e3       	ldi	r21, 0x3F	; 63
    3bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bfe:	88 23       	and	r24, r24
    3c00:	2c f4       	brge	.+10     	; 0x3c0c <key_print+0x1b34>
		__ticks = 1;
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	9c 8b       	std	Y+20, r25	; 0x14
    3c08:	8b 8b       	std	Y+19, r24	; 0x13
    3c0a:	3f c0       	rjmp	.+126    	; 0x3c8a <key_print+0x1bb2>
	else if (__tmp > 65535)
    3c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c10:	8f 89       	ldd	r24, Y+23	; 0x17
    3c12:	98 8d       	ldd	r25, Y+24	; 0x18
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	3f ef       	ldi	r19, 0xFF	; 255
    3c18:	4f e7       	ldi	r20, 0x7F	; 127
    3c1a:	57 e4       	ldi	r21, 0x47	; 71
    3c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c20:	18 16       	cp	r1, r24
    3c22:	4c f5       	brge	.+82     	; 0x3c76 <key_print+0x1b9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c24:	69 8d       	ldd	r22, Y+25	; 0x19
    3c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	40 e2       	ldi	r20, 0x20	; 32
    3c32:	51 e4       	ldi	r21, 0x41	; 65
    3c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	bc 01       	movw	r22, r24
    3c3e:	cd 01       	movw	r24, r26
    3c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	9c 8b       	std	Y+20, r25	; 0x14
    3c4a:	8b 8b       	std	Y+19, r24	; 0x13
    3c4c:	0f c0       	rjmp	.+30     	; 0x3c6c <key_print+0x1b94>
    3c4e:	88 ec       	ldi	r24, 0xC8	; 200
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	9a 8b       	std	Y+18, r25	; 0x12
    3c54:	89 8b       	std	Y+17, r24	; 0x11
    3c56:	89 89       	ldd	r24, Y+17	; 0x11
    3c58:	9a 89       	ldd	r25, Y+18	; 0x12
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	f1 f7       	brne	.-4      	; 0x3c5a <key_print+0x1b82>
    3c5e:	9a 8b       	std	Y+18, r25	; 0x12
    3c60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c62:	8b 89       	ldd	r24, Y+19	; 0x13
    3c64:	9c 89       	ldd	r25, Y+20	; 0x14
    3c66:	01 97       	sbiw	r24, 0x01	; 1
    3c68:	9c 8b       	std	Y+20, r25	; 0x14
    3c6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c70:	00 97       	sbiw	r24, 0x00	; 0
    3c72:	69 f7       	brne	.-38     	; 0x3c4e <key_print+0x1b76>
    3c74:	14 c0       	rjmp	.+40     	; 0x3c9e <key_print+0x1bc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c76:	6d 89       	ldd	r22, Y+21	; 0x15
    3c78:	7e 89       	ldd	r23, Y+22	; 0x16
    3c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	9c 8b       	std	Y+20, r25	; 0x14
    3c88:	8b 8b       	std	Y+19, r24	; 0x13
    3c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c8e:	98 8b       	std	Y+16, r25	; 0x10
    3c90:	8f 87       	std	Y+15, r24	; 0x0f
    3c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c94:	98 89       	ldd	r25, Y+16	; 0x10
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	f1 f7       	brne	.-4      	; 0x3c96 <key_print+0x1bbe>
    3c9a:	98 8b       	std	Y+16, r25	; 0x10
    3c9c:	8f 87       	std	Y+15, r24	; 0x0f
	case '0':
		_delay_ms(100);
		LCD_vidWriteString("0");
    3c9e:	89 e7       	ldi	r24, 0x79	; 121
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		fill_array('0');
    3ca6:	80 e3       	ldi	r24, 0x30	; 48
    3ca8:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <fill_array>
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	a8 e4       	ldi	r26, 0x48	; 72
    3cb2:	b3 e4       	ldi	r27, 0x43	; 67
    3cb4:	8b 87       	std	Y+11, r24	; 0x0b
    3cb6:	9c 87       	std	Y+12, r25	; 0x0c
    3cb8:	ad 87       	std	Y+13, r26	; 0x0d
    3cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	4a ef       	ldi	r20, 0xFA	; 250
    3cca:	54 e4       	ldi	r21, 0x44	; 68
    3ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	8f 83       	std	Y+7, r24	; 0x07
    3cd6:	98 87       	std	Y+8, r25	; 0x08
    3cd8:	a9 87       	std	Y+9, r26	; 0x09
    3cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cde:	78 85       	ldd	r23, Y+8	; 0x08
    3ce0:	89 85       	ldd	r24, Y+9	; 0x09
    3ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	40 e8       	ldi	r20, 0x80	; 128
    3cea:	5f e3       	ldi	r21, 0x3F	; 63
    3cec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf0:	88 23       	and	r24, r24
    3cf2:	2c f4       	brge	.+10     	; 0x3cfe <key_print+0x1c26>
		__ticks = 1;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
    3cfa:	8d 83       	std	Y+5, r24	; 0x05
    3cfc:	3f c0       	rjmp	.+126    	; 0x3d7c <key_print+0x1ca4>
	else if (__tmp > 65535)
    3cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3d00:	78 85       	ldd	r23, Y+8	; 0x08
    3d02:	89 85       	ldd	r24, Y+9	; 0x09
    3d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	3f ef       	ldi	r19, 0xFF	; 255
    3d0a:	4f e7       	ldi	r20, 0x7F	; 127
    3d0c:	57 e4       	ldi	r21, 0x47	; 71
    3d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d12:	18 16       	cp	r1, r24
    3d14:	4c f5       	brge	.+82     	; 0x3d68 <key_print+0x1c90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e2       	ldi	r20, 0x20	; 32
    3d24:	51 e4       	ldi	r21, 0x41	; 65
    3d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	9e 83       	std	Y+6, r25	; 0x06
    3d3c:	8d 83       	std	Y+5, r24	; 0x05
    3d3e:	0f c0       	rjmp	.+30     	; 0x3d5e <key_print+0x1c86>
    3d40:	88 ec       	ldi	r24, 0xC8	; 200
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	9c 83       	std	Y+4, r25	; 0x04
    3d46:	8b 83       	std	Y+3, r24	; 0x03
    3d48:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <key_print+0x1c74>
    3d50:	9c 83       	std	Y+4, r25	; 0x04
    3d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d54:	8d 81       	ldd	r24, Y+5	; 0x05
    3d56:	9e 81       	ldd	r25, Y+6	; 0x06
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	9e 83       	std	Y+6, r25	; 0x06
    3d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d60:	9e 81       	ldd	r25, Y+6	; 0x06
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	69 f7       	brne	.-38     	; 0x3d40 <key_print+0x1c68>
    3d66:	14 c0       	rjmp	.+40     	; 0x3d90 <key_print+0x1cb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d68:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6a:	78 85       	ldd	r23, Y+8	; 0x08
    3d6c:	89 85       	ldd	r24, Y+9	; 0x09
    3d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	9e 83       	std	Y+6, r25	; 0x06
    3d7a:	8d 83       	std	Y+5, r24	; 0x05
    3d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d80:	9a 83       	std	Y+2, r25	; 0x02
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	9a 81       	ldd	r25, Y+2	; 0x02
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	f1 f7       	brne	.-4      	; 0x3d88 <key_print+0x1cb0>
    3d8c:	9a 83       	std	Y+2, r25	; 0x02
    3d8e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		LCD_vidGoTo(0,counter);
    3d90:	90 91 c5 00 	lds	r25, 0x00C5
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	69 2f       	mov	r22, r25
    3d98:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteData(star);
    3d9c:	80 91 c6 00 	lds	r24, 0x00C6
    3da0:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_vidWriteData>
		counter ++ ;
    3da4:	80 91 c5 00 	lds	r24, 0x00C5
    3da8:	8f 5f       	subi	r24, 0xFF	; 255
    3daa:	80 93 c5 00 	sts	0x00C5, r24
    3dae:	05 c0       	rjmp	.+10     	; 0x3dba <key_print+0x1ce2>
		break ;

	case '#':

		LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
		check_pass();
    3db6:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <check_pass>

		break ;
	}
}
}
    3dba:	c6 5e       	subi	r28, 0xE6	; 230
    3dbc:	de 4f       	sbci	r29, 0xFE	; 254
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	de bf       	out	0x3e, r29	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	cd bf       	out	0x3d, r28	; 61
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	08 95       	ret

00003dd2 <fill_array>:
void fill_array(u8 digit)
{
    3dd2:	df 93       	push	r29
    3dd4:	cf 93       	push	r28
    3dd6:	0f 92       	push	r0
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
    3ddc:	89 83       	std	Y+1, r24	; 0x01

	enter[element] = digit ;
    3dde:	80 91 cd 00 	lds	r24, 0x00CD
    3de2:	88 2f       	mov	r24, r24
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	fc 01       	movw	r30, r24
    3de8:	e1 53       	subi	r30, 0x31	; 49
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
    3dee:	80 83       	st	Z, r24
	element++ ;
    3df0:	80 91 cd 00 	lds	r24, 0x00CD
    3df4:	8f 5f       	subi	r24, 0xFF	; 255
    3df6:	80 93 cd 00 	sts	0x00CD, r24


}
    3dfa:	0f 90       	pop	r0
    3dfc:	cf 91       	pop	r28
    3dfe:	df 91       	pop	r29
    3e00:	08 95       	ret

00003e02 <check_pass>:

void check_pass(void)
{
    3e02:	0f 93       	push	r16
    3e04:	1f 93       	push	r17
    3e06:	df 93       	push	r29
    3e08:	cf 93       	push	r28
    3e0a:	cd b7       	in	r28, 0x3d	; 61
    3e0c:	de b7       	in	r29, 0x3e	; 62
    3e0e:	c6 55       	subi	r28, 0x56	; 86
    3e10:	d0 40       	sbci	r29, 0x00	; 0
    3e12:	0f b6       	in	r0, 0x3f	; 63
    3e14:	f8 94       	cli
    3e16:	de bf       	out	0x3e, r29	; 62
    3e18:	0f be       	out	0x3f, r0	; 63
    3e1a:	cd bf       	out	0x3d, r28	; 61
	if((enter[0] == pass[0])&&(enter[1] == pass[1])&&(enter[2] == pass[2])&&(enter[3] == pass[3]))
    3e1c:	90 91 cf 00 	lds	r25, 0x00CF
    3e20:	80 91 c1 00 	lds	r24, 0x00C1
    3e24:	98 17       	cp	r25, r24
    3e26:	09 f0       	breq	.+2      	; 0x3e2a <check_pass+0x28>
    3e28:	33 c2       	rjmp	.+1126   	; 0x4290 <check_pass+0x48e>
    3e2a:	90 91 d0 00 	lds	r25, 0x00D0
    3e2e:	80 91 c2 00 	lds	r24, 0x00C2
    3e32:	98 17       	cp	r25, r24
    3e34:	09 f0       	breq	.+2      	; 0x3e38 <check_pass+0x36>
    3e36:	2c c2       	rjmp	.+1112   	; 0x4290 <check_pass+0x48e>
    3e38:	90 91 d1 00 	lds	r25, 0x00D1
    3e3c:	80 91 c3 00 	lds	r24, 0x00C3
    3e40:	98 17       	cp	r25, r24
    3e42:	09 f0       	breq	.+2      	; 0x3e46 <check_pass+0x44>
    3e44:	25 c2       	rjmp	.+1098   	; 0x4290 <check_pass+0x48e>
    3e46:	90 91 d2 00 	lds	r25, 0x00D2
    3e4a:	80 91 c4 00 	lds	r24, 0x00C4
    3e4e:	98 17       	cp	r25, r24
    3e50:	09 f0       	breq	.+2      	; 0x3e54 <check_pass+0x52>
    3e52:	1e c2       	rjmp	.+1084   	; 0x4290 <check_pass+0x48e>
	{
		LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
		LCD_vidGoTo(0,0);
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	60 e0       	ldi	r22, 0x00	; 0
    3e5e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteString("access approved");
    3e62:	8b e7       	ldi	r24, 0x7B	; 123
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>

		DIO_vidSETPINval(u8PORTD,DIO_u8PIN_4,DIO_u8HIGH);
    3e6a:	84 e0       	ldi	r24, 0x04	; 4
    3e6c:	64 e0       	ldi	r22, 0x04	; 4
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
		DIO_vidSETPINval(u8PORTD,DIO_u8PIN_6,DIO_u8HIGH);
    3e74:	84 e0       	ldi	r24, 0x04	; 4
    3e76:	66 e0       	ldi	r22, 0x06	; 6
    3e78:	40 e0       	ldi	r20, 0x00	; 0
    3e7a:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
    3e7e:	fe 01       	movw	r30, r28
    3e80:	ef 5a       	subi	r30, 0xAF	; 175
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	a8 e4       	ldi	r26, 0x48	; 72
    3e8a:	b2 e4       	ldi	r27, 0x42	; 66
    3e8c:	80 83       	st	Z, r24
    3e8e:	91 83       	std	Z+1, r25	; 0x01
    3e90:	a2 83       	std	Z+2, r26	; 0x02
    3e92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e94:	8e 01       	movw	r16, r28
    3e96:	03 5b       	subi	r16, 0xB3	; 179
    3e98:	1f 4f       	sbci	r17, 0xFF	; 255
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	ef 5a       	subi	r30, 0xAF	; 175
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	60 81       	ld	r22, Z
    3ea2:	71 81       	ldd	r23, Z+1	; 0x01
    3ea4:	82 81       	ldd	r24, Z+2	; 0x02
    3ea6:	93 81       	ldd	r25, Z+3	; 0x03
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	4a ef       	ldi	r20, 0xFA	; 250
    3eae:	54 e4       	ldi	r21, 0x44	; 68
    3eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	f8 01       	movw	r30, r16
    3eba:	80 83       	st	Z, r24
    3ebc:	91 83       	std	Z+1, r25	; 0x01
    3ebe:	a2 83       	std	Z+2, r26	; 0x02
    3ec0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e3 5b       	subi	r30, 0xB3	; 179
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	60 81       	ld	r22, Z
    3eca:	71 81       	ldd	r23, Z+1	; 0x01
    3ecc:	82 81       	ldd	r24, Z+2	; 0x02
    3ece:	93 81       	ldd	r25, Z+3	; 0x03
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	40 e8       	ldi	r20, 0x80	; 128
    3ed6:	5f e3       	ldi	r21, 0x3F	; 63
    3ed8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3edc:	88 23       	and	r24, r24
    3ede:	44 f4       	brge	.+16     	; 0x3ef0 <check_pass+0xee>
		__ticks = 1;
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e5 5b       	subi	r30, 0xB5	; 181
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	91 83       	std	Z+1, r25	; 0x01
    3eec:	80 83       	st	Z, r24
    3eee:	64 c0       	rjmp	.+200    	; 0x3fb8 <check_pass+0x1b6>
	else if (__tmp > 65535)
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	e3 5b       	subi	r30, 0xB3	; 179
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	60 81       	ld	r22, Z
    3ef8:	71 81       	ldd	r23, Z+1	; 0x01
    3efa:	82 81       	ldd	r24, Z+2	; 0x02
    3efc:	93 81       	ldd	r25, Z+3	; 0x03
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	3f ef       	ldi	r19, 0xFF	; 255
    3f02:	4f e7       	ldi	r20, 0x7F	; 127
    3f04:	57 e4       	ldi	r21, 0x47	; 71
    3f06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f0a:	18 16       	cp	r1, r24
    3f0c:	0c f0       	brlt	.+2      	; 0x3f10 <check_pass+0x10e>
    3f0e:	43 c0       	rjmp	.+134    	; 0x3f96 <check_pass+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f10:	fe 01       	movw	r30, r28
    3f12:	ef 5a       	subi	r30, 0xAF	; 175
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	60 81       	ld	r22, Z
    3f18:	71 81       	ldd	r23, Z+1	; 0x01
    3f1a:	82 81       	ldd	r24, Z+2	; 0x02
    3f1c:	93 81       	ldd	r25, Z+3	; 0x03
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	40 e2       	ldi	r20, 0x20	; 32
    3f24:	51 e4       	ldi	r21, 0x41	; 65
    3f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	8e 01       	movw	r16, r28
    3f30:	05 5b       	subi	r16, 0xB5	; 181
    3f32:	1f 4f       	sbci	r17, 0xFF	; 255
    3f34:	bc 01       	movw	r22, r24
    3f36:	cd 01       	movw	r24, r26
    3f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	f8 01       	movw	r30, r16
    3f42:	91 83       	std	Z+1, r25	; 0x01
    3f44:	80 83       	st	Z, r24
    3f46:	1f c0       	rjmp	.+62     	; 0x3f86 <check_pass+0x184>
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e7 5b       	subi	r30, 0xB7	; 183
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	88 ec       	ldi	r24, 0xC8	; 200
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	91 83       	std	Z+1, r25	; 0x01
    3f54:	80 83       	st	Z, r24
    3f56:	fe 01       	movw	r30, r28
    3f58:	e7 5b       	subi	r30, 0xB7	; 183
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	80 81       	ld	r24, Z
    3f5e:	91 81       	ldd	r25, Z+1	; 0x01
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	f1 f7       	brne	.-4      	; 0x3f60 <check_pass+0x15e>
    3f64:	fe 01       	movw	r30, r28
    3f66:	e7 5b       	subi	r30, 0xB7	; 183
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f6e:	de 01       	movw	r26, r28
    3f70:	a5 5b       	subi	r26, 0xB5	; 181
    3f72:	bf 4f       	sbci	r27, 0xFF	; 255
    3f74:	fe 01       	movw	r30, r28
    3f76:	e5 5b       	subi	r30, 0xB5	; 181
    3f78:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7a:	80 81       	ld	r24, Z
    3f7c:	91 81       	ldd	r25, Z+1	; 0x01
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	11 96       	adiw	r26, 0x01	; 1
    3f82:	9c 93       	st	X, r25
    3f84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f86:	fe 01       	movw	r30, r28
    3f88:	e5 5b       	subi	r30, 0xB5	; 181
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	80 81       	ld	r24, Z
    3f8e:	91 81       	ldd	r25, Z+1	; 0x01
    3f90:	00 97       	sbiw	r24, 0x00	; 0
    3f92:	d1 f6       	brne	.-76     	; 0x3f48 <check_pass+0x146>
    3f94:	27 c0       	rjmp	.+78     	; 0x3fe4 <check_pass+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f96:	8e 01       	movw	r16, r28
    3f98:	05 5b       	subi	r16, 0xB5	; 181
    3f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e3 5b       	subi	r30, 0xB3	; 179
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	60 81       	ld	r22, Z
    3fa4:	71 81       	ldd	r23, Z+1	; 0x01
    3fa6:	82 81       	ldd	r24, Z+2	; 0x02
    3fa8:	93 81       	ldd	r25, Z+3	; 0x03
    3faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	f8 01       	movw	r30, r16
    3fb4:	91 83       	std	Z+1, r25	; 0x01
    3fb6:	80 83       	st	Z, r24
    3fb8:	de 01       	movw	r26, r28
    3fba:	a9 5b       	subi	r26, 0xB9	; 185
    3fbc:	bf 4f       	sbci	r27, 0xFF	; 255
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e5 5b       	subi	r30, 0xB5	; 181
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	80 81       	ld	r24, Z
    3fc6:	91 81       	ldd	r25, Z+1	; 0x01
    3fc8:	8d 93       	st	X+, r24
    3fca:	9c 93       	st	X, r25
    3fcc:	fe 01       	movw	r30, r28
    3fce:	e9 5b       	subi	r30, 0xB9	; 185
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	f1 f7       	brne	.-4      	; 0x3fd6 <check_pass+0x1d4>
    3fda:	fe 01       	movw	r30, r28
    3fdc:	e9 5b       	subi	r30, 0xB9	; 185
    3fde:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	80 83       	st	Z, r24
		_delay_ms(50);
		DIO_vidSETPINval(u8PORTD,DIO_u8PIN_6,DIO_u8LOW);
    3fe4:	84 e0       	ldi	r24, 0x04	; 4
    3fe6:	66 e0       	ldi	r22, 0x06	; 6
    3fe8:	41 e0       	ldi	r20, 0x01	; 1
    3fea:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>

		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_6,DIO_u8HIGH);  //motor (door opens) clockwise
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	66 e0       	ldi	r22, 0x06	; 6
    3ff2:	40 e0       	ldi	r20, 0x00	; 0
    3ff4:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_7,DIO_u8LOW);
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	67 e0       	ldi	r22, 0x07	; 7
    3ffc:	41 e0       	ldi	r20, 0x01	; 1
    3ffe:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
    4002:	fe 01       	movw	r30, r28
    4004:	ed 5b       	subi	r30, 0xBD	; 189
    4006:	ff 4f       	sbci	r31, 0xFF	; 255
    4008:	80 e0       	ldi	r24, 0x00	; 0
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	aa ef       	ldi	r26, 0xFA	; 250
    400e:	b4 e4       	ldi	r27, 0x44	; 68
    4010:	80 83       	st	Z, r24
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	a2 83       	std	Z+2, r26	; 0x02
    4016:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4018:	8e 01       	movw	r16, r28
    401a:	01 5c       	subi	r16, 0xC1	; 193
    401c:	1f 4f       	sbci	r17, 0xFF	; 255
    401e:	fe 01       	movw	r30, r28
    4020:	ed 5b       	subi	r30, 0xBD	; 189
    4022:	ff 4f       	sbci	r31, 0xFF	; 255
    4024:	60 81       	ld	r22, Z
    4026:	71 81       	ldd	r23, Z+1	; 0x01
    4028:	82 81       	ldd	r24, Z+2	; 0x02
    402a:	93 81       	ldd	r25, Z+3	; 0x03
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	4a ef       	ldi	r20, 0xFA	; 250
    4032:	54 e4       	ldi	r21, 0x44	; 68
    4034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	f8 01       	movw	r30, r16
    403e:	80 83       	st	Z, r24
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	a2 83       	std	Z+2, r26	; 0x02
    4044:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4046:	fe 01       	movw	r30, r28
    4048:	ff 96       	adiw	r30, 0x3f	; 63
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e8       	ldi	r20, 0x80	; 128
    4058:	5f e3       	ldi	r21, 0x3F	; 63
    405a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    405e:	88 23       	and	r24, r24
    4060:	2c f4       	brge	.+10     	; 0x406c <check_pass+0x26a>
		__ticks = 1;
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	9e af       	std	Y+62, r25	; 0x3e
    4068:	8d af       	std	Y+61, r24	; 0x3d
    406a:	46 c0       	rjmp	.+140    	; 0x40f8 <check_pass+0x2f6>
	else if (__tmp > 65535)
    406c:	fe 01       	movw	r30, r28
    406e:	ff 96       	adiw	r30, 0x3f	; 63
    4070:	60 81       	ld	r22, Z
    4072:	71 81       	ldd	r23, Z+1	; 0x01
    4074:	82 81       	ldd	r24, Z+2	; 0x02
    4076:	93 81       	ldd	r25, Z+3	; 0x03
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	3f ef       	ldi	r19, 0xFF	; 255
    407c:	4f e7       	ldi	r20, 0x7F	; 127
    407e:	57 e4       	ldi	r21, 0x47	; 71
    4080:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4084:	18 16       	cp	r1, r24
    4086:	64 f5       	brge	.+88     	; 0x40e0 <check_pass+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4088:	fe 01       	movw	r30, r28
    408a:	ed 5b       	subi	r30, 0xBD	; 189
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	60 81       	ld	r22, Z
    4090:	71 81       	ldd	r23, Z+1	; 0x01
    4092:	82 81       	ldd	r24, Z+2	; 0x02
    4094:	93 81       	ldd	r25, Z+3	; 0x03
    4096:	20 e0       	ldi	r18, 0x00	; 0
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	40 e2       	ldi	r20, 0x20	; 32
    409c:	51 e4       	ldi	r21, 0x41	; 65
    409e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	bc 01       	movw	r22, r24
    40a8:	cd 01       	movw	r24, r26
    40aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	9e af       	std	Y+62, r25	; 0x3e
    40b4:	8d af       	std	Y+61, r24	; 0x3d
    40b6:	0f c0       	rjmp	.+30     	; 0x40d6 <check_pass+0x2d4>
    40b8:	88 ec       	ldi	r24, 0xC8	; 200
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	9c af       	std	Y+60, r25	; 0x3c
    40be:	8b af       	std	Y+59, r24	; 0x3b
    40c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    40c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <check_pass+0x2c2>
    40c8:	9c af       	std	Y+60, r25	; 0x3c
    40ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    40ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	9e af       	std	Y+62, r25	; 0x3e
    40d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    40d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	69 f7       	brne	.-38     	; 0x40b8 <check_pass+0x2b6>
    40de:	16 c0       	rjmp	.+44     	; 0x410c <check_pass+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e0:	fe 01       	movw	r30, r28
    40e2:	ff 96       	adiw	r30, 0x3f	; 63
    40e4:	60 81       	ld	r22, Z
    40e6:	71 81       	ldd	r23, Z+1	; 0x01
    40e8:	82 81       	ldd	r24, Z+2	; 0x02
    40ea:	93 81       	ldd	r25, Z+3	; 0x03
    40ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	9e af       	std	Y+62, r25	; 0x3e
    40f6:	8d af       	std	Y+61, r24	; 0x3d
    40f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    40fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    40fc:	9a af       	std	Y+58, r25	; 0x3a
    40fe:	89 af       	std	Y+57, r24	; 0x39
    4100:	89 ad       	ldd	r24, Y+57	; 0x39
    4102:	9a ad       	ldd	r25, Y+58	; 0x3a
    4104:	01 97       	sbiw	r24, 0x01	; 1
    4106:	f1 f7       	brne	.-4      	; 0x4104 <check_pass+0x302>
    4108:	9a af       	std	Y+58, r25	; 0x3a
    410a:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(2000);
		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_6,DIO_u8LOW);  //motor (door stops)
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	66 e0       	ldi	r22, 0x06	; 6
    4110:	41 e0       	ldi	r20, 0x01	; 1
    4112:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_7,DIO_u8LOW);
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	67 e0       	ldi	r22, 0x07	; 7
    411a:	41 e0       	ldi	r20, 0x01	; 1
    411c:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
		do
		{


		}while(DIO_u8GETPIN(u8PORTD,DIO_u8PIN_2) == DIO_u8HIGH);    // check if there is still someone
    4120:	84 e0       	ldi	r24, 0x04	; 4
    4122:	62 e0       	ldi	r22, 0x02	; 2
    4124:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8GETPIN>
    4128:	88 23       	and	r24, r24
    412a:	d1 f3       	breq	.-12     	; 0x4120 <check_pass+0x31e>

		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_7,DIO_u8HIGH); //motor (door closes) anti-clockwise
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	67 e0       	ldi	r22, 0x07	; 7
    4130:	40 e0       	ldi	r20, 0x00	; 0
    4132:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_6,DIO_u8LOW);
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	66 e0       	ldi	r22, 0x06	; 6
    413a:	41 e0       	ldi	r20, 0x01	; 1
    413c:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	aa ef       	ldi	r26, 0xFA	; 250
    4146:	b4 e4       	ldi	r27, 0x44	; 68
    4148:	8d ab       	std	Y+53, r24	; 0x35
    414a:	9e ab       	std	Y+54, r25	; 0x36
    414c:	af ab       	std	Y+55, r26	; 0x37
    414e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4150:	6d a9       	ldd	r22, Y+53	; 0x35
    4152:	7e a9       	ldd	r23, Y+54	; 0x36
    4154:	8f a9       	ldd	r24, Y+55	; 0x37
    4156:	98 ad       	ldd	r25, Y+56	; 0x38
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	4a ef       	ldi	r20, 0xFA	; 250
    415e:	54 e4       	ldi	r21, 0x44	; 68
    4160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	89 ab       	std	Y+49, r24	; 0x31
    416a:	9a ab       	std	Y+50, r25	; 0x32
    416c:	ab ab       	std	Y+51, r26	; 0x33
    416e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4170:	69 a9       	ldd	r22, Y+49	; 0x31
    4172:	7a a9       	ldd	r23, Y+50	; 0x32
    4174:	8b a9       	ldd	r24, Y+51	; 0x33
    4176:	9c a9       	ldd	r25, Y+52	; 0x34
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	40 e8       	ldi	r20, 0x80	; 128
    417e:	5f e3       	ldi	r21, 0x3F	; 63
    4180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4184:	88 23       	and	r24, r24
    4186:	2c f4       	brge	.+10     	; 0x4192 <check_pass+0x390>
		__ticks = 1;
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	98 ab       	std	Y+48, r25	; 0x30
    418e:	8f a7       	std	Y+47, r24	; 0x2f
    4190:	3f c0       	rjmp	.+126    	; 0x4210 <check_pass+0x40e>
	else if (__tmp > 65535)
    4192:	69 a9       	ldd	r22, Y+49	; 0x31
    4194:	7a a9       	ldd	r23, Y+50	; 0x32
    4196:	8b a9       	ldd	r24, Y+51	; 0x33
    4198:	9c a9       	ldd	r25, Y+52	; 0x34
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	3f ef       	ldi	r19, 0xFF	; 255
    419e:	4f e7       	ldi	r20, 0x7F	; 127
    41a0:	57 e4       	ldi	r21, 0x47	; 71
    41a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41a6:	18 16       	cp	r1, r24
    41a8:	4c f5       	brge	.+82     	; 0x41fc <check_pass+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41aa:	6d a9       	ldd	r22, Y+53	; 0x35
    41ac:	7e a9       	ldd	r23, Y+54	; 0x36
    41ae:	8f a9       	ldd	r24, Y+55	; 0x37
    41b0:	98 ad       	ldd	r25, Y+56	; 0x38
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e2       	ldi	r20, 0x20	; 32
    41b8:	51 e4       	ldi	r21, 0x41	; 65
    41ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	98 ab       	std	Y+48, r25	; 0x30
    41d0:	8f a7       	std	Y+47, r24	; 0x2f
    41d2:	0f c0       	rjmp	.+30     	; 0x41f2 <check_pass+0x3f0>
    41d4:	88 ec       	ldi	r24, 0xC8	; 200
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	9e a7       	std	Y+46, r25	; 0x2e
    41da:	8d a7       	std	Y+45, r24	; 0x2d
    41dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    41de:	9e a5       	ldd	r25, Y+46	; 0x2e
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <check_pass+0x3de>
    41e4:	9e a7       	std	Y+46, r25	; 0x2e
    41e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    41ea:	98 a9       	ldd	r25, Y+48	; 0x30
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	98 ab       	std	Y+48, r25	; 0x30
    41f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    41f4:	98 a9       	ldd	r25, Y+48	; 0x30
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	69 f7       	brne	.-38     	; 0x41d4 <check_pass+0x3d2>
    41fa:	14 c0       	rjmp	.+40     	; 0x4224 <check_pass+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fc:	69 a9       	ldd	r22, Y+49	; 0x31
    41fe:	7a a9       	ldd	r23, Y+50	; 0x32
    4200:	8b a9       	ldd	r24, Y+51	; 0x33
    4202:	9c a9       	ldd	r25, Y+52	; 0x34
    4204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	98 ab       	std	Y+48, r25	; 0x30
    420e:	8f a7       	std	Y+47, r24	; 0x2f
    4210:	8f a5       	ldd	r24, Y+47	; 0x2f
    4212:	98 a9       	ldd	r25, Y+48	; 0x30
    4214:	9c a7       	std	Y+44, r25	; 0x2c
    4216:	8b a7       	std	Y+43, r24	; 0x2b
    4218:	8b a5       	ldd	r24, Y+43	; 0x2b
    421a:	9c a5       	ldd	r25, Y+44	; 0x2c
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	f1 f7       	brne	.-4      	; 0x421c <check_pass+0x41a>
    4220:	9c a7       	std	Y+44, r25	; 0x2c
    4222:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(2000);
		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_7,DIO_u8LOW); // motor (door stops)
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	67 e0       	ldi	r22, 0x07	; 7
    4228:	41 e0       	ldi	r20, 0x01	; 1
    422a:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_6,DIO_u8LOW);
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	66 e0       	ldi	r22, 0x06	; 6
    4232:	41 e0       	ldi	r20, 0x01	; 1
    4234:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
		DIO_vidSETPINval(u8PORTD,DIO_u8PIN_4,DIO_u8LOW);
    4238:	84 e0       	ldi	r24, 0x04	; 4
    423a:	64 e0       	ldi	r22, 0x04	; 4
    423c:	41 e0       	ldi	r20, 0x01	; 1
    423e:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
		element = 0 ;
    4242:	10 92 cd 00 	sts	0x00CD, r1
		counter = 6 ;
    4246:	86 e0       	ldi	r24, 0x06	; 6
    4248:	80 93 c5 00 	sts	0x00C5, r24
		for(u8 iterator=0;iterator<4;iterator++)
    424c:	fe 01       	movw	r30, r28
    424e:	ea 5a       	subi	r30, 0xAA	; 170
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	10 82       	st	Z, r1
    4254:	14 c0       	rjmp	.+40     	; 0x427e <check_pass+0x47c>
		{
			enter[iterator]='0';
    4256:	fe 01       	movw	r30, r28
    4258:	ea 5a       	subi	r30, 0xAA	; 170
    425a:	ff 4f       	sbci	r31, 0xFF	; 255
    425c:	80 81       	ld	r24, Z
    425e:	88 2f       	mov	r24, r24
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	fc 01       	movw	r30, r24
    4264:	e1 53       	subi	r30, 0x31	; 49
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	80 e3       	ldi	r24, 0x30	; 48
    426a:	80 83       	st	Z, r24
		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_7,DIO_u8LOW); // motor (door stops)
		DIO_vidSETPINval(u8PORTA,DIO_u8PIN_6,DIO_u8LOW);
		DIO_vidSETPINval(u8PORTD,DIO_u8PIN_4,DIO_u8LOW);
		element = 0 ;
		counter = 6 ;
		for(u8 iterator=0;iterator<4;iterator++)
    426c:	de 01       	movw	r26, r28
    426e:	aa 5a       	subi	r26, 0xAA	; 170
    4270:	bf 4f       	sbci	r27, 0xFF	; 255
    4272:	fe 01       	movw	r30, r28
    4274:	ea 5a       	subi	r30, 0xAA	; 170
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	80 81       	ld	r24, Z
    427a:	8f 5f       	subi	r24, 0xFF	; 255
    427c:	8c 93       	st	X, r24
    427e:	fe 01       	movw	r30, r28
    4280:	ea 5a       	subi	r30, 0xAA	; 170
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	80 81       	ld	r24, Z
    4286:	84 30       	cpi	r24, 0x04	; 4
    4288:	30 f3       	brcs	.-52     	; 0x4256 <check_pass+0x454>
		{
			enter[iterator]='0';
		}
		start_pass();
    428a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <start_pass>
    428e:	9f c1       	rjmp	.+830    	; 0x45ce <check_pass+0x7cc>

	}

	else
	{
		LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
		LCD_vidGoTo(0,0);
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	60 e0       	ldi	r22, 0x00	; 0
    429a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteString("access denied");
    429e:	8b e8       	ldi	r24, 0x8B	; 139
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>

		segment();
    42a6:	0e 94 95 24 	call	0x492a	; 0x492a <segment>
    42aa:	80 e0       	ldi	r24, 0x00	; 0
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	aa ef       	ldi	r26, 0xFA	; 250
    42b0:	b3 e4       	ldi	r27, 0x43	; 67
    42b2:	8f a3       	std	Y+39, r24	; 0x27
    42b4:	98 a7       	std	Y+40, r25	; 0x28
    42b6:	a9 a7       	std	Y+41, r26	; 0x29
    42b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ba:	6f a1       	ldd	r22, Y+39	; 0x27
    42bc:	78 a5       	ldd	r23, Y+40	; 0x28
    42be:	89 a5       	ldd	r24, Y+41	; 0x29
    42c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	4a ef       	ldi	r20, 0xFA	; 250
    42c8:	54 e4       	ldi	r21, 0x44	; 68
    42ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	8b a3       	std	Y+35, r24	; 0x23
    42d4:	9c a3       	std	Y+36, r25	; 0x24
    42d6:	ad a3       	std	Y+37, r26	; 0x25
    42d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42da:	6b a1       	ldd	r22, Y+35	; 0x23
    42dc:	7c a1       	ldd	r23, Y+36	; 0x24
    42de:	8d a1       	ldd	r24, Y+37	; 0x25
    42e0:	9e a1       	ldd	r25, Y+38	; 0x26
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e8       	ldi	r20, 0x80	; 128
    42e8:	5f e3       	ldi	r21, 0x3F	; 63
    42ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ee:	88 23       	and	r24, r24
    42f0:	2c f4       	brge	.+10     	; 0x42fc <check_pass+0x4fa>
		__ticks = 1;
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	9a a3       	std	Y+34, r25	; 0x22
    42f8:	89 a3       	std	Y+33, r24	; 0x21
    42fa:	3f c0       	rjmp	.+126    	; 0x437a <check_pass+0x578>
	else if (__tmp > 65535)
    42fc:	6b a1       	ldd	r22, Y+35	; 0x23
    42fe:	7c a1       	ldd	r23, Y+36	; 0x24
    4300:	8d a1       	ldd	r24, Y+37	; 0x25
    4302:	9e a1       	ldd	r25, Y+38	; 0x26
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	3f ef       	ldi	r19, 0xFF	; 255
    4308:	4f e7       	ldi	r20, 0x7F	; 127
    430a:	57 e4       	ldi	r21, 0x47	; 71
    430c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4310:	18 16       	cp	r1, r24
    4312:	4c f5       	brge	.+82     	; 0x4366 <check_pass+0x564>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4314:	6f a1       	ldd	r22, Y+39	; 0x27
    4316:	78 a5       	ldd	r23, Y+40	; 0x28
    4318:	89 a5       	ldd	r24, Y+41	; 0x29
    431a:	9a a5       	ldd	r25, Y+42	; 0x2a
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	40 e2       	ldi	r20, 0x20	; 32
    4322:	51 e4       	ldi	r21, 0x41	; 65
    4324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
    432c:	bc 01       	movw	r22, r24
    432e:	cd 01       	movw	r24, r26
    4330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	9a a3       	std	Y+34, r25	; 0x22
    433a:	89 a3       	std	Y+33, r24	; 0x21
    433c:	0f c0       	rjmp	.+30     	; 0x435c <check_pass+0x55a>
    433e:	88 ec       	ldi	r24, 0xC8	; 200
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	98 a3       	std	Y+32, r25	; 0x20
    4344:	8f 8f       	std	Y+31, r24	; 0x1f
    4346:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4348:	98 a1       	ldd	r25, Y+32	; 0x20
    434a:	01 97       	sbiw	r24, 0x01	; 1
    434c:	f1 f7       	brne	.-4      	; 0x434a <check_pass+0x548>
    434e:	98 a3       	std	Y+32, r25	; 0x20
    4350:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4352:	89 a1       	ldd	r24, Y+33	; 0x21
    4354:	9a a1       	ldd	r25, Y+34	; 0x22
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	9a a3       	std	Y+34, r25	; 0x22
    435a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    435c:	89 a1       	ldd	r24, Y+33	; 0x21
    435e:	9a a1       	ldd	r25, Y+34	; 0x22
    4360:	00 97       	sbiw	r24, 0x00	; 0
    4362:	69 f7       	brne	.-38     	; 0x433e <check_pass+0x53c>
    4364:	14 c0       	rjmp	.+40     	; 0x438e <check_pass+0x58c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4366:	6b a1       	ldd	r22, Y+35	; 0x23
    4368:	7c a1       	ldd	r23, Y+36	; 0x24
    436a:	8d a1       	ldd	r24, Y+37	; 0x25
    436c:	9e a1       	ldd	r25, Y+38	; 0x26
    436e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	9a a3       	std	Y+34, r25	; 0x22
    4378:	89 a3       	std	Y+33, r24	; 0x21
    437a:	89 a1       	ldd	r24, Y+33	; 0x21
    437c:	9a a1       	ldd	r25, Y+34	; 0x22
    437e:	9e 8f       	std	Y+30, r25	; 0x1e
    4380:	8d 8f       	std	Y+29, r24	; 0x1d
    4382:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4384:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <check_pass+0x584>
    438a:	9e 8f       	std	Y+30, r25	; 0x1e
    438c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		start_pass();
    438e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <start_pass>
		element = 0 ;
    4392:	10 92 cd 00 	sts	0x00CD, r1
		counter = 6 ;
    4396:	86 e0       	ldi	r24, 0x06	; 6
    4398:	80 93 c5 00 	sts	0x00C5, r24
		wrong_counter ++ ;
    439c:	80 91 cb 00 	lds	r24, 0x00CB
    43a0:	8f 5f       	subi	r24, 0xFF	; 255
    43a2:	80 93 cb 00 	sts	0x00CB, r24
		if(wrong_counter<3)
    43a6:	80 91 cb 00 	lds	r24, 0x00CB
    43aa:	83 30       	cpi	r24, 0x03	; 3
    43ac:	08 f0       	brcs	.+2      	; 0x43b0 <check_pass+0x5ae>
    43ae:	0d c1       	rjmp	.+538    	; 0x45ca <check_pass+0x7c8>
		{
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_5,DIO_u8HIGH);
    43b0:	84 e0       	ldi	r24, 0x04	; 4
    43b2:	65 e0       	ldi	r22, 0x05	; 5
    43b4:	40 e0       	ldi	r20, 0x00	; 0
    43b6:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
			for(u8 iterator=0;iterator<2;iterator++)
    43ba:	fe 01       	movw	r30, r28
    43bc:	eb 5a       	subi	r30, 0xAB	; 171
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	10 82       	st	Z, r1
    43c2:	f7 c0       	rjmp	.+494    	; 0x45b2 <check_pass+0x7b0>
			{
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_6,DIO_u8HIGH);
    43c4:	84 e0       	ldi	r24, 0x04	; 4
    43c6:	66 e0       	ldi	r22, 0x06	; 6
    43c8:	40 e0       	ldi	r20, 0x00	; 0
    43ca:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
    43ce:	80 e0       	ldi	r24, 0x00	; 0
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	a8 ec       	ldi	r26, 0xC8	; 200
    43d4:	b2 e4       	ldi	r27, 0x42	; 66
    43d6:	89 8f       	std	Y+25, r24	; 0x19
    43d8:	9a 8f       	std	Y+26, r25	; 0x1a
    43da:	ab 8f       	std	Y+27, r26	; 0x1b
    43dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43de:	69 8d       	ldd	r22, Y+25	; 0x19
    43e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	4a ef       	ldi	r20, 0xFA	; 250
    43ec:	54 e4       	ldi	r21, 0x44	; 68
    43ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	8d 8b       	std	Y+21, r24	; 0x15
    43f8:	9e 8b       	std	Y+22, r25	; 0x16
    43fa:	af 8b       	std	Y+23, r26	; 0x17
    43fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43fe:	6d 89       	ldd	r22, Y+21	; 0x15
    4400:	7e 89       	ldd	r23, Y+22	; 0x16
    4402:	8f 89       	ldd	r24, Y+23	; 0x17
    4404:	98 8d       	ldd	r25, Y+24	; 0x18
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	40 e8       	ldi	r20, 0x80	; 128
    440c:	5f e3       	ldi	r21, 0x3F	; 63
    440e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4412:	88 23       	and	r24, r24
    4414:	2c f4       	brge	.+10     	; 0x4420 <check_pass+0x61e>
		__ticks = 1;
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	9c 8b       	std	Y+20, r25	; 0x14
    441c:	8b 8b       	std	Y+19, r24	; 0x13
    441e:	3f c0       	rjmp	.+126    	; 0x449e <check_pass+0x69c>
	else if (__tmp > 65535)
    4420:	6d 89       	ldd	r22, Y+21	; 0x15
    4422:	7e 89       	ldd	r23, Y+22	; 0x16
    4424:	8f 89       	ldd	r24, Y+23	; 0x17
    4426:	98 8d       	ldd	r25, Y+24	; 0x18
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	3f ef       	ldi	r19, 0xFF	; 255
    442c:	4f e7       	ldi	r20, 0x7F	; 127
    442e:	57 e4       	ldi	r21, 0x47	; 71
    4430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4434:	18 16       	cp	r1, r24
    4436:	4c f5       	brge	.+82     	; 0x448a <check_pass+0x688>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4438:	69 8d       	ldd	r22, Y+25	; 0x19
    443a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    443c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    443e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	40 e2       	ldi	r20, 0x20	; 32
    4446:	51 e4       	ldi	r21, 0x41	; 65
    4448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	bc 01       	movw	r22, r24
    4452:	cd 01       	movw	r24, r26
    4454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4458:	dc 01       	movw	r26, r24
    445a:	cb 01       	movw	r24, r22
    445c:	9c 8b       	std	Y+20, r25	; 0x14
    445e:	8b 8b       	std	Y+19, r24	; 0x13
    4460:	0f c0       	rjmp	.+30     	; 0x4480 <check_pass+0x67e>
    4462:	88 ec       	ldi	r24, 0xC8	; 200
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	9a 8b       	std	Y+18, r25	; 0x12
    4468:	89 8b       	std	Y+17, r24	; 0x11
    446a:	89 89       	ldd	r24, Y+17	; 0x11
    446c:	9a 89       	ldd	r25, Y+18	; 0x12
    446e:	01 97       	sbiw	r24, 0x01	; 1
    4470:	f1 f7       	brne	.-4      	; 0x446e <check_pass+0x66c>
    4472:	9a 8b       	std	Y+18, r25	; 0x12
    4474:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4476:	8b 89       	ldd	r24, Y+19	; 0x13
    4478:	9c 89       	ldd	r25, Y+20	; 0x14
    447a:	01 97       	sbiw	r24, 0x01	; 1
    447c:	9c 8b       	std	Y+20, r25	; 0x14
    447e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4480:	8b 89       	ldd	r24, Y+19	; 0x13
    4482:	9c 89       	ldd	r25, Y+20	; 0x14
    4484:	00 97       	sbiw	r24, 0x00	; 0
    4486:	69 f7       	brne	.-38     	; 0x4462 <check_pass+0x660>
    4488:	14 c0       	rjmp	.+40     	; 0x44b2 <check_pass+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    448a:	6d 89       	ldd	r22, Y+21	; 0x15
    448c:	7e 89       	ldd	r23, Y+22	; 0x16
    448e:	8f 89       	ldd	r24, Y+23	; 0x17
    4490:	98 8d       	ldd	r25, Y+24	; 0x18
    4492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	9c 8b       	std	Y+20, r25	; 0x14
    449c:	8b 8b       	std	Y+19, r24	; 0x13
    449e:	8b 89       	ldd	r24, Y+19	; 0x13
    44a0:	9c 89       	ldd	r25, Y+20	; 0x14
    44a2:	98 8b       	std	Y+16, r25	; 0x10
    44a4:	8f 87       	std	Y+15, r24	; 0x0f
    44a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    44a8:	98 89       	ldd	r25, Y+16	; 0x10
    44aa:	01 97       	sbiw	r24, 0x01	; 1
    44ac:	f1 f7       	brne	.-4      	; 0x44aa <check_pass+0x6a8>
    44ae:	98 8b       	std	Y+16, r25	; 0x10
    44b0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_6,DIO_u8LOW);
    44b2:	84 e0       	ldi	r24, 0x04	; 4
    44b4:	66 e0       	ldi	r22, 0x06	; 6
    44b6:	41 e0       	ldi	r20, 0x01	; 1
    44b8:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
    44bc:	80 e0       	ldi	r24, 0x00	; 0
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	a8 ec       	ldi	r26, 0xC8	; 200
    44c2:	b2 e4       	ldi	r27, 0x42	; 66
    44c4:	8b 87       	std	Y+11, r24	; 0x0b
    44c6:	9c 87       	std	Y+12, r25	; 0x0c
    44c8:	ad 87       	std	Y+13, r26	; 0x0d
    44ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    44ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    44d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    44d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d4:	20 e0       	ldi	r18, 0x00	; 0
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	4a ef       	ldi	r20, 0xFA	; 250
    44da:	54 e4       	ldi	r21, 0x44	; 68
    44dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	8f 83       	std	Y+7, r24	; 0x07
    44e6:	98 87       	std	Y+8, r25	; 0x08
    44e8:	a9 87       	std	Y+9, r26	; 0x09
    44ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44ec:	6f 81       	ldd	r22, Y+7	; 0x07
    44ee:	78 85       	ldd	r23, Y+8	; 0x08
    44f0:	89 85       	ldd	r24, Y+9	; 0x09
    44f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	40 e8       	ldi	r20, 0x80	; 128
    44fa:	5f e3       	ldi	r21, 0x3F	; 63
    44fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4500:	88 23       	and	r24, r24
    4502:	2c f4       	brge	.+10     	; 0x450e <check_pass+0x70c>
		__ticks = 1;
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	9e 83       	std	Y+6, r25	; 0x06
    450a:	8d 83       	std	Y+5, r24	; 0x05
    450c:	3f c0       	rjmp	.+126    	; 0x458c <check_pass+0x78a>
	else if (__tmp > 65535)
    450e:	6f 81       	ldd	r22, Y+7	; 0x07
    4510:	78 85       	ldd	r23, Y+8	; 0x08
    4512:	89 85       	ldd	r24, Y+9	; 0x09
    4514:	9a 85       	ldd	r25, Y+10	; 0x0a
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	3f ef       	ldi	r19, 0xFF	; 255
    451a:	4f e7       	ldi	r20, 0x7F	; 127
    451c:	57 e4       	ldi	r21, 0x47	; 71
    451e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4522:	18 16       	cp	r1, r24
    4524:	4c f5       	brge	.+82     	; 0x4578 <check_pass+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4526:	6b 85       	ldd	r22, Y+11	; 0x0b
    4528:	7c 85       	ldd	r23, Y+12	; 0x0c
    452a:	8d 85       	ldd	r24, Y+13	; 0x0d
    452c:	9e 85       	ldd	r25, Y+14	; 0x0e
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	40 e2       	ldi	r20, 0x20	; 32
    4534:	51 e4       	ldi	r21, 0x41	; 65
    4536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453a:	dc 01       	movw	r26, r24
    453c:	cb 01       	movw	r24, r22
    453e:	bc 01       	movw	r22, r24
    4540:	cd 01       	movw	r24, r26
    4542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	9e 83       	std	Y+6, r25	; 0x06
    454c:	8d 83       	std	Y+5, r24	; 0x05
    454e:	0f c0       	rjmp	.+30     	; 0x456e <check_pass+0x76c>
    4550:	88 ec       	ldi	r24, 0xC8	; 200
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	9c 83       	std	Y+4, r25	; 0x04
    4556:	8b 83       	std	Y+3, r24	; 0x03
    4558:	8b 81       	ldd	r24, Y+3	; 0x03
    455a:	9c 81       	ldd	r25, Y+4	; 0x04
    455c:	01 97       	sbiw	r24, 0x01	; 1
    455e:	f1 f7       	brne	.-4      	; 0x455c <check_pass+0x75a>
    4560:	9c 83       	std	Y+4, r25	; 0x04
    4562:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4564:	8d 81       	ldd	r24, Y+5	; 0x05
    4566:	9e 81       	ldd	r25, Y+6	; 0x06
    4568:	01 97       	sbiw	r24, 0x01	; 1
    456a:	9e 83       	std	Y+6, r25	; 0x06
    456c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456e:	8d 81       	ldd	r24, Y+5	; 0x05
    4570:	9e 81       	ldd	r25, Y+6	; 0x06
    4572:	00 97       	sbiw	r24, 0x00	; 0
    4574:	69 f7       	brne	.-38     	; 0x4550 <check_pass+0x74e>
    4576:	14 c0       	rjmp	.+40     	; 0x45a0 <check_pass+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4578:	6f 81       	ldd	r22, Y+7	; 0x07
    457a:	78 85       	ldd	r23, Y+8	; 0x08
    457c:	89 85       	ldd	r24, Y+9	; 0x09
    457e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	9e 83       	std	Y+6, r25	; 0x06
    458a:	8d 83       	std	Y+5, r24	; 0x05
    458c:	8d 81       	ldd	r24, Y+5	; 0x05
    458e:	9e 81       	ldd	r25, Y+6	; 0x06
    4590:	9a 83       	std	Y+2, r25	; 0x02
    4592:	89 83       	std	Y+1, r24	; 0x01
    4594:	89 81       	ldd	r24, Y+1	; 0x01
    4596:	9a 81       	ldd	r25, Y+2	; 0x02
    4598:	01 97       	sbiw	r24, 0x01	; 1
    459a:	f1 f7       	brne	.-4      	; 0x4598 <check_pass+0x796>
    459c:	9a 83       	std	Y+2, r25	; 0x02
    459e:	89 83       	std	Y+1, r24	; 0x01
		counter = 6 ;
		wrong_counter ++ ;
		if(wrong_counter<3)
		{
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_5,DIO_u8HIGH);
			for(u8 iterator=0;iterator<2;iterator++)
    45a0:	de 01       	movw	r26, r28
    45a2:	ab 5a       	subi	r26, 0xAB	; 171
    45a4:	bf 4f       	sbci	r27, 0xFF	; 255
    45a6:	fe 01       	movw	r30, r28
    45a8:	eb 5a       	subi	r30, 0xAB	; 171
    45aa:	ff 4f       	sbci	r31, 0xFF	; 255
    45ac:	80 81       	ld	r24, Z
    45ae:	8f 5f       	subi	r24, 0xFF	; 255
    45b0:	8c 93       	st	X, r24
    45b2:	fe 01       	movw	r30, r28
    45b4:	eb 5a       	subi	r30, 0xAB	; 171
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	80 81       	ld	r24, Z
    45ba:	82 30       	cpi	r24, 0x02	; 2
    45bc:	08 f4       	brcc	.+2      	; 0x45c0 <check_pass+0x7be>
    45be:	02 cf       	rjmp	.-508    	; 0x43c4 <check_pass+0x5c2>
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_6,DIO_u8HIGH);
			_delay_ms(100);
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_6,DIO_u8LOW);
			_delay_ms(100);
			}
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_5,DIO_u8LOW);
    45c0:	84 e0       	ldi	r24, 0x04	; 4
    45c2:	65 e0       	ldi	r22, 0x05	; 5
    45c4:	41 e0       	ldi	r20, 0x01	; 1
    45c6:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>


		}
		warning();
    45ca:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <warning>
	}
}
    45ce:	ca 5a       	subi	r28, 0xAA	; 170
    45d0:	df 4f       	sbci	r29, 0xFF	; 255
    45d2:	0f b6       	in	r0, 0x3f	; 63
    45d4:	f8 94       	cli
    45d6:	de bf       	out	0x3e, r29	; 62
    45d8:	0f be       	out	0x3f, r0	; 63
    45da:	cd bf       	out	0x3d, r28	; 61
    45dc:	cf 91       	pop	r28
    45de:	df 91       	pop	r29
    45e0:	1f 91       	pop	r17
    45e2:	0f 91       	pop	r16
    45e4:	08 95       	ret

000045e6 <warning>:

void warning(void)
{
    45e6:	df 93       	push	r29
    45e8:	cf 93       	push	r28
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
    45ee:	ab 97       	sbiw	r28, 0x2b	; 43
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61


	if(wrong_counter==3)
    45fa:	80 91 cb 00 	lds	r24, 0x00CB
    45fe:	83 30       	cpi	r24, 0x03	; 3
    4600:	09 f0       	breq	.+2      	; 0x4604 <warning+0x1e>
    4602:	8a c1       	rjmp	.+788    	; 0x4918 <warning+0x332>
	{
		LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    4604:	81 e0       	ldi	r24, 0x01	; 1
    4606:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
		LCD_vidGoTo(0,0);
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	60 e0       	ldi	r22, 0x00	; 0
    460e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteString("WARNING!");
    4612:	89 e9       	ldi	r24, 0x99	; 153
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	aa ef       	ldi	r26, 0xFA	; 250
    4620:	b3 e4       	ldi	r27, 0x43	; 67
    4622:	8f a3       	std	Y+39, r24	; 0x27
    4624:	98 a7       	std	Y+40, r25	; 0x28
    4626:	a9 a7       	std	Y+41, r26	; 0x29
    4628:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    462a:	6f a1       	ldd	r22, Y+39	; 0x27
    462c:	78 a5       	ldd	r23, Y+40	; 0x28
    462e:	89 a5       	ldd	r24, Y+41	; 0x29
    4630:	9a a5       	ldd	r25, Y+42	; 0x2a
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	4a ef       	ldi	r20, 0xFA	; 250
    4638:	54 e4       	ldi	r21, 0x44	; 68
    463a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	8b a3       	std	Y+35, r24	; 0x23
    4644:	9c a3       	std	Y+36, r25	; 0x24
    4646:	ad a3       	std	Y+37, r26	; 0x25
    4648:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    464a:	6b a1       	ldd	r22, Y+35	; 0x23
    464c:	7c a1       	ldd	r23, Y+36	; 0x24
    464e:	8d a1       	ldd	r24, Y+37	; 0x25
    4650:	9e a1       	ldd	r25, Y+38	; 0x26
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	40 e8       	ldi	r20, 0x80	; 128
    4658:	5f e3       	ldi	r21, 0x3F	; 63
    465a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    465e:	88 23       	and	r24, r24
    4660:	2c f4       	brge	.+10     	; 0x466c <warning+0x86>
		__ticks = 1;
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	9a a3       	std	Y+34, r25	; 0x22
    4668:	89 a3       	std	Y+33, r24	; 0x21
    466a:	3f c0       	rjmp	.+126    	; 0x46ea <warning+0x104>
	else if (__tmp > 65535)
    466c:	6b a1       	ldd	r22, Y+35	; 0x23
    466e:	7c a1       	ldd	r23, Y+36	; 0x24
    4670:	8d a1       	ldd	r24, Y+37	; 0x25
    4672:	9e a1       	ldd	r25, Y+38	; 0x26
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	3f ef       	ldi	r19, 0xFF	; 255
    4678:	4f e7       	ldi	r20, 0x7F	; 127
    467a:	57 e4       	ldi	r21, 0x47	; 71
    467c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4680:	18 16       	cp	r1, r24
    4682:	4c f5       	brge	.+82     	; 0x46d6 <warning+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4684:	6f a1       	ldd	r22, Y+39	; 0x27
    4686:	78 a5       	ldd	r23, Y+40	; 0x28
    4688:	89 a5       	ldd	r24, Y+41	; 0x29
    468a:	9a a5       	ldd	r25, Y+42	; 0x2a
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	40 e2       	ldi	r20, 0x20	; 32
    4692:	51 e4       	ldi	r21, 0x41	; 65
    4694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	bc 01       	movw	r22, r24
    469e:	cd 01       	movw	r24, r26
    46a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	9a a3       	std	Y+34, r25	; 0x22
    46aa:	89 a3       	std	Y+33, r24	; 0x21
    46ac:	0f c0       	rjmp	.+30     	; 0x46cc <warning+0xe6>
    46ae:	88 ec       	ldi	r24, 0xC8	; 200
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	98 a3       	std	Y+32, r25	; 0x20
    46b4:	8f 8f       	std	Y+31, r24	; 0x1f
    46b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46b8:	98 a1       	ldd	r25, Y+32	; 0x20
    46ba:	01 97       	sbiw	r24, 0x01	; 1
    46bc:	f1 f7       	brne	.-4      	; 0x46ba <warning+0xd4>
    46be:	98 a3       	std	Y+32, r25	; 0x20
    46c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c2:	89 a1       	ldd	r24, Y+33	; 0x21
    46c4:	9a a1       	ldd	r25, Y+34	; 0x22
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	9a a3       	std	Y+34, r25	; 0x22
    46ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46cc:	89 a1       	ldd	r24, Y+33	; 0x21
    46ce:	9a a1       	ldd	r25, Y+34	; 0x22
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	69 f7       	brne	.-38     	; 0x46ae <warning+0xc8>
    46d4:	14 c0       	rjmp	.+40     	; 0x46fe <warning+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d6:	6b a1       	ldd	r22, Y+35	; 0x23
    46d8:	7c a1       	ldd	r23, Y+36	; 0x24
    46da:	8d a1       	ldd	r24, Y+37	; 0x25
    46dc:	9e a1       	ldd	r25, Y+38	; 0x26
    46de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	9a a3       	std	Y+34, r25	; 0x22
    46e8:	89 a3       	std	Y+33, r24	; 0x21
    46ea:	89 a1       	ldd	r24, Y+33	; 0x21
    46ec:	9a a1       	ldd	r25, Y+34	; 0x22
    46ee:	9e 8f       	std	Y+30, r25	; 0x1e
    46f0:	8d 8f       	std	Y+29, r24	; 0x1d
    46f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46f6:	01 97       	sbiw	r24, 0x01	; 1
    46f8:	f1 f7       	brne	.-4      	; 0x46f6 <warning+0x110>
    46fa:	9e 8f       	std	Y+30, r25	; 0x1e
    46fc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
		LCD_vidWriteString("THERE IS");
    4704:	82 ea       	ldi	r24, 0xA2	; 162
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		LCD_vidGoTo(1,0);
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	60 e0       	ldi	r22, 0x00	; 0
    4710:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_vidGoTo>
		LCD_vidWriteString("AN INTRUDER!!");
    4714:	8b ea       	ldi	r24, 0xAB	; 171
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_vidWriteString>
		for(u8 iterator=0;iterator<10;iterator++)
    471c:	1b a6       	std	Y+43, r1	; 0x2b
    471e:	f5 c0       	rjmp	.+490    	; 0x490a <warning+0x324>
		{
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_6,DIO_u8HIGH);
    4720:	84 e0       	ldi	r24, 0x04	; 4
    4722:	66 e0       	ldi	r22, 0x06	; 6
    4724:	40 e0       	ldi	r20, 0x00	; 0
    4726:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
			DIO_vidSTOGGPORTVAL(u8PORTD,DIO_u8PIN_5);
    472a:	84 e0       	ldi	r24, 0x04	; 4
    472c:	65 e0       	ldi	r22, 0x05	; 5
    472e:	0e 94 91 09 	call	0x1322	; 0x1322 <DIO_vidSTOGGPORTVAL>
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	a8 ec       	ldi	r26, 0xC8	; 200
    4738:	b3 e4       	ldi	r27, 0x43	; 67
    473a:	89 8f       	std	Y+25, r24	; 0x19
    473c:	9a 8f       	std	Y+26, r25	; 0x1a
    473e:	ab 8f       	std	Y+27, r26	; 0x1b
    4740:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4742:	69 8d       	ldd	r22, Y+25	; 0x19
    4744:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4748:	9c 8d       	ldd	r25, Y+28	; 0x1c
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	4a ef       	ldi	r20, 0xFA	; 250
    4750:	54 e4       	ldi	r21, 0x44	; 68
    4752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4756:	dc 01       	movw	r26, r24
    4758:	cb 01       	movw	r24, r22
    475a:	8d 8b       	std	Y+21, r24	; 0x15
    475c:	9e 8b       	std	Y+22, r25	; 0x16
    475e:	af 8b       	std	Y+23, r26	; 0x17
    4760:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4762:	6d 89       	ldd	r22, Y+21	; 0x15
    4764:	7e 89       	ldd	r23, Y+22	; 0x16
    4766:	8f 89       	ldd	r24, Y+23	; 0x17
    4768:	98 8d       	ldd	r25, Y+24	; 0x18
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	40 e8       	ldi	r20, 0x80	; 128
    4770:	5f e3       	ldi	r21, 0x3F	; 63
    4772:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4776:	88 23       	and	r24, r24
    4778:	2c f4       	brge	.+10     	; 0x4784 <warning+0x19e>
		__ticks = 1;
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	9c 8b       	std	Y+20, r25	; 0x14
    4780:	8b 8b       	std	Y+19, r24	; 0x13
    4782:	3f c0       	rjmp	.+126    	; 0x4802 <warning+0x21c>
	else if (__tmp > 65535)
    4784:	6d 89       	ldd	r22, Y+21	; 0x15
    4786:	7e 89       	ldd	r23, Y+22	; 0x16
    4788:	8f 89       	ldd	r24, Y+23	; 0x17
    478a:	98 8d       	ldd	r25, Y+24	; 0x18
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	3f ef       	ldi	r19, 0xFF	; 255
    4790:	4f e7       	ldi	r20, 0x7F	; 127
    4792:	57 e4       	ldi	r21, 0x47	; 71
    4794:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4798:	18 16       	cp	r1, r24
    479a:	4c f5       	brge	.+82     	; 0x47ee <warning+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    479c:	69 8d       	ldd	r22, Y+25	; 0x19
    479e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	40 e2       	ldi	r20, 0x20	; 32
    47aa:	51 e4       	ldi	r21, 0x41	; 65
    47ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b0:	dc 01       	movw	r26, r24
    47b2:	cb 01       	movw	r24, r22
    47b4:	bc 01       	movw	r22, r24
    47b6:	cd 01       	movw	r24, r26
    47b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47bc:	dc 01       	movw	r26, r24
    47be:	cb 01       	movw	r24, r22
    47c0:	9c 8b       	std	Y+20, r25	; 0x14
    47c2:	8b 8b       	std	Y+19, r24	; 0x13
    47c4:	0f c0       	rjmp	.+30     	; 0x47e4 <warning+0x1fe>
    47c6:	88 ec       	ldi	r24, 0xC8	; 200
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	9a 8b       	std	Y+18, r25	; 0x12
    47cc:	89 8b       	std	Y+17, r24	; 0x11
    47ce:	89 89       	ldd	r24, Y+17	; 0x11
    47d0:	9a 89       	ldd	r25, Y+18	; 0x12
    47d2:	01 97       	sbiw	r24, 0x01	; 1
    47d4:	f1 f7       	brne	.-4      	; 0x47d2 <warning+0x1ec>
    47d6:	9a 8b       	std	Y+18, r25	; 0x12
    47d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47da:	8b 89       	ldd	r24, Y+19	; 0x13
    47dc:	9c 89       	ldd	r25, Y+20	; 0x14
    47de:	01 97       	sbiw	r24, 0x01	; 1
    47e0:	9c 8b       	std	Y+20, r25	; 0x14
    47e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e4:	8b 89       	ldd	r24, Y+19	; 0x13
    47e6:	9c 89       	ldd	r25, Y+20	; 0x14
    47e8:	00 97       	sbiw	r24, 0x00	; 0
    47ea:	69 f7       	brne	.-38     	; 0x47c6 <warning+0x1e0>
    47ec:	14 c0       	rjmp	.+40     	; 0x4816 <warning+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ee:	6d 89       	ldd	r22, Y+21	; 0x15
    47f0:	7e 89       	ldd	r23, Y+22	; 0x16
    47f2:	8f 89       	ldd	r24, Y+23	; 0x17
    47f4:	98 8d       	ldd	r25, Y+24	; 0x18
    47f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	9c 8b       	std	Y+20, r25	; 0x14
    4800:	8b 8b       	std	Y+19, r24	; 0x13
    4802:	8b 89       	ldd	r24, Y+19	; 0x13
    4804:	9c 89       	ldd	r25, Y+20	; 0x14
    4806:	98 8b       	std	Y+16, r25	; 0x10
    4808:	8f 87       	std	Y+15, r24	; 0x0f
    480a:	8f 85       	ldd	r24, Y+15	; 0x0f
    480c:	98 89       	ldd	r25, Y+16	; 0x10
    480e:	01 97       	sbiw	r24, 0x01	; 1
    4810:	f1 f7       	brne	.-4      	; 0x480e <warning+0x228>
    4812:	98 8b       	std	Y+16, r25	; 0x10
    4814:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(400);
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_6,DIO_u8LOW);
    4816:	84 e0       	ldi	r24, 0x04	; 4
    4818:	66 e0       	ldi	r22, 0x06	; 6
    481a:	41 e0       	ldi	r20, 0x01	; 1
    481c:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_vidSETPINval>
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	a8 ec       	ldi	r26, 0xC8	; 200
    4826:	b2 e4       	ldi	r27, 0x42	; 66
    4828:	8b 87       	std	Y+11, r24	; 0x0b
    482a:	9c 87       	std	Y+12, r25	; 0x0c
    482c:	ad 87       	std	Y+13, r26	; 0x0d
    482e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4830:	6b 85       	ldd	r22, Y+11	; 0x0b
    4832:	7c 85       	ldd	r23, Y+12	; 0x0c
    4834:	8d 85       	ldd	r24, Y+13	; 0x0d
    4836:	9e 85       	ldd	r25, Y+14	; 0x0e
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	4a ef       	ldi	r20, 0xFA	; 250
    483e:	54 e4       	ldi	r21, 0x44	; 68
    4840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	8f 83       	std	Y+7, r24	; 0x07
    484a:	98 87       	std	Y+8, r25	; 0x08
    484c:	a9 87       	std	Y+9, r26	; 0x09
    484e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4850:	6f 81       	ldd	r22, Y+7	; 0x07
    4852:	78 85       	ldd	r23, Y+8	; 0x08
    4854:	89 85       	ldd	r24, Y+9	; 0x09
    4856:	9a 85       	ldd	r25, Y+10	; 0x0a
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	40 e8       	ldi	r20, 0x80	; 128
    485e:	5f e3       	ldi	r21, 0x3F	; 63
    4860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4864:	88 23       	and	r24, r24
    4866:	2c f4       	brge	.+10     	; 0x4872 <warning+0x28c>
		__ticks = 1;
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	9e 83       	std	Y+6, r25	; 0x06
    486e:	8d 83       	std	Y+5, r24	; 0x05
    4870:	3f c0       	rjmp	.+126    	; 0x48f0 <warning+0x30a>
	else if (__tmp > 65535)
    4872:	6f 81       	ldd	r22, Y+7	; 0x07
    4874:	78 85       	ldd	r23, Y+8	; 0x08
    4876:	89 85       	ldd	r24, Y+9	; 0x09
    4878:	9a 85       	ldd	r25, Y+10	; 0x0a
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	3f ef       	ldi	r19, 0xFF	; 255
    487e:	4f e7       	ldi	r20, 0x7F	; 127
    4880:	57 e4       	ldi	r21, 0x47	; 71
    4882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4886:	18 16       	cp	r1, r24
    4888:	4c f5       	brge	.+82     	; 0x48dc <warning+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    488a:	6b 85       	ldd	r22, Y+11	; 0x0b
    488c:	7c 85       	ldd	r23, Y+12	; 0x0c
    488e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4890:	9e 85       	ldd	r25, Y+14	; 0x0e
    4892:	20 e0       	ldi	r18, 0x00	; 0
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	40 e2       	ldi	r20, 0x20	; 32
    4898:	51 e4       	ldi	r21, 0x41	; 65
    489a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489e:	dc 01       	movw	r26, r24
    48a0:	cb 01       	movw	r24, r22
    48a2:	bc 01       	movw	r22, r24
    48a4:	cd 01       	movw	r24, r26
    48a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	9e 83       	std	Y+6, r25	; 0x06
    48b0:	8d 83       	std	Y+5, r24	; 0x05
    48b2:	0f c0       	rjmp	.+30     	; 0x48d2 <warning+0x2ec>
    48b4:	88 ec       	ldi	r24, 0xC8	; 200
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	9c 83       	std	Y+4, r25	; 0x04
    48ba:	8b 83       	std	Y+3, r24	; 0x03
    48bc:	8b 81       	ldd	r24, Y+3	; 0x03
    48be:	9c 81       	ldd	r25, Y+4	; 0x04
    48c0:	01 97       	sbiw	r24, 0x01	; 1
    48c2:	f1 f7       	brne	.-4      	; 0x48c0 <warning+0x2da>
    48c4:	9c 83       	std	Y+4, r25	; 0x04
    48c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c8:	8d 81       	ldd	r24, Y+5	; 0x05
    48ca:	9e 81       	ldd	r25, Y+6	; 0x06
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	9e 83       	std	Y+6, r25	; 0x06
    48d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d2:	8d 81       	ldd	r24, Y+5	; 0x05
    48d4:	9e 81       	ldd	r25, Y+6	; 0x06
    48d6:	00 97       	sbiw	r24, 0x00	; 0
    48d8:	69 f7       	brne	.-38     	; 0x48b4 <warning+0x2ce>
    48da:	14 c0       	rjmp	.+40     	; 0x4904 <warning+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48dc:	6f 81       	ldd	r22, Y+7	; 0x07
    48de:	78 85       	ldd	r23, Y+8	; 0x08
    48e0:	89 85       	ldd	r24, Y+9	; 0x09
    48e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e8:	dc 01       	movw	r26, r24
    48ea:	cb 01       	movw	r24, r22
    48ec:	9e 83       	std	Y+6, r25	; 0x06
    48ee:	8d 83       	std	Y+5, r24	; 0x05
    48f0:	8d 81       	ldd	r24, Y+5	; 0x05
    48f2:	9e 81       	ldd	r25, Y+6	; 0x06
    48f4:	9a 83       	std	Y+2, r25	; 0x02
    48f6:	89 83       	std	Y+1, r24	; 0x01
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	9a 81       	ldd	r25, Y+2	; 0x02
    48fc:	01 97       	sbiw	r24, 0x01	; 1
    48fe:	f1 f7       	brne	.-4      	; 0x48fc <warning+0x316>
    4900:	9a 83       	std	Y+2, r25	; 0x02
    4902:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
		LCD_vidWriteString("THERE IS");
		LCD_vidGoTo(1,0);
		LCD_vidWriteString("AN INTRUDER!!");
		for(u8 iterator=0;iterator<10;iterator++)
    4904:	8b a5       	ldd	r24, Y+43	; 0x2b
    4906:	8f 5f       	subi	r24, 0xFF	; 255
    4908:	8b a7       	std	Y+43, r24	; 0x2b
    490a:	8b a5       	ldd	r24, Y+43	; 0x2b
    490c:	8a 30       	cpi	r24, 0x0A	; 10
    490e:	08 f4       	brcc	.+2      	; 0x4912 <warning+0x32c>
    4910:	07 cf       	rjmp	.-498    	; 0x4720 <warning+0x13a>
			_delay_ms(400);
			DIO_vidSETPINval(u8PORTD,DIO_u8PIN_6,DIO_u8LOW);
			_delay_ms(100);

		}
		LCD_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_vidSendCommand>
	}


}
    4918:	ab 96       	adiw	r28, 0x2b	; 43
    491a:	0f b6       	in	r0, 0x3f	; 63
    491c:	f8 94       	cli
    491e:	de bf       	out	0x3e, r29	; 62
    4920:	0f be       	out	0x3f, r0	; 63
    4922:	cd bf       	out	0x3d, r28	; 61
    4924:	cf 91       	pop	r28
    4926:	df 91       	pop	r29
    4928:	08 95       	ret

0000492a <segment>:

void segment(void)
{
    492a:	df 93       	push	r29
    492c:	cf 93       	push	r28
    492e:	cd b7       	in	r28, 0x3d	; 61
    4930:	de b7       	in	r29, 0x3e	; 62

	if(segment_counter==0)
    4932:	80 91 cc 00 	lds	r24, 0x00CC
    4936:	88 23       	and	r24, r24
    4938:	31 f4       	brne	.+12     	; 0x4946 <segment+0x1c>
	{
		DIO_vidSETPORTVAL(u8PORTC,Numbers[0] );
    493a:	90 91 c7 00 	lds	r25, 0x00C7
    493e:	83 e0       	ldi	r24, 0x03	; 3
    4940:	69 2f       	mov	r22, r25
    4942:	0e 94 49 09 	call	0x1292	; 0x1292 <DIO_vidSETPORTVAL>
	}
	if(segment_counter==1)
    4946:	80 91 cc 00 	lds	r24, 0x00CC
    494a:	81 30       	cpi	r24, 0x01	; 1
    494c:	31 f4       	brne	.+12     	; 0x495a <segment+0x30>
	{
		DIO_vidSETPORTVAL(u8PORTC,Numbers[1] );
    494e:	90 91 c8 00 	lds	r25, 0x00C8
    4952:	83 e0       	ldi	r24, 0x03	; 3
    4954:	69 2f       	mov	r22, r25
    4956:	0e 94 49 09 	call	0x1292	; 0x1292 <DIO_vidSETPORTVAL>
	}
	if(segment_counter==2)
    495a:	80 91 cc 00 	lds	r24, 0x00CC
    495e:	82 30       	cpi	r24, 0x02	; 2
    4960:	31 f4       	brne	.+12     	; 0x496e <segment+0x44>
	{
		DIO_vidSETPORTVAL(u8PORTC,Numbers[2]);
    4962:	90 91 c9 00 	lds	r25, 0x00C9
    4966:	83 e0       	ldi	r24, 0x03	; 3
    4968:	69 2f       	mov	r22, r25
    496a:	0e 94 49 09 	call	0x1292	; 0x1292 <DIO_vidSETPORTVAL>
	}
	segment_counter++;
    496e:	80 91 cc 00 	lds	r24, 0x00CC
    4972:	8f 5f       	subi	r24, 0xFF	; 255
    4974:	80 93 cc 00 	sts	0x00CC, r24
}
    4978:	cf 91       	pop	r28
    497a:	df 91       	pop	r29
    497c:	08 95       	ret

0000497e <__prologue_saves__>:
    497e:	2f 92       	push	r2
    4980:	3f 92       	push	r3
    4982:	4f 92       	push	r4
    4984:	5f 92       	push	r5
    4986:	6f 92       	push	r6
    4988:	7f 92       	push	r7
    498a:	8f 92       	push	r8
    498c:	9f 92       	push	r9
    498e:	af 92       	push	r10
    4990:	bf 92       	push	r11
    4992:	cf 92       	push	r12
    4994:	df 92       	push	r13
    4996:	ef 92       	push	r14
    4998:	ff 92       	push	r15
    499a:	0f 93       	push	r16
    499c:	1f 93       	push	r17
    499e:	cf 93       	push	r28
    49a0:	df 93       	push	r29
    49a2:	cd b7       	in	r28, 0x3d	; 61
    49a4:	de b7       	in	r29, 0x3e	; 62
    49a6:	ca 1b       	sub	r28, r26
    49a8:	db 0b       	sbc	r29, r27
    49aa:	0f b6       	in	r0, 0x3f	; 63
    49ac:	f8 94       	cli
    49ae:	de bf       	out	0x3e, r29	; 62
    49b0:	0f be       	out	0x3f, r0	; 63
    49b2:	cd bf       	out	0x3d, r28	; 61
    49b4:	09 94       	ijmp

000049b6 <__epilogue_restores__>:
    49b6:	2a 88       	ldd	r2, Y+18	; 0x12
    49b8:	39 88       	ldd	r3, Y+17	; 0x11
    49ba:	48 88       	ldd	r4, Y+16	; 0x10
    49bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    49be:	6e 84       	ldd	r6, Y+14	; 0x0e
    49c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    49c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    49c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    49c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    49c8:	b9 84       	ldd	r11, Y+9	; 0x09
    49ca:	c8 84       	ldd	r12, Y+8	; 0x08
    49cc:	df 80       	ldd	r13, Y+7	; 0x07
    49ce:	ee 80       	ldd	r14, Y+6	; 0x06
    49d0:	fd 80       	ldd	r15, Y+5	; 0x05
    49d2:	0c 81       	ldd	r16, Y+4	; 0x04
    49d4:	1b 81       	ldd	r17, Y+3	; 0x03
    49d6:	aa 81       	ldd	r26, Y+2	; 0x02
    49d8:	b9 81       	ldd	r27, Y+1	; 0x01
    49da:	ce 0f       	add	r28, r30
    49dc:	d1 1d       	adc	r29, r1
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	f8 94       	cli
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	cd bf       	out	0x3d, r28	; 61
    49e8:	ed 01       	movw	r28, r26
    49ea:	08 95       	ret

000049ec <_exit>:
    49ec:	f8 94       	cli

000049ee <__stop_program>:
    49ee:	ff cf       	rjmp	.-2      	; 0x49ee <__stop_program>
